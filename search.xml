<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF show unusualrsa4</title>
      <link href="/2020/09/17/CTF-show-unusualrsa4/"/>
      <url>/2020/09/17/CTF-show-unusualrsa4/</url>
      
        <content type="html"><![CDATA[<p>Lazzaro大佬出的题目，想了几天，也看了hint，还是没思路，在<a href="https://lazzzaro.github.io/" target="_blank" rel="noopener">大佬的博客</a>里看了看wp，总算是搞明白了，tql</p><blockquote><p>原wp：<a href="https://lazzzaro.github.io/2020/09/01/other-CTFshow%E4%BE%9B%E9%A2%98-unusualrsa%E7%B3%BB%E5%88%97/" target="_blank" rel="noopener">https://lazzzaro.github.io/2020/09/01/other-CTFshow供题-unusualrsa系列/</a></p></blockquote><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line">print(invert(q,p))</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#113350138578125471637271827037682321496361317426731366252238155037440385105997423113671392038498349668206564266165641194668802966439465128197299073392773586475372002967691512324151673246253769186679521811837698540632534357656221715752733588763108463093085549826122278822507051740839450621887847679420115044512</span></span><br><span class="line"><span class="comment">#27451162557471435115589774083548548295656504741540442329428952622804866596982747294930359990602468139076296433114830591568558281638895221175730257057177963017177029796952153436494826699802526267315286199047856818119832831065330607262567182123834935483241720327760312585050990828017966534872294866865933062292893033455722786996125448961180665396831710915882697366767203858387536850040283296013681157070419459208544201363726008380145444214578735817521392863391376821427153094146080055636026442795625833039248405951946367504865008639190248509000950429593990524808051779361516918410348680313371657111798761410501793645137</span></span><br><span class="line"><span class="comment">#619543409290228183446186073184791934402487500047968659800765382797769750763696880547221266055431306972840980865602729031475343233357485820872268765911041297456664938715949124290204230537793877747551374176167292845717246943780371146830637073310108630812389581197831196039107931968703635129091224513813241403591357678410312272233389708366642638825455844282490676862737715585788829936919637988039113463707959069907015464745700766013573282604376277598510224455044288896809217461295080140187509519005245601483583507547733673523120385089098002298314719617693895392148294399937798485146568296114338393548124451378170302291</span></span><br></pre></td></tr></table></figure><p>已知题目给出了 $e$ , $d$, $invert(q,p)$, $c$ </p><p>hint:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ed&#x3D;1+kφ</span><br><span class="line">比较e与k比特位数</span><br><span class="line">联立两式，尝试化简 (inv(q,p)·φ) mod p</span><br><span class="line"></span><br><span class="line">费马小定理</span><br><span class="line">对于任意 r,k1,k2，当 k2 为 k1 因子时，r mod k2&#x3D;(r mod k1) mod k2</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>因为有 $ed = 1 + k(p - 1)(q - 1)$</p><p>所以 $\varphi(n)=(p-1)(q-1)=\frac{ed-1}{k}$</p><p>此处可以爆破k，得到 $\varphi(n)$</p><p>注：k与e同比特位，且爆破时应从大到小爆破</p></li><li><p>由invert(p,q)可知： ${_p}q\equiv 1\mod(p)$</p><script type="math/tex; mode=display">\begin{eqnarray} \varphi(n)&=&(p-1)(q-1)\\&=&pq-p-q+1\\&=&n-p-q+1 \end{eqnarray}</script><hr><script type="math/tex; mode=display">\begin{eqnarray} {\_p*\varphi(n)}\mod(p)&\equiv& {\_p(n-p-q+1)}\mod(p)\\ &\equiv& {(\_pn-\_pp-\_pq+\_p)}\mod(p)\\ &\equiv& {(0-0-1+\_p)}\mod(p) \\&\equiv& {(-1+\_p)}\mod(p) \end{eqnarray}</script><p>所以有 ${_p*\varphi(n)+1-_p \equiv 0 \mod(p)}$</p><p>即 $x = _p*\varphi(n)+1-_p$ 能被 $p$ 整除</p></li><li><p>由费马小定理可知：存在任意 $r$ 满足 $r^{p-1} \equiv 1\mod(p)$</p><script type="math/tex; mode=display">\begin{eqnarray} r^{\varphi(n)}&\equiv& (r^{p-1})^{q-1}\\&\equiv& 1^{q-1}\mod(p)\\&\equiv& 1\mod(p)\end{eqnarray}</script><p>又因为对于任意 $r,k_1,k_2$ ，当$k_2$为$k_1$的因子时，有</p><p>$r\mod(k_2)=(r\mod(k_1))\mod(k_1)$</p><p>所以 $r^{\varphi(n)}\mod(p)\equiv(r^{\varphi(n)}\mod x)\mod p\equiv kp+1$</p><p>例举 $r=2,3,4…$ 取最小公因数即为$p$</p></li><li><p>由 $_pq\equiv 1\mod p$ 可计算出 $q$ ，最后得到$m$</p></li></ol><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = <span class="number">27451162557471435115589774083548548295656504741540442329428952622804866596982747294930359990602468139076296433114830591568558281638895221175730257057177963017177029796952153436494826699802526267315286199047856818119832831065330607262567182123834935483241720327760312585050990828017966534872294866865933062292893033455722786996125448961180665396831710915882697366767203858387536850040283296013681157070419459208544201363726008380145444214578735817521392863391376821427153094146080055636026442795625833039248405951946367504865008639190248509000950429593990524808051779361516918410348680313371657111798761410501793645137</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line"><span class="keyword">if</span>((e * d - <span class="number">1</span>) % (<span class="number">1000000</span> - k) == <span class="number">0</span>):</span><br><span class="line"><span class="comment"># print(1000000 - k)</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k0 = 250704,125352,83568,62676,41784,31338,27856,20892,15669,13928,10446,6964,5223,3482,1741,144,72,48,36,24,18,16,12,9,8,6,4,3,2,1</span></span><br><span class="line">k0 = <span class="number">62676</span></span><br><span class="line">phi = (e * d - <span class="number">1</span>) // k0</span><br><span class="line"><span class="comment"># print(phi)</span></span><br><span class="line"></span><br><span class="line">_p = <span class="number">113350138578125471637271827037682321496361317426731366252238155037440385105997423113671392038498349668206564266165641194668802966439465128197299073392773586475372002967691512324151673246253769186679521811837698540632534357656221715752733588763108463093085549826122278822507051740839450621887847679420115044512</span></span><br><span class="line">x = <span class="number">1</span> + _p * phi - _p</span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line"></span><br><span class="line">y1 = pow(<span class="number">5</span>, phi, x) - <span class="number">1</span></span><br><span class="line">y2 = pow(<span class="number">3</span>, phi, x) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p = gcd(y1, y2)</span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"></span><br><span class="line">q = invert(_p, p)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="number">619543409290228183446186073184791934402487500047968659800765382797769750763696880547221266055431306972840980865602729031475343233357485820872268765911041297456664938715949124290204230537793877747551374176167292845717246943780371146830637073310108630812389581197831196039107931968703635129091224513813241403591357678410312272233389708366642638825455844282490676862737715585788829936919637988039113463707959069907015464745700766013573282604376277598510224455044288896809217461295080140187509519005245601483583507547733673523120385089098002298314719617693895392148294399937798485146568296114338393548124451378170302291</span></span><br><span class="line">m = pow(c, d, n)</span><br><span class="line"></span><br><span class="line">print(libnum.n2s(m))</span><br><span class="line"><span class="comment"># flag&#123;wh47_1f_y0u_kn0w_1nv3r7_q_p~?&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> RSA </tag>
            
            <tag> CTFshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA中e与φ(n)不互素</title>
      <link href="/2020/08/17/RSA%E4%B8%ADe%E4%B8%8E%CF%86-n-%E4%B8%8D%E4%BA%92%E7%B4%A0/"/>
      <url>/2020/08/17/RSA%E4%B8%ADe%E4%B8%8E%CF%86-n-%E4%B8%8D%E4%BA%92%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>在ctf.show中刷到一道题目，给出了两组e,p,q,c，但其中gcd(e,φ(n))!=1，网上查了一下</p><blockquote><p><a href="https://blog.csdn.net/chenzzhenguo/article/details/94339659" target="_blank" rel="noopener">https://blog.csdn.net/chenzzhenguo/article/details/94339659</a></p><p><a href="https://www.anquanke.com/post/id/164575#h2-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/164575#h2-2</a></p></blockquote><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">e1 = <span class="number">14606334023791426</span></span><br><span class="line">p1 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q1 = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">c1 = <span class="number">11402389955595766056824801105373550411371729054679429421548608725777586555536302409478824585455648944737304660137306241012321255955693234304201530700362069004620531537922710568821152217381257446478619320278993539785699090234418603086426252498046106436360959622415398647198014716351359752734123844386459925553497427680448633869522591650121047156082228109421246662020164222925272078687550896012363926358633323439494967417041681357707006545728719651494384317497942177993032739778398001952201667284323691607312819796036779374423837576479275454953999865750584684592993292347483309178232523897058253412878901324740104919248</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">13813369129257838</span></span><br><span class="line">p2 = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q2 = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">c2 = <span class="number">7984888899827615209197324489527982755561403577403539988687419233579203660429542197972867526015619223510964699107198708420785278262082902359114040327940253582108364104049849773108799812000586446829979564395322118616382603675257162995702363051699403525169767736410365076696890117813211614468971386159587698853722658492385717150691206731593509168262529568464496911821756352254486299361607604338523750318977620039669792468240086472218586697386948479265417452517073901655900118259488507311321060895347770921790483894095085039802955700146474474606794444308825840221205073230671387989412399673375520605000270180367035526919</span></span><br></pre></td></tr></table></figure><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>其中p1=p2，gcd(e1, φ(n1)) = gcd(e1, φ(n2)) = 14</p><script type="math/tex; mode=display">gcd(e,\varphi(n))=b \\ed\equiv 1\pmod {\varphi(n)} \\e = a * b \\abd\equiv 1\pmod {\varphi(n)} \\m^{ab}\equiv c \pmod n \\c^{bd}\equiv m^{abbd}\equiv m^b\pmod n</script><p>可以得到b=14，而此时，a与φ(n)正好互素</p><p>可以通过逆元求到bd <code>bd=gmpy2.invert(e, φ(n))</code></p><p>通过pow(c,bd,n)</p><p>可以得到两组值：</p><script type="math/tex; mode=display">res1 \equiv m^{14}\pmod {n1} \\res2 \equiv m^{14}\pmod {n2}</script><p>接着进一步推导</p><script type="math/tex; mode=display">res1 \equiv m^{14}\pmod {p1} \\res1 \equiv m^{14}\pmod {q1} \\res2 \equiv m^{14}\pmod {q2}</script><p>这里就是可以使用中国剩余定理了</p><p>可以解出一个特解m的值</p><p>当模n1，n2无法解出时，考虑换成模q1*q2</p><script type="math/tex; mode=display">res \equiv m^{14}\pmod {q1*q2}\\原理如下\\res1 = k1 * q1 + m^{14}\\res2 = k2 * q2 + m^{14}\\res1 * res2 = k1k2q1q2 + (k1q1 + k2q2 + m^{14})m^{14} \\两边同时模q1*q2即为上式</script><p>此时，该题目就被化简为一个新的RSA</p><blockquote><p>密文为刚刚求出的特解m</p><p>公钥e=14</p><p>模数分解为q1，q2</p></blockquote><p>而此时就可按照之前的思路进行求解</p><script type="math/tex; mode=display">c\equiv m^e\pmod {q1q2} \\e = 2 * 7 \\2 * 7 * d \equiv 1 \pmod {q1q2} \\m^2\equiv c^{d*2}\pmod {q1q2}</script><p>先求得7的逆元，然后对m开方即可</p><h1 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">14606334023791426</span></span><br><span class="line">c1 = <span class="number">11402389955595766056824801105373550411371729054679429421548608725777586555536302409478824585455648944737304660137306241012321255955693234304201530700362069004620531537922710568821152217381257446478619320278993539785699090234418603086426252498046106436360959622415398647198014716351359752734123844386459925553497427680448633869522591650121047156082228109421246662020164222925272078687550896012363926358633323439494967417041681357707006545728719651494384317497942177993032739778398001952201667284323691607312819796036779374423837576479275454953999865750584684592993292347483309178232523897058253412878901324740104919248</span></span><br><span class="line">e2 = <span class="number">13813369129257838</span></span><br><span class="line">c2 = <span class="number">7984888899827615209197324489527982755561403577403539988687419233579203660429542197972867526015619223510964699107198708420785278262082902359114040327940253582108364104049849773108799812000586446829979564395322118616382603675257162995702363051699403525169767736410365076696890117813211614468971386159587698853722658492385717150691206731593509168262529568464496911821756352254486299361607604338523750318977620039669792468240086472218586697386948479265417452517073901655900118259488507311321060895347770921790483894095085039802955700146474474606794444308825840221205073230671387989412399673375520605000270180367035526919</span></span><br><span class="line">p = <span class="number">121009772735460235364940622989433807619211926015494087453674747614331295040063679722422298286549493698150690694965106103822315378461970129912436074962111424616439032849788953648286506433464358834178903821069564798378666159882090757625817745990230736982709059859613843100974349380542982235135982530318438330859</span></span><br><span class="line">q1 = <span class="number">130968576816900149996914427770826228884925960001279609559095138835900329492765336419489982304805369724685145941218640504262821549441728192761733409684831633194346504685627189375724517070780334885673563409259345291959439026700006694655545512308390416859315892447092639503318475587220630455745460309886030186593</span></span><br><span class="line">q2 = <span class="number">94582257784130735233174402362819395926641026753071039760251190444144495369829487705195913337502962816079184062352678128843179586054535283861793827497892600954650126991213176547276006780610945133603745974181504975165082485845571788686928859549252522952174376071500707863379238688200493621993937563296490615649</span></span><br><span class="line">n1 = p * q1</span><br><span class="line">n2 = p * q2</span><br><span class="line">f1 = (p - <span class="number">1</span>) * (q1 - <span class="number">1</span>)</span><br><span class="line">f2 = (p - <span class="number">1</span>) * (q2 - <span class="number">1</span>)</span><br><span class="line">tmp = <span class="number">14</span></span><br><span class="line"></span><br><span class="line">e1 = e1 // tmp</span><br><span class="line">e2 = e2 // tmp</span><br><span class="line">bd1 = invmod(e1, f1)</span><br><span class="line">bd2 = invmod(e2, f2)</span><br><span class="line"></span><br><span class="line">m1 = pow(c1, bd1, n1)</span><br><span class="line">m2 = pow(c2, bd2, n2)</span><br><span class="line">m3 = m1 % p</span><br><span class="line">m2 = m2 % q2</span><br><span class="line">m1 = m1 % q1</span><br><span class="line"></span><br><span class="line">m = solve_crt([m1, m2, m3], [q1, q2, p]) </span><br><span class="line">print(m)</span><br><span class="line">n = q1 * q2</span><br><span class="line">f = (q1 - <span class="number">1</span>) * (q2 - <span class="number">1</span>)</span><br><span class="line">m = m % n</span><br><span class="line">d2 = invmod(<span class="number">7</span>, f)</span><br><span class="line">m = pow(m, d2, n)</span><br><span class="line">print(n2s(gmpy2.iroot(m, <span class="number">2</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> RSA </tag>
            
            <tag> CTFshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学实践（二）</title>
      <link href="/2020/07/16/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/07/16/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>之前记录了替代和置换类加解密<br>这里为流密码部分代码</p><a id="more"></a><h1 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h1><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">KSA</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="string">""" 密钥初始流程KSA """</span></span><br><span class="line">    key = hashlib.md5(key.encode(<span class="string">'UTF-8'</span>)).hexdigest()</span><br><span class="line">    S = []</span><br><span class="line">    K = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        S.append(i)</span><br><span class="line">        K.append(key[i % len(key)])</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + ord(K[i])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PRGA</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    <span class="string">""" 加解密算法 """</span></span><br><span class="line">    S = KSA(key)</span><br><span class="line">    outText = <span class="string">""</span></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> text:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line"></span><br><span class="line">        c = chr(ord(a) ^ S[t])</span><br><span class="line">        outText += c</span><br><span class="line">    <span class="keyword">return</span> outText</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encodeBase64</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="string">""" text to base64 """</span></span><br><span class="line">    text1 = text.encode(<span class="string">'UTF-8'</span>)</span><br><span class="line">    text2 = base64.b64encode(text1)</span><br><span class="line">    text3 = text2.decode()</span><br><span class="line">    <span class="keyword">return</span> text3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decodeBase64</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="string">""" base64 to text """</span></span><br><span class="line">    text1 = text.encode()</span><br><span class="line">    text2 = base64.b64decode(text1)</span><br><span class="line">    text3 = text2.decode(<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> text3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 加密最终输出为base64串 """</span></span><br><span class="line">    plain = encodeBase64(plaintext)</span><br><span class="line">    cipher = PRGA(plain, key)</span><br><span class="line">    <span class="keyword">return</span> encodeBase64(cipher)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 因为之前输出是base64串，所以需要对其检验 """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cipher = decodeBase64(ciphertext)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain = PRGA(cipher, key)</span><br><span class="line">        <span class="keyword">return</span> decodeBase64(plain)</span><br></pre></td></tr></table></figure><h1 id="分块密码"><a href="#分块密码" class="headerlink" title="分块密码"></a>分块密码</h1><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>desMatrix.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始置换</span></span><br><span class="line">IP = [<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">      <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">      <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">      <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">      <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</span><br><span class="line">      <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">      <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">      <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 末置换</span></span><br><span class="line">FP = [<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">      <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">      <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">      <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">      <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">      <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">      <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">      <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展置换</span></span><br><span class="line">E_Box = [<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">         <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>,</span><br><span class="line">         <span class="number">12</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">         <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">         <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>,</span><br><span class="line">         <span class="number">28</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># P盒</span></span><br><span class="line">P_Box = [<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">         <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">         <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">         <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒</span></span><br><span class="line">S_Box = [</span><br><span class="line">    [<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>,</span><br><span class="line">     <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>,</span><br><span class="line">     <span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>,</span><br><span class="line">     <span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">     <span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>,</span><br><span class="line">     <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>,</span><br><span class="line">     <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>,</span><br><span class="line">     <span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>,</span><br><span class="line">     <span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>,</span><br><span class="line">     <span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>,</span><br><span class="line">     <span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>,</span><br><span class="line">     <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>,</span><br><span class="line">     <span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>,</span><br><span class="line">     <span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>,</span><br><span class="line">     <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>,</span><br><span class="line">     <span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>,</span><br><span class="line">     <span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>,</span><br><span class="line">     <span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>,</span><br><span class="line">     <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>,</span><br><span class="line">     <span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>,</span><br><span class="line">     <span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>,</span><br><span class="line">     <span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>],</span><br><span class="line"></span><br><span class="line">    [<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>,</span><br><span class="line">     <span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>,</span><br><span class="line">     <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>,</span><br><span class="line">     <span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>],</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥置换</span></span><br><span class="line">PC_1 = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">        <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">        <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">        <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">        <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">        <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩置换</span></span><br><span class="line">PC_2 = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">        <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">        <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">        <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">        <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥位移</span></span><br><span class="line">LS = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> tools</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> desMatrix <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strToHex</span><span class="params">(str_text)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将str型数据转换成16进制字符串</span></span><br><span class="line"><span class="string">    :param str_text: str</span></span><br><span class="line"><span class="string">    :return: hex</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> binascii.hexlify(str_text.encode()).decode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexToBin</span><span class="params">(hex_text)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将hex型数据转换成2进制的字符串</span></span><br><span class="line"><span class="string">    :param hex_text: hex</span></span><br><span class="line"><span class="string">    :return: bin</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    bin_text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> hex_text:</span><br><span class="line">        text_ord = int(i, <span class="number">16</span>)</span><br><span class="line">        bin_text += decToBinStr(text_ord)</span><br><span class="line">    <span class="comment"># 将text与key补全，使长度其为64整数倍</span></span><br><span class="line">    hex_len = len(hex_text) % <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> hex_len != <span class="number">0</span>:</span><br><span class="line">        bin_text += <span class="string">'0'</span> * (<span class="number">16</span> - hex_len) * <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> bin_text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decToBinStr</span><span class="params">(d, lens=<span class="number">4</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将10进制转为2进制字符串</span></span><br><span class="line"><span class="string">    :param d: dec num "1"</span></span><br><span class="line"><span class="string">    :param lens:</span></span><br><span class="line"><span class="string">    :return: bin num "0001"</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    bin_text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(lens):</span><br><span class="line">        bin_text = str(d &gt;&gt; i &amp; <span class="number">1</span>) + bin_text</span><br><span class="line">    <span class="keyword">return</span> bin_text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binToHex</span><span class="params">(bin_text)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将2进制字符串转为hex型字符串</span></span><br><span class="line"><span class="string">    :param bin_text: bin</span></span><br><span class="line"><span class="string">    :return: hex</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    bin_num = bin_text.encode()</span><br><span class="line">    res = hex(int(bin_num, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> str(res)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明文密文置换部分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ipChange</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    IP盒处理</span></span><br><span class="line"><span class="string">    :param bin_str: 64bit</span></span><br><span class="line"><span class="string">    :return: 64bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> IP:</span><br><span class="line">        res += bin_str[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fpChange</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    末置换</span></span><br><span class="line"><span class="string">    :param bin_str: 64bit</span></span><br><span class="line"><span class="string">    :return: 64bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> FP:</span><br><span class="line">        res += bin_str[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eChange</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    E-Box置换</span></span><br><span class="line"><span class="string">    :param bin_str: 32bit</span></span><br><span class="line"><span class="string">    :return: 48bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> E_Box:</span><br><span class="line">        res += bin_str[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_xor</span><span class="params">(text, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    异或</span></span><br><span class="line"><span class="string">    :param text: 48bit</span></span><br><span class="line"><span class="string">    :param key: 48bit</span></span><br><span class="line"><span class="string">    :return: 48bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(text)):</span><br><span class="line">        xor_num = int(text[i], <span class="number">10</span>) ^ int(key[i], <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> xor_num == <span class="number">1</span>:</span><br><span class="line">            res += <span class="string">'1'</span></span><br><span class="line">        <span class="keyword">if</span> xor_num == <span class="number">0</span>:</span><br><span class="line">            res += <span class="string">'0'</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sChange</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    S-Box置换</span></span><br><span class="line"><span class="string">    :param bin_str: 48bit</span></span><br><span class="line"><span class="string">    :return: 32bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(bin_str), <span class="number">6</span>):</span><br><span class="line">        run_str = bin_str[i:i + <span class="number">6</span>]</span><br><span class="line">        row = int(run_str[<span class="number">0</span>] + run_str[<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">        col = int(run_str[<span class="number">1</span>:<span class="number">5</span>], <span class="number">2</span>)</span><br><span class="line">        num = bin(S_Box[c][row * <span class="number">16</span> + col])[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>-len(num)):</span><br><span class="line">            num = <span class="string">'0'</span> + num</span><br><span class="line">        res += num</span><br><span class="line">        c += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pChange</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    P-Box置换</span></span><br><span class="line"><span class="string">    :param bin_str: 64bit</span></span><br><span class="line"><span class="string">    :return: 64bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> P_Box:</span><br><span class="line">        res += bin_str[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥处理部分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pc1_Change</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    密钥PC-1置换</span></span><br><span class="line"><span class="string">    :param key: 64bit</span></span><br><span class="line"><span class="string">    :return: 56bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> PC_1:</span><br><span class="line">        res += key[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leftShift</span><span class="params">(sub_key, num)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    循环左移</span></span><br><span class="line"><span class="string">    :param sub_key: 28bit</span></span><br><span class="line"><span class="string">    :param num: turn</span></span><br><span class="line"><span class="string">    :return: 28bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = sub_key[num:len(sub_key)]</span><br><span class="line">    res = res + sub_key[<span class="number">0</span>:num]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pc2_Change</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    密钥PC-2置换</span></span><br><span class="line"><span class="string">    :param key: 56bit</span></span><br><span class="line"><span class="string">    :return: 48bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> PC_2:</span><br><span class="line">        res += key[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_f</span><span class="params">(bin_str, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将E-Box,xor,S-Box,P-Box的运算封装在一起</span></span><br><span class="line"><span class="string">    :param bin_str: 32bit</span></span><br><span class="line"><span class="string">    :param key: 48bit</span></span><br><span class="line"><span class="string">    :return: 32bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    first_str = eChange(bin_str)  <span class="comment"># E-Box 32bit-&gt;48bit</span></span><br><span class="line">    second_str = str_xor(first_str, key)  <span class="comment"># xor</span></span><br><span class="line">    third_str = sChange(second_str)  <span class="comment"># S-Box 48bit-&gt;32bit</span></span><br><span class="line">    final_str = pChange(third_str)  <span class="comment"># P-Box 32bit</span></span><br><span class="line">    <span class="keyword">return</span> final_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成子密钥</span></span><br><span class="line"><span class="string">    :param key: 64bit</span></span><br><span class="line"><span class="string">    :return: 48bit * 16</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    key_list = []</span><br><span class="line">    first_change = pc1_Change(key)  <span class="comment"># 56bit</span></span><br><span class="line">    key_C0 = first_change[<span class="number">0</span>:<span class="number">28</span>]  <span class="comment"># 28bit</span></span><br><span class="line">    key_D0 = first_change[<span class="number">28</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> LS:</span><br><span class="line">        key_Ci = leftShift(key_C0, i)</span><br><span class="line">        key_Di = leftShift(key_D0, i)</span><br><span class="line">        second_change = pc2_Change(key_Ci + key_Di)  <span class="comment"># 48bit</span></span><br><span class="line">        key_list.append(second_change)</span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryptPart</span><span class="params">(bin_plain, bin_key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加密主要算法</span></span><br><span class="line"><span class="string">    :param bin_plain: 64bit</span></span><br><span class="line"><span class="string">    :param bin_key: 64bit</span></span><br><span class="line"><span class="string">    :return: 64bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ip_str = ipChange(bin_plain)  <span class="comment"># ip初始置换</span></span><br><span class="line">    key_list = gen_key(bin_key)  <span class="comment"># 生成子密钥</span></span><br><span class="line">    plain_left = ip_str[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">    plain_right = ip_str[<span class="number">32</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行前15次轮换</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">15</span>):</span><br><span class="line">        tmp_right = plain_right</span><br><span class="line">        f_res = function_f(tmp_right, key_list[i])</span><br><span class="line">        plain_right = str_xor(f_res, plain_left)</span><br><span class="line">        plain_left = tmp_right</span><br><span class="line">    <span class="comment"># 第16次轮换</span></span><br><span class="line">    f_res = function_f(plain_right, key_list[<span class="number">15</span>])</span><br><span class="line">    fin_left = str_xor(plain_left, f_res)</span><br><span class="line">    fin_right = plain_right</span><br><span class="line">    fin_str = fpChange(fin_left + fin_right)  <span class="comment"># 末置换</span></span><br><span class="line">    <span class="keyword">return</span> fin_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptPart</span><span class="params">(bin_cipher, bin_key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    解密函数主体部分，同加密算法，注意密钥是反序的</span></span><br><span class="line"><span class="string">    :param bin_cipher: 64bit</span></span><br><span class="line"><span class="string">    :param bin_key: 64bit</span></span><br><span class="line"><span class="string">    :return: 64bit</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ip_str = ipChange(bin_cipher)</span><br><span class="line">    key_list = gen_key(bin_key)</span><br><span class="line">    cipher_left = ip_str[<span class="number">0</span>:<span class="number">32</span>]</span><br><span class="line">    cipher_right = ip_str[<span class="number">32</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">15</span>):</span><br><span class="line">        j = <span class="number">15</span> - i  <span class="comment"># 从第16个子密钥开始轮换</span></span><br><span class="line">        tmp_right = cipher_right</span><br><span class="line">        f_res = function_f(cipher_right, key_list[j])</span><br><span class="line">        cipher_right = str_xor(cipher_left, f_res)</span><br><span class="line">        cipher_left = tmp_right</span><br><span class="line"></span><br><span class="line">    f_res = function_f(cipher_right, key_list[<span class="number">0</span>])</span><br><span class="line">    fin_left = str_xor(cipher_left, f_res)</span><br><span class="line">    fin_right = cipher_right</span><br><span class="line">    fin_str = fpChange(fin_left + fin_right)</span><br><span class="line">    <span class="keyword">return</span> fin_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加密函数入口，主要作用是将明文和密钥转为64倍数位的2进制bit流</span></span><br><span class="line"><span class="string">    :param plaintext:</span></span><br><span class="line"><span class="string">    :param key:</span></span><br><span class="line"><span class="string">    :return: 16进制密文</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    bin_plain = hexToBin(strToHex(plaintext))  <span class="comment"># 获得明文的64倍数位bit流</span></span><br><span class="line">    bin_key = hexToBin(strToHex(key))  <span class="comment"># 获得密钥的64倍数位bit流</span></span><br><span class="line">    tmp = re.findall(<span class="string">r'.&#123;64&#125;'</span>, bin_plain)  <span class="comment"># 将明文bit流分为64一组</span></span><br><span class="line">    bin_cipher = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">        bin_cipher += encryptPart(i, bin_key[<span class="number">0</span>:<span class="number">64</span>])  <span class="comment"># 对每组bit流进行加密</span></span><br><span class="line">    <span class="keyword">return</span> binToHex(bin_cipher)  <span class="comment"># 返回16进制密文</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    基本上同加密算法，不同的是首先需要对输入进行检查</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bin_cipher = hexToBin(ciphertext)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bin_key = hexToBin(strToHex(key))</span><br><span class="line">        tmp = re.findall(<span class="string">r'.&#123;64&#125;'</span>, bin_cipher)</span><br><span class="line">        bin_plain = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">            bin_plain += decryptPart(i, bin_key[<span class="number">0</span>:<span class="number">64</span>])</span><br><span class="line">        <span class="keyword">return</span> tools.bytesToLong(int(bin_plain.encode(), <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    m = <span class="string">"123456789 asd 加解密"</span></span><br><span class="line">    k = <span class="string">"123Des密码"</span></span><br><span class="line">    c = encrypt(m, k)</span><br><span class="line">    print(c)</span><br><span class="line">    d = decrypt(c, k)</span><br><span class="line">    print(d)</span><br></pre></td></tr></table></figure><h1 id="公钥密码"><a href="#公钥密码" class="headerlink" title="公钥密码"></a>公钥密码</h1><p>RSA相关的之前已经有了，这里主要是素性检验算法 RabinMiller 算法</p><h2 id="RabinMiller-算法"><a href="#RabinMiller-算法" class="headerlink" title="RabinMiller 算法"></a>RabinMiller 算法</h2><p>RabinMiller主要是用于检测素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabinMiller</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">""" RabinMiller算法具体实现 """</span></span><br><span class="line">    t = num - <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 计算 n - 1 = 2 ^ s * t</span></span><br><span class="line">    <span class="keyword">while</span> t % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        t = t // <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> trials <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="comment"># 随机整数b，2 &lt;= b &lt;= n-2</span></span><br><span class="line">        b = random.randrange(<span class="number">2</span>, num - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># r0 = b ^ t(mod n)</span></span><br><span class="line">        r = pow(b, t, num)</span><br><span class="line">        <span class="keyword">if</span> r != <span class="number">1</span>:</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> r != (num - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i == s - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    i = i + <span class="number">1</span></span><br><span class="line">                    r = (r ** <span class="number">2</span>) % num</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">""" 验证素数 """</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    lowPrimes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>,</span><br><span class="line">                 <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>,</span><br><span class="line">                 <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">211</span>, <span class="number">223</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>,</span><br><span class="line">                 <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">349</span>,</span><br><span class="line">                 <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">379</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">397</span>, <span class="number">401</span>, <span class="number">409</span>, <span class="number">419</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">439</span>, <span class="number">443</span>, <span class="number">449</span>,</span><br><span class="line">                 <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>, <span class="number">467</span>, <span class="number">479</span>, <span class="number">487</span>, <span class="number">491</span>, <span class="number">499</span>, <span class="number">503</span>, <span class="number">509</span>, <span class="number">521</span>, <span class="number">523</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">557</span>, <span class="number">563</span>, <span class="number">569</span>,</span><br><span class="line">                 <span class="number">571</span>, <span class="number">577</span>, <span class="number">587</span>, <span class="number">593</span>, <span class="number">599</span>, <span class="number">601</span>, <span class="number">607</span>, <span class="number">613</span>, <span class="number">617</span>, <span class="number">619</span>, <span class="number">631</span>, <span class="number">641</span>, <span class="number">643</span>, <span class="number">647</span>, <span class="number">653</span>, <span class="number">659</span>, <span class="number">661</span>,</span><br><span class="line">                 <span class="number">673</span>, <span class="number">677</span>, <span class="number">683</span>, <span class="number">691</span>, <span class="number">701</span>, <span class="number">709</span>, <span class="number">719</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">739</span>, <span class="number">743</span>, <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">769</span>, <span class="number">773</span>, <span class="number">787</span>,</span><br><span class="line">                 <span class="number">797</span>, <span class="number">809</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">827</span>, <span class="number">829</span>, <span class="number">839</span>, <span class="number">853</span>, <span class="number">857</span>, <span class="number">859</span>, <span class="number">863</span>, <span class="number">877</span>, <span class="number">881</span>, <span class="number">883</span>, <span class="number">887</span>, <span class="number">907</span>,</span><br><span class="line">                 <span class="number">911</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">937</span>, <span class="number">941</span>, <span class="number">947</span>, <span class="number">953</span>, <span class="number">967</span>, <span class="number">971</span>, <span class="number">977</span>, <span class="number">983</span>, <span class="number">991</span>, <span class="number">997</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> lowPrimes:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> prime <span class="keyword">in</span> lowPrimes:</span><br><span class="line">        <span class="keyword">if</span> num % prime == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> rabinMiller(num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateLargePrime</span><span class="params">(size=<span class="number">1024</span>)</span>:</span></span><br><span class="line">    <span class="string">""" 生成大素数 """</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num = random.randrange(<span class="number">2</span> ** (size - <span class="number">1</span>), <span class="number">2</span> ** size)</span><br><span class="line">        <span class="keyword">if</span> isPrime(num):</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(generateLargePrime())</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(end - start)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NEU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> python </tag>
            
            <tag> NEU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学实践（一）</title>
      <link href="/2020/07/16/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/07/16/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>前前后后忙了近半个月，总算是把实践弄完了<br>记录一下密码学的基础知识吧</p><a id="more"></a><h1 id="单表替代密码"><a href="#单表替代密码" class="headerlink" title="单表替代密码"></a>单表替代密码</h1><h2 id="Caesar-Cipher"><a href="#Caesar-Cipher" class="headerlink" title="Caesar Cipher"></a>Caesar Cipher</h2><p>恺撒密码（英语：Caesar cipher），或称恺撒加密、恺撒变换、变换加密，是一种最简单且最广为人知的加密技术。它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, key)</span>:</span></span><br><span class="line">    re_str = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> plaintext:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i.isalpha():</span><br><span class="line">            re_str += i  <span class="comment"># 判断是否为字母，若不是则不需要操作</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="string">"A"</span> <span class="keyword">if</span> i.isupper() <span class="keyword">else</span> <span class="string">"a"</span>  </span><br><span class="line">            <span class="comment"># 根据当前字母是否大小写，确定其ASCII码范围值</span></span><br><span class="line">            re_str += chr((ord(i) - ord(a) + key) % <span class="number">26</span> + ord(a))</span><br><span class="line">    <span class="keyword">return</span> re_str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(ciphertext, <span class="number">26</span> - key)</span><br></pre></td></tr></table></figure><h2 id="Keyword-Cipher"><a href="#Keyword-Cipher" class="headerlink" title="Keyword Cipher"></a>Keyword Cipher</h2><p>关键字（词）密码，给定一个关键字key（假定），得到关键字列表：“keyabcdfghijlmnopqrstuvwxz”，然后对照明文，按照“a”-&gt;“k”，“b”-&gt;“e”，…，来进行替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKeywordList</span><span class="params">(keyword)</span>:</span></span><br><span class="line">    <span class="string">""" 主要用于生成密码表 """</span></span><br><span class="line">    normalList = <span class="string">''</span></span><br><span class="line">    keyword = keyword.lower()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">        normalList = normalList + chr(ord(<span class="string">'a'</span>) + i)</span><br><span class="line">    toCombine = keyword + normalList</span><br><span class="line">    combineList = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> toCombine:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> combineList:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            combineList = combineList + i</span><br><span class="line">    <span class="keyword">if</span> len(combineList) == <span class="number">26</span>:</span><br><span class="line">        <span class="keyword">return</span> combineList</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replaceChar</span><span class="params">(keywordList, inputChar)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对于大写字母，就先转换为小写然后继续调用改函数</span></span><br><span class="line"><span class="string">    转换至小写字母后，得到该字母在字母表上的位置然后使用keywordList替换即可</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> inputChar.isupper():</span><br><span class="line">        <span class="keyword">return</span> replaceChar(keywordList, inputChar.lower()).upper()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> keywordList[ord(inputChar) - <span class="number">97</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dereplaceChar</span><span class="params">(keywordList, inputChar)</span>:</span></span><br><span class="line">    <span class="string">""" 解密函数就是加密函数的逆过程 """</span></span><br><span class="line">    <span class="keyword">if</span> inputChar.isupper():</span><br><span class="line">        <span class="keyword">return</span> dereplaceChar(keywordList, inputChar.lower()).upper()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> chr(keywordList.find(inputChar) + <span class="number">97</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(toReplace, keyword)</span>:</span></span><br><span class="line">    <span class="string">""" keyword 字符替换法 替换函数 """</span></span><br><span class="line">    afterReplace = <span class="string">''</span></span><br><span class="line">    keywordList = getKeywordList(keyword)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> toReplace:</span><br><span class="line">        <span class="keyword">if</span> i.isalpha():</span><br><span class="line">            afterReplace = afterReplace + replaceChar(keywordList, i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            afterReplace = afterReplace + i</span><br><span class="line">    <span class="keyword">return</span> afterReplace</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(toReplace, keyword)</span>:</span></span><br><span class="line">    <span class="string">""" keyword 字符替换法  反替换函数 """</span></span><br><span class="line">    afterReplace = <span class="string">''</span></span><br><span class="line">    keywordList = getKeywordList(keyword)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> toReplace:</span><br><span class="line">        <span class="keyword">if</span> i.isalpha():</span><br><span class="line">            afterReplace = afterReplace + dereplaceChar(keywordList, i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            afterReplace = afterReplace + i</span><br><span class="line">    <span class="keyword">return</span> afterReplace</span><br></pre></td></tr></table></figure><h2 id="Affine-Cipher"><a href="#Affine-Cipher" class="headerlink" title="Affine Cipher"></a>Affine Cipher</h2><p>仿射密码为单表加密的一种，字母系统中所有字母都藉一简单数学方程加密，对应至数值，或转回字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">""" 求a，b的最大公因数，仿射密码中，a与b互素 """</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a, b = b, a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        temp = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">""" 扩展欧几里得算法，用于之后求逆元 """</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> g, x - (b // a) * y, y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">    <span class="string">""" 求逆元 """</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, a, b)</span>:</span></span><br><span class="line">    <span class="string">""" 加密函数：E(x) = (ax + b)(mod m) m为编码系统中的字母数，一般为26 """</span></span><br><span class="line">    cipher = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> plaintext:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i.isalpha():</span><br><span class="line">            cipher += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = <span class="string">"A"</span> <span class="keyword">if</span> i.isupper() <span class="keyword">else</span> <span class="string">"a"</span></span><br><span class="line">            cipher += chr((a * (ord(i) - ord(n)) + b) % <span class="number">26</span> + ord(n))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, a, b)</span>:</span></span><br><span class="line">    <span class="string">""" 解密函数：D(x) = a^-1 * (x - b)(mod m) a^-1:a在m上的乘法逆元 """</span></span><br><span class="line">    a1 = modinv(a, <span class="number">26</span>)</span><br><span class="line">    plain = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ciphertext:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i.isalpha():</span><br><span class="line">            plain += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = <span class="string">"A"</span> <span class="keyword">if</span> i.isupper() <span class="keyword">else</span> <span class="string">"a"</span></span><br><span class="line">            plain += chr((a1 * (ord(i) - ord(n) - b)) % <span class="number">26</span> + ord(n))</span><br></pre></td></tr></table></figure><h2 id="Multiliteral-Cipher"><a href="#Multiliteral-Cipher" class="headerlink" title="Multiliteral Cipher"></a>Multiliteral Cipher</h2><p>与棋盘密码相识，不过棋盘密码中是将字母替换为数字，而在Multiliteral中，是替换为字母<br>给出一个长度为5的单词，然后将26个字母排成5*5的矩阵，其中i和j合在一起，对照着明文的每一个字母，找到字母在矩阵中的位置，将其替换为key中相应位置的两个字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removePunctuation</span><span class="params">(text)</span>:</span></span><br><span class="line">    filter = <span class="string">'[^A-Z]'</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(filter, <span class="string">''</span>, text.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 主要算法，获取加密字母在二维字母表中的行列值，其密文为与之对应的key中位置的相应字母 """</span></span><br><span class="line">    plain = removePunctuation(plaintext).replace(<span class="string">'J'</span>, <span class="string">'I'</span>)</span><br><span class="line">    key = key.upper()</span><br><span class="line">    cipher = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plain)):</span><br><span class="line">        row = int(keywordList.index(plain[i]) / <span class="number">5</span>)</span><br><span class="line">        cipher += key[row]</span><br><span class="line">        col = keywordList.index(plain[i]) % <span class="number">5</span></span><br><span class="line">        cipher += key[col]</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 主要算法：对密文两两遍历，找到相应字母在key中的位置，分别对应明文在字母表中的行列 """</span></span><br><span class="line">    cipher = removePunctuation(ciphertext).replace(<span class="string">'J'</span>, <span class="string">'I'</span>)</span><br><span class="line">    key = key.upper()</span><br><span class="line">    plain = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(cipher), <span class="number">2</span>):</span><br><span class="line">        row = key.index(cipher[i])</span><br><span class="line">        col = key.index(cipher[i + <span class="number">1</span>])</span><br><span class="line">        num = row * <span class="number">5</span> + col</span><br><span class="line">        plain += keywordList[num]</span><br><span class="line">    <span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><h1 id="多表替代密码"><a href="#多表替代密码" class="headerlink" title="多表替代密码"></a>多表替代密码</h1><h1 id="Vigenere-Cipher"><a href="#Vigenere-Cipher" class="headerlink" title="Vigenere Cipher"></a>Vigenere Cipher</h1><p>密码学经典加解密之一<br>直接<a href="https://baike.baidu.com/item/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/4905472?fr=aladdin" target="_blank" rel="noopener">百科</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, key)</span>:</span></span><br><span class="line">    <span class="string">""" vigenere密码就相当于Caesar密码，不同的是vigenere的密钥key是可变的几个值，然后使用这几个值进行加解密 """</span></span><br><span class="line">    cipher = <span class="string">''</span></span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 设置一个计数器，当遇到非字母的时候加一，便于之后确定key</span></span><br><span class="line">    key = key.lower()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plaintext)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> plaintext[i].isalpha():</span><br><span class="line">            cipher += plaintext[i]</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="string">"A"</span> <span class="keyword">if</span> plaintext[i].isupper() <span class="keyword">else</span> <span class="string">"a"</span></span><br><span class="line">            offset = ord(key[(i - count) % len(key)]) - ord(<span class="string">'a'</span>)  <span class="comment"># offset:相当于Caesar中的key</span></span><br><span class="line">            cipher += chr((ord(plaintext[i]) - ord(a) + offset) % <span class="number">26</span> + ord(a))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 解密算法原理同Caesar """</span></span><br><span class="line">    plain = <span class="string">''</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    key = key.lower()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ciphertext[i].isalpha():</span><br><span class="line">            plain += ciphertext[i]</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="string">"A"</span> <span class="keyword">if</span> ciphertext[i].isupper() <span class="keyword">else</span> <span class="string">"a"</span></span><br><span class="line">            offset = ord(key[(i - count) % len(key)]) - ord(<span class="string">'a'</span>)</span><br><span class="line">            plain += chr((ord(ciphertext[i]) - ord(a) - offset) % <span class="number">26</span> + ord(a))</span><br><span class="line">    <span class="keyword">return</span> plain</span><br></pre></td></tr></table></figure><h2 id="Autokey-Cipher"><a href="#Autokey-Cipher" class="headerlink" title="Autokey Cipher"></a>Autokey Cipher</h2><p>Autokey就是Vigenere的一种变种，在Vigenere加密中，密钥是循环使用的，这样就有了被爆破的可能，在Autokey中，有两种形式，一种是Autokey Plaintext，就是将明文直接添加在key之后作为密钥进行加密，另一种是Autokey Ciphertext，是先用key加密得到的Cipher片段作为key循环进行加密<br>Plaintext与Ciphertext的加解密正好是相反的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removePunctuation</span><span class="params">(text, filter=<span class="string">'[^A-Z]'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(filter, <span class="string">''</span>, text.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryptPlain</span><span class="params">(text, keyword)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对于Autokey Plaintext，本质上和vigenere相同，相当于将明文附加在key后面作为密钥来进行vigenere加密</span></span><br><span class="line"><span class="string">    但明文中的空格、非字母字符会影响加密，所以在Autokey的加解密中将除去所有非字母字符，并将全部字母大写</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    text = removePunctuation(text)</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    key = keyword.upper()</span><br><span class="line">    <span class="keyword">for</span> (i, c) <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        <span class="keyword">if</span> i &lt; len(key):  <span class="comment"># 明文前i项，使用key进行vigenere加密</span></span><br><span class="line">            offset = ord(key[i]) - <span class="number">65</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 从明文的i+1项，使用明文作为密钥进行vigenere加密</span></span><br><span class="line">            offset = ord(text[i - len(key)]) - <span class="number">65</span></span><br><span class="line">        res += chr((ord(c) - <span class="number">65</span> + offset) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptPlain</span><span class="params">(text, keyword)</span>:</span></span><br><span class="line">    <span class="string">""" 因为Autokey本质上是vigenere加密，所以在解密上唯一不同的点就是“-offset” """</span></span><br><span class="line">    text = removePunctuation(text)</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    key = keyword.upper()</span><br><span class="line">    <span class="keyword">for</span> (i, c) <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        <span class="keyword">if</span> i &lt; len(key):</span><br><span class="line">            offset = ord(key[i]) - <span class="number">65</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            offset = ord(res[i - len(key)]) - <span class="number">65</span></span><br><span class="line">        res += chr((ord(c) - <span class="number">65</span> - offset) % <span class="number">26</span> + <span class="number">65</span>)  <span class="comment"># 不同点</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryptCipher</span><span class="params">(text, keyword)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Autokey Cipher的加解密与Autokey Plain的解加密相对应</span></span><br><span class="line"><span class="string">    但在求offset上不同，此处使用的与plain相反</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    text = removePunctuation(text)</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    key = keyword.upper()</span><br><span class="line">    <span class="keyword">for</span> (i, c) <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        <span class="keyword">if</span> i &lt; len(key):</span><br><span class="line">            offset = ord(key[i]) - <span class="number">65</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            offset = ord(res[i - len(key)]) - <span class="number">65</span></span><br><span class="line">        res += chr((ord(c) - <span class="number">65</span> + offset) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptCipher</span><span class="params">(text, keyword)</span>:</span></span><br><span class="line">    text = removePunctuation(text)</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    key = keyword.upper()</span><br><span class="line">    <span class="keyword">for</span> (i, c) <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        <span class="keyword">if</span> i &lt; len(key):</span><br><span class="line">            offset = ord(key[i]) - <span class="number">65</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            offset = ord(text[i - len(key)]) - <span class="number">65</span></span><br><span class="line">        res += chr((ord(c) - <span class="number">65</span> - offset) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="多图替代密码"><a href="#多图替代密码" class="headerlink" title="多图替代密码"></a>多图替代密码</h1><h2 id="Playfair-Cipher"><a href="#Playfair-Cipher" class="headerlink" title="Playfair Cipher"></a>Playfair Cipher</h2><p>密码详情见<a href="https://baike.baidu.com/item/playfair%E5%AF%86%E7%A0%81/8999814?fr=aladdin" target="_blank" rel="noopener">百科</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKeywordList</span><span class="params">(keyword)</span>:</span></span><br><span class="line">    <span class="string">""" 获取密钥矩阵 """</span></span><br><span class="line">    keyword = keyword.upper().replace(<span class="string">'J'</span>, <span class="string">'I'</span>)</span><br><span class="line">    normalList = <span class="string">'ABCDEFGHIKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">    toCombine = keyword + normalList</span><br><span class="line">    combineList = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> toCombine:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> combineList:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            combineList = combineList + i</span><br><span class="line">    <span class="keyword">return</span> combineList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removePunctuation</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="string">""" 将文本中非英文字母去掉，并将字母转为大写 """</span></span><br><span class="line">    filter = <span class="string">'[^A-Z]'</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(filter, <span class="string">''</span>, text.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryptPart</span><span class="params">(keywordList, a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    加密主要算法：</span></span><br><span class="line"><span class="string">    首先获取得到的两个字母在矩阵中的行列值</span></span><br><span class="line"><span class="string">    然后对两个坐标分别进行判断：</span></span><br><span class="line"><span class="string">    1.位于同一行，返回两个字母在矩阵中右边的字母</span></span><br><span class="line"><span class="string">    2.位于同一列，返回两个字母在矩阵中下边的字母</span></span><br><span class="line"><span class="string">    3.位于对角，返回相应对角字母</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    arow, acol = int(keywordList.index(a) / <span class="number">5</span>), keywordList.index(a) % <span class="number">5</span></span><br><span class="line">    brow, bcol = int(keywordList.index(b) / <span class="number">5</span>), keywordList.index(b) % <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> arow == brow:</span><br><span class="line">        <span class="keyword">return</span> keywordList[arow * <span class="number">5</span> + (acol + <span class="number">1</span>) % <span class="number">5</span>] + keywordList[brow * <span class="number">5</span> + (bcol + <span class="number">1</span>) % <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">elif</span> acol == bcol:</span><br><span class="line">        <span class="keyword">return</span> keywordList[((arow + <span class="number">1</span>) % <span class="number">5</span>) * <span class="number">5</span> + acol] + keywordList[((brow + <span class="number">1</span>) % <span class="number">5</span>) * <span class="number">5</span> + bcol]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> keywordList[arow * <span class="number">5</span> + bcol] + keywordList[brow * <span class="number">5</span> + acol]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptPart</span><span class="params">(keywordList, a, b)</span>:</span></span><br><span class="line">    <span class="string">""" 加密算法的逆运算 """</span></span><br><span class="line">    arow, acol = int(keywordList.index(a) / <span class="number">5</span>), keywordList.index(a) % <span class="number">5</span></span><br><span class="line">    brow, bcol = int(keywordList.index(b) / <span class="number">5</span>), keywordList.index(b) % <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> arow == brow:</span><br><span class="line">        <span class="keyword">return</span> keywordList[arow * <span class="number">5</span> + (acol - <span class="number">1</span>) % <span class="number">5</span>] + keywordList[brow * <span class="number">5</span> + (bcol - <span class="number">1</span>) % <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">elif</span> acol == bcol:</span><br><span class="line">        <span class="keyword">return</span> keywordList[((arow - <span class="number">1</span>) % <span class="number">5</span>) * <span class="number">5</span> + acol] + keywordList[((brow - <span class="number">1</span>) % <span class="number">5</span>) * <span class="number">5</span> + bcol]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> keywordList[arow * <span class="number">5</span> + bcol] + keywordList[brow * <span class="number">5</span> + acol]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对获取的明文进行基本的处理</span></span><br><span class="line"><span class="string">    转为大写</span></span><br><span class="line"><span class="string">    除去非字母</span></span><br><span class="line"><span class="string">    如果遇到两个相同的字母，在中间加'Q'</span></span><br><span class="line"><span class="string">    文本长度不足2的倍数需要加'X'补齐</span></span><br><span class="line"><span class="string">    然后以两两字母进行加密</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    plaintext = removePunctuation(plaintext).replace(<span class="string">'J'</span>, <span class="string">'I'</span>)</span><br><span class="line">    plain = <span class="string">""</span></span><br><span class="line">    plain += plaintext[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(plaintext)):</span><br><span class="line">        <span class="keyword">if</span> plain[len(plain) - <span class="number">1</span>] == plaintext[i]:</span><br><span class="line">            plain += <span class="string">'Q'</span></span><br><span class="line">        plain += plaintext[i]</span><br><span class="line">    keywordList = getKeywordList(key)</span><br><span class="line">    <span class="keyword">if</span> len(plain) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        plain += <span class="string">'X'</span></span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">0</span>, len(plain), <span class="number">2</span>):</span><br><span class="line">        ret += encryptPart(keywordList, plain[c], plain[c + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 同加密 """</span></span><br><span class="line">    cipher = removePunctuation(ciphertext).replace(<span class="string">'J'</span>, <span class="string">'I'</span>)</span><br><span class="line">    keywordList = getKeywordList(key)</span><br><span class="line">    <span class="keyword">if</span> len(cipher) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        cipher += <span class="string">'X'</span></span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">0</span>, len(cipher), <span class="number">2</span>):</span><br><span class="line">        ret += decryptPart(keywordList, cipher[c], cipher[c + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h1 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h1><h2 id="Permutation-cipher"><a href="#Permutation-cipher" class="headerlink" title="Permutation cipher"></a>Permutation cipher</h2><p>给定一个顺序，例：1,4,5,3,2，然后将明文按照此顺序输出即可，例：abcde fghij -&gt; adecb fijhg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removePunctuation</span><span class="params">(text, filter=<span class="string">'[^A-Z]'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(filter, <span class="string">''</span>, text.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverseKey</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="string">""" 通过key获取解密时所需要的key的逆解 """</span></span><br><span class="line">    inverse = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(min(key), max(key) + <span class="number">1</span>):</span><br><span class="line">        inverse.append(key.index(i) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> inverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    便于在之后对文本的遍历，首先将文本补齐，使其长度为密钥长度的整数倍</span></span><br><span class="line"><span class="string">    然后开始分组遍历，通过对range参数的设置，使每次加密都对密钥长度的明密文进行加解密</span></span><br><span class="line"><span class="string">    然后对组内明密文进行加解密</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    plaintext = removePunctuation(plaintext)</span><br><span class="line">    cipher = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(plaintext) % len(key) * <span class="number">-1</span> % len(key)):</span><br><span class="line">        plaintext += <span class="string">"X"</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(plaintext), len(key)):  <span class="comment"># 步长设置为密钥长度</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> [a - <span class="number">1</span> <span class="keyword">for</span> a <span class="keyword">in</span> key]:</span><br><span class="line">            cipher += plaintext[i + j]</span><br><span class="line">        cipher += <span class="string">" "</span></span><br><span class="line">    <span class="keyword">return</span> cipher[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 得到逆密钥，然后和加密一样 """</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(ciphertext, inverseKey(key))</span><br></pre></td></tr></table></figure><h2 id="Column-permutation-cipher"><a href="#Column-permutation-cipher" class="headerlink" title="Column permutation cipher"></a>Column permutation cipher</h2><p>原理与置换密码相似，将明文按照key的长度排成矩阵，然后根据key中字母在字母表中的先后顺序输出每一列，即为密文<br>Double Translation Cipher即为两次列置换加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removePunctuation</span><span class="params">(text, filter=<span class="string">'[^A-Z]'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(filter, <span class="string">''</span>, text.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortind</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="string">""" 通过key获取加密顺序 """</span></span><br><span class="line">    t1 = [(key[i], i) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line">    t2 = [(k[<span class="number">1</span>], i) <span class="keyword">for</span> i, k <span class="keyword">in</span> enumerate(sorted(t1))]</span><br><span class="line">    <span class="keyword">return</span> [q[<span class="number">1</span>] <span class="keyword">for</span> q <span class="keyword">in</span> sorted(t2)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unsortind</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="string">""" 通过key获取解密顺序 """</span></span><br><span class="line">    t1 = [(key[i], i) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line">    <span class="keyword">return</span> [q[<span class="number">1</span>] <span class="keyword">for</span> q <span class="keyword">in</span> sorted(t1)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plaintext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 加密函数 """</span></span><br><span class="line">    plain = removePunctuation(plaintext)</span><br><span class="line">    cipher = <span class="string">''</span></span><br><span class="line">    ind = sortind(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key)):</span><br><span class="line">        cipher += plain[ind.index(i)::len(key)]</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ciphertext, key)</span>:</span></span><br><span class="line">    <span class="string">""" 解密函数 """</span></span><br><span class="line">    cipher = removePunctuation(ciphertext)</span><br><span class="line">    plain = [<span class="string">'_'</span>] * len(cipher)</span><br><span class="line">    l, m = len(cipher), len(key)</span><br><span class="line">    ind = unsortind(key)</span><br><span class="line">    upto = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key)):</span><br><span class="line">        collen = int(l / m)</span><br><span class="line">        <span class="keyword">if</span> ind[i] &lt; l % m:</span><br><span class="line">            collen += <span class="number">1</span></span><br><span class="line">        plain[ind[i]::m] = cipher[upto:upto + collen]</span><br><span class="line">        upto += collen</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(plain)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NEU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> python </tag>
            
            <tag> NEU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap相关命令</title>
      <link href="/2020/06/06/sqlmap%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/06/06/sqlmap%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>sqlmap版本：1.4.6</p><p>借鉴了网上几位大佬的总结，自己也加了一些</p><a id="more"></a><h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><pre><code>-h,--help  显示基本帮助信息并退出-hh        显示高级帮助信息并退出--version  显示程序版本信息并退出-v VERBOSE 信息级别: 0-6 （缺省1）其值具体含义：“0”只显示python错误以及严重的信息；“1”同时显示基本信息和警告信息（默认）；“2”同时显示debug信息；“3”同时显示注入的payload；“4”同时显示HTTP请求；“5”同时显示HTTP响应头；“6”同时显示HTTP响应页面；如果想看到sqlmap发送的测试payload最好的等级就是3。</code></pre><h1 id="获取目标"><a href="#获取目标" class="headerlink" title="获取目标"></a>获取目标</h1><p>-d：直接连接数据库 （-d “mysql://user:passward@地址:端口/数据库名称”）</p><ol><li><p>get方法<br>-u：指定url  （?id=1）<br>-l：从Brupsuite proxy或WebScarab proxy中读取http请求日志文件<br>-x：从sitemap.xml站点地图文件中读取目标探测<br>-m：从多行文本格式文件读取多个目标，对多个目标进行探测<br>-r：丛文本文件中读取http请求作为SQL注入探测的目标<br>-c：从配置文件sqlmap.conf中读取目标探测<br>-g：google搜索出来的结果 （-g “inurl:\”.php?id=1\””）\”只是将双引号内的”特殊字符进行转义</p></li><li><p>post方法<br>-data：-u “<a href="http://xxx.xxx.xxx" target="_blank" rel="noopener">http://xxx.xxx.xxx</a>“ —data=”post请求抓取的源代码” </p></li></ol><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><h2 id="HTTP数据"><a href="#HTTP数据" class="headerlink" title="HTTP数据"></a>HTTP数据</h2><ol><li><p>数据段： -data<br>get/post都适用<br>对于post还可以使用链接并将post抓取的源代码用—data，并输入抓取的源代码<br>sqlmap -u <a href="http://&quot;链接" target="_blank" rel="noopener">http://&quot;链接</a>“ —data=”post请求抓取的源代码” —dbs，常用于post请求。</p></li><li><p>cookie头<br>—cookie：-u “url” —cookie=”…” —level 2（需要注意的是，当level默认为1的时候，默认不扫cookie的内容，必须是level大于等于2才能扫cookie里的内容）</p></li><li><p>user-agent头<br>—user-agent http：头会携带一个值，就是user-agent，表示访问的浏览器的信息，我们可以手动指定伪造一个<br>—random-agent：随机产生user-agent头，也不是随机，是从/usr/share/sqlmap/txt/user-agents.txt，收集了大量的浏览器信息<br>sqlmap -u “…” —cookie=”…” —level 3  —random-agent —dbs —user-agent=”aaaaa”<br>lever&gt;=3才会去检查user-agent头是否存在注入漏洞</p></li><li><p>host头<br>—host  level=5，host存在注入的漏洞情况比较少，同时也不建议把级别设置成5<br>—host=”aaaaaa”，每次HOST请求时都会变成一串a</p></li><li><p>referer头<br>—referer  level&gt;=3，才会对referer头进行检测<br>—referer=”aaaa”</p></li><li><p>额外定义的heade头<br>—HEADER 设置单一的http头<br>—headers 每个头单独一行，可以使用\n来换行（名称区分大小写）<br>—headers=”…\n…”</p></li></ol><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><ol><li><p>HTTP协议认证<br>Basic    基本身份验证<br>Digest   摘要式身份认证<br>NTLM     NTLM身份验证（windows）<br>sqlmap -u “…”  —auth-type Basic —auth-cred “user:pass” ，指明验证类型为Basic，并说明用户名和密码</p></li><li><p>http(s)代理<br>主动请求时会被记录，被发现屏蔽，这时我们需要个代理，就用到了—proxy参数了。<br>—proxy=”<a href="http://127.0.0.1:8087" target="_blank" rel="noopener">http://127.0.0.1:8087</a>“<br>—proxy-cred=”name:pass”  需做身份验证时<br>—proxy-file 用于设置文件中的多条代理<br>—ignore-proxy 忽略系统级代理，通常用于扫描本地网络目标（若在操作系统设置了代理，后续的一切工作都经过代理）</p></li><li><p>基于客户端证书（比较少见，在以前的网银中比较常见）<br>当Web服务器需要客户端证书进行身份验证时，需要提供两个文件:key_file，cert_file。<br>key_file是格式为PEM文件，包含着你的私钥，cert_file是格式为PEM的连接文件。<br>—auth-cert (name:password)<br>—auth-file（HTTP authentication PEM cert/private key file）<br>如：—auth-file=”ca.PEM”,含有私钥的PEM格式证书文件或PEM格式的证书链文件</p></li><li><p>设置忽略401<br>—ignore-401参数用来忽略为验证错误<br>如果想测试返回HTTP错误401（未经授权）的站点，在忽略它并不提供适当凭证的情况下继续测试</p></li></ol><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><ol><li><p>HTTP请求延迟<br>发送量过大的话，会引起waf等发现，<br>—delay  每次http(s)请求之间延迟时间，浮点数，单位为妙，默认无延迟，输入此参数，你会发现每个请求都会延迟3秒，当然数据库还是可以爆出来的</p></li><li><p>设置请求超时时间<br>若客户端一直未收到服务器返回的值，就一直等着，所以需要个请求超时时间<br>—timeout  请求超时时间，浮点数，默认30秒</p></li><li><p>设定重试时间<br>—retries  http(s)连接超时重传次数，默认3次</p></li><li><p>设定随记改变的参数值<br>—randomize 长度、类型与原始值保持一致的前提下，值当每次请求随记取值的参数名<br>sqlmap -u “<a href="http://1.1.1.1/a.php?id=1" target="_blank" rel="noopener">http://1.1.1.1/a.php?id=1</a>“ —randomize=”id”</p></li><li><p>利用正则表达式过滤目标网址<br>—scope  使用brup抓取的日志文件，但日志文件比较大，你只想检测日志中的一个站点或者某一个特征是否存在sql注入<br>过滤日志内容，通过正则表达式筛选扫描对象<br>sqlmap -l burp.lpg —scope=”(www)?.baidu.(com|net|org)”<br>sqlmap -l burp.lpg —scope=”(19)?.168.20.(1|10|100)”</p></li><li><p>关掉URL参数值编码<br>—skip-urlencode 默认get方法会对传输内容进行编码，某些web服务器不遵循RFC标准编码，使用原始字符提交数据</p></li><li><p>避免过多的错误请求被屏蔽<br>有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求，这样在sqlmap进行探测或者注入的时候可能造成错误请求而触发这个策略，导致以后无法进行。常见情况是在检测盲注阶段会产生大量失败请求，当产生大量错误请求后，服务器端可能因此销毁session<br>—safe-url：提供一个安全不错误的连接，每隔一段时间都会去访问一下。<br>—safe-post：POST数据发送到安全URL<br>—safe-req：从文件加载安全的HTTP请求<br>—safe-freq：提供一个安全不错误的连接，每次测试请求之后都会再访问一边安全连接。</p></li></ol><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>-o：打开所有优化开关</p><ol><li><p>持久连接<br>—keep-alive：使用http(s)长连接，性能好，与—proxy参数不兼容</p></li><li><p>检索没有body响应的内容<br>—null-conection：只获取响应页面的大小值，而非页面具体内容能够<br>通常用于盲注判断真/假，降低网络带宽消耗<br>与—text-only参数不兼容（基于页面内容的比较判断真/假）</p></li><li><p>多线程<br>—threads=THREADS：并发HTTP请求的最大数量（默认1）<br>盲注时每个线程获取一个字符（7此请求），获取完成后线程结束<br>默认为1，建议不要超过10，否则可能影响站点可用性<br>与—predict-output参数不兼容</p></li><li><p>预测输出<br>—predict-output<br>根据检测方法，比对返回值和统计表内容，不断缩小检测范围，提高检测效率<br>版本名、用户名、密码、Prervileges、role、数据库名称、表名、列名<br>与—threads参数不兼容<br>统计表路径：/usr/share/sqlmap/txt/common-outputs.txt</p></li></ol><h1 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h1><ol><li><p>指定测试的参数<br>-p<br>sqlmap默认测试所有的GET和POST参数，当—level的值大于等于2的时候也会测试HTTP Cookie头的值，当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。但是也可以手动用-p参数设置想要测试的参数。例如： -p “id,user-anget”<br>指定扫描的参数，也可指定变量名称，使—level失效</p></li><li><p>排除测试的参数<br>—skip /  —skip-static<br>当你使用—level的值很大但是有个别参数不想测试的时候可以使用—skip参数。排错指定的扫描参数，不指定的默认会对全部扫描，然后根据level级别对http头扫描<br>—skip-static可忽略非动态的参数<br>如：—level=5 —skip=”id,uesr-agent”</p></li><li><p>忽略探测具体的参数<br>—param-exclude<br>例：—param-exclude=”token|session”，可忽略对包含token或session的参数进行探测</p></li><li><p>指定数据库<br>—dbms 数据库管理系统名称[版本号]<br>默认情况系sqlmap会自动的探测web应用后端的数据库是什么，但是如果已经知道的目标是什么数据库了，可以使用—dbms指定数据库节省时间了,提高工作效率了<br>例：—dbms mysql 5.0<br>—dbms-cres = username:password<br>设置DBMS认证</p></li><li><p>指定数据库服务器系统<br>—os<br>默认情况下sqlmap会自动的探测数据库服务器系统，支持的系统有：Linux、Windows</p></li><li><p>强制设置无效值替换<br>—invalid-bignum  /  —invalid-logical  /  —invalid-string<br>默认情况下sqlmap使用负值使参数失效 id=1 -&gt; id=-1<br>bignum使用大数使参数值失效 id=999999</p></li><li><p>关闭负载转换机制<br>—no-cast<br>在检索结果是，sqlmap使用一种机制，在这种纸质中，所有的条目都被转换为字符串类型，并在NULL值的情况下用空格字符替换。这样做是为了防止出现任何错误状态（例如，将空格与字符串连接起来），并简化数据检索过程本身。尽管如此，还是有报告的案例（例如MySQL DBMS旧版本）由于数据检索本身的问题（没有返回值）需要关闭这种机制。</p></li><li><p>关闭字符转义机制<br>—no-escape<br>关闭使用char替换字符串功能<br>出于混淆和避免出错的目的，payload中用单引号界定字符串时，sqlmap使用char()编码逃避的方法替换字符串<br>select ‘foo’ -&gt;select char(102)+char(111)+char(111)</p></li><li><p>自定义注入负载位置<br>—prefix /  —sufix<br>在某些情况下，只有当用户提供要附加早注入负载的特定位置时，易受攻击的参数才可被利用。当用户一斤知道查询语法并希望通过直接提供注入有效负载的前缀和后缀来检测和利用SQL注入式使用<br>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="string">"SELECT * FROM users WHERE id = ('.$_GET['id'].') LIMIT 0,1"</span>;</span><br><span class="line"><span class="comment">// python sqlmap.py -u "http://xxx.xxx.xxx/?id=1" -p id --prefix "')" --suffix "AND ('abc'='abc"</span></span><br><span class="line">$query = <span class="string">"SELECT * FROM users WHERE id = ('1') &lt;PAYLOAD&gt; AND ('abc'='abc') LIMIT 0,1"</span>;</span><br></pre></td></tr></table></figure></li><li><p>tamper脚本<br>—tamper<br>sqlmap本身不会回校发送的有效负载，出来单引号之间的字符串被CHAR()类似的表示形式所取代之外。<br>sqlmap通过tamper脚本来绕过WAF等防御措施，可以在tamper文件夹下找到所有sqlmap自带的tamper脚本。<br>例：—tamper “xxx.py,xx.py”</p></li></ol><h1 id="自定义检测参数"><a href="#自定义检测参数" class="headerlink" title="自定义检测参数"></a>自定义检测参数</h1><ol><li><p>探测等级<br>—level<br>此选项需要制定要执行的测试等级参数，共有5个等级。在执行有限数量的测试时，默认值为1,1~5探测复杂度逐步提升。<br>sqlmap使用的payload可以在/usr/share/sqlmap/xml/payloads中看到，也可以根据相应的格式添加自己的payload。<br>这个参数不仅影响使用哪些payload同时也会影响测试的注入点，GET和POST的数据都会测试，HTTP Cookie在level为2的时候就会测试，HTTP User-Agent/Referer头在level为3的时候就会测试。</p></li><li><p>风险等级<br>—risk<br>共有3个风险等级，默认是1会测试大部分的测试语句，2会增加基于时间的测试语句，3会增加OR语句的SQL注入测试。<br>在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。<br>测试的语句同样可以在xml/payloads.xml中找到，你也可以自行添加payload。</p></li><li><p>页面比较参数<br>—string：指定包含字符串，查询为True<br>—not-string：指定包含字符串，查询为False<br>—regexp：指定通过正则表达式匹配字符串，查询为True<br>—code：指定匹配HTTP状态响应码，查询为True<br>默认情况下，通过比较注入的请求页面内容和未注入的原始页面内容，可以区分真查询和假查询。这种观念并不总是起作用，是因为在每次刷新页面内容的变化有时甚至没有注入。例如当页面有一个计数器，一个动态广告横幅或者其他HTML的一部分呈现动态和可能改变时间不仅因此用户的输入。为了绕过这个限制，sqlmap努力识别响应体的这些片段并进行相应处理。</p></li><li><p>内容比较参数<br>—text-only：设置页面内容中包含文本<br>—titles：设置页面title中包含文本<br>前提需要知道如何区分查询的真与假，根据返回字符串内容不同。<br>例：—text-only=”Welcome !!!”<br>—titles=”Login”</p></li></ol><h1 id="注入技术"><a href="#注入技术" class="headerlink" title="注入技术"></a>注入技术</h1><ol><li><p>注入类型<br>—technique<br>检测存在sql注入的技术类型，默认会测试所有的方式。<br>B:Boolean-based-blind（布尔型型注入）<br>E:Error-based（报错型注入）<br>U:Union query-based（联合注入）<br>S:Starked queries（堆叠注入）<br>T:Time-based blind（基于时间的盲注）<br>Q:Inline queries（内联查询注入）</p></li><li><p>设定盲注的延迟时间<br>—time-sec<br>基于时间的注入检测响应延迟时间（默认5秒）</p></li><li><p>设定UNION查询字段数<br>—union-cols<br>默认联合查询1-10列，随-level增加最多支持50列<br>例如：—union-cols 6-9，测试6-9个字段数</p></li><li><p>设定UNION查询使用的字符<br>—union-char<br>联合查询默认使用NULL，极端情况下NUL可能失败，此时可以手动指定数值<br>例如：—union-char 123</p></li><li><p>设定UNION查询表<br>—union-from<br>在某些情况下，sqlmap需要设定union查询SQL注入的具体数据表才可以得到数据</p></li><li><p>设置DNS攻击<br>—dns-domain “dns服务器”<br>针对目标网络很有可能有外部流量进行限制，或者设置WAF<br>通过设置DNS流量来突破限制，需要用户自身具有一个开放53端口的DNS服务器，通过DNS流量来获得web应用程序中的数据内容。</p></li><li><p>二次注入<br>—second-url<br>有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。<br>—second-url后面跟一个判断页面的URL地址。</p></li><li><p>识别指纹<br>-f，—fingerprint<br>-b，—banner<br>数据库管理系统指纹信息<br>大多数的数据库系统都有一个函数可以返回数据库的版本号，通常这个函数是version()或者变量@@version这主要取决与是什么数据库。</p></li></ol><h1 id="枚举信息"><a href="#枚举信息" class="headerlink" title="枚举信息"></a>枚举信息</h1><pre><code>-a, --all           获取所有信息-b, --banner        获取数据库管理系统的标识--current-user      获取数据库管理系统当前用户--current-db        获取数据库管理系统当前数据库--hostname          获取数据库服务器的主机名称--is-dba            检测DBMS当前用户是否DBA--users             枚举数据库管理系统用户--passwords         枚举数据库管理系统用户密码哈希--privileges        枚举数据库管理系统用户的权限--roles             枚举数据库管理系统用户的角色--dbs               枚举数据库管理系统数据库--tables            枚举的DBMS数据库中的表--columns           枚举DBMS数据库表列--schema            枚举数据库架构--count             检索表的项目数--dump              转储数据库表项--dump-all          转储数据库所有表项--search            搜索列（S），表（S）和/或数据库名称（S）--comments          获取DBMS注释--statements        检索在DBMS上运行的SQL语句-D DB               要进行枚举的指定数据库名-T TBL              枚举DBMS数据库表-C COL              枚举DBMS数据库表列-X EXCLUDECOL       不枚举的DBMS数据库标识符-U USER             枚举DBMS用户--exclude-sysdbs    枚举表时排除系统数据库--pivot-column=P..  Pivot columnname--where=DUMPWHERE   Use WHEREcondition while table dumping--start=LIMITSTART  获取第一个查询输出数据位置--stop=LIMITSTOP    获取最后查询的输出数据--first=FIRSTCHAR   第一个查询输出字的字符获取--last=LASTCHAR     最后查询的输出字字符获取--sql-query=QUERY   要执行的SQL语句--sql-shell         提示交互式SQL的shell--sql-file=SQLFILE  要执行的SQL文件</code></pre><h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><p>对于用sql注入无法爆出的数据库内容，可以使用暴力破解尝试着爆出数据库的内容。<br>1.暴力破解表名<br>—common-tables<br>mysql&lt;5.0,没有information schema库<br>mysql&lt;=5.0，但无权限读取information schema库<br>微软的access数据集，默认无权读取mysysobjects库</p><p>2.暴力破解列名<br>—common-columns<br>（access系统表无列信息）<br>暴力破解的表在txt/common-tables.txt文件中，列名在txt/common-columns.txt中。可以自行添加。</p><p>3.暴力破解文件<br>—common-files</p><h1 id="文件系统访问"><a href="#文件系统访问" class="headerlink" title="文件系统访问"></a>文件系统访问</h1><p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。读取的文件可以是文本也可以是二进制文件。</p><p>读取系统文件<br>—file-read<br>—file-read=”文件绝对路径”</p><p>把文件上传到数据库服务器中<br>—file-write<br>—file-write=”123.txt” —file-dest “文件绝对路径”</p><pre><code>--file-read=RFILE   从后端的数据库管理系统文件系统读取文件--file-write=WFILE  编辑后端的数据库管理系统文件系统上的本地文件--file-dest=DFILE   后端的数据库管理系统写入文件的绝对路径</code></pre><h1 id="操作系统访问"><a href="#操作系统访问" class="headerlink" title="操作系统访问"></a>操作系统访问</h1><p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。<br>在MySQL、PostgreSQL，sqlmap上传一个二进制库，包含用户自定义的函数，sys_exec()和sys_eval()。<br>那么他创建的这两个函数可以执行系统命令。在Microsoft SQL Server，sqlmap将会使用xp_cmdshell存储过程，如果被禁（在Microsoft SQL Server 2005及以上版本默认止），sqlmap会重新启用它，如果不存在，会自动创建。<br>—os-shell<br>—os-cmd<br>用—os-shell参数也可以模拟一个真实的shell，可以输入你想执行的命令。<br>当不能执行多语句的时候（比如php或者asp的后端数据库为MySQL时），仍然可能使用INTO OUTFILE写进可写目录，来创建一个web后门。支持的语言：<br>1、ASP 2、ASP.NET 3、JSP 4、PHP</p><pre><code>--os-cmd=OSCMD      执行操作系统命令（OSCMD）--os-shell          交互式的操作系统的shell--os-pwn            获取一个OOB shell，meterpreter或VNC--os-smbrelay       一键获取一个OOBshell，meterpreter或VNC--os-bof            存储过程缓冲区溢出利用--priv-esc          数据库进程用户权限提升--msf-path=MSFPATH  MetasploitFramework本地的安装路径--tmp-path=TMPPATH  远程临时文件目录的绝对路径</code></pre><h1 id="Windows注册表访问"><a href="#Windows注册表访问" class="headerlink" title="Windows注册表访问"></a>Windows注册表访问</h1><pre><code>--reg-read          读一个Windows注册表项值--reg-add           写一个Windows注册表项值数据--reg-del           删除Windows注册表键值--reg-key=REGKEY    Windows注册表键--reg-value=REGVAL  Windows注册表项值--reg-data=REGDATA  Windows注册表键值数据--reg-type=REGTYPE  Windows注册表项值类型</code></pre><h1 id="常规参数-amp-其它"><a href="#常规参数-amp-其它" class="headerlink" title="常规参数&amp;其它"></a>常规参数&amp;其它</h1><ol><li><p>-s  sqlmap会话文件保<br>sqlmap对每一个目标都会在output路径下自动生成一个SQLite文件，如果用户想指定读取的文件路径，就可以用这个参数。</p></li><li><p>-t 记录流量文件保存位置<br>这个参数需要跟一个文本文件，sqlmap会把HTTP(S)请求与响应的日志保存到那里。</p></li><li><p>—batch<br>用此参数，不需要用户输入，将会使用sqlmap提示的默认值一直运行下去。</p></li><li><p>强制使用字符编码<br>—charset 强制字符编码<br>—charset=GBK / —charset=”0123456789abcde…”<br>不使用sqlmap自动识别的（如HTTP头中的Content-Type）字符编码，强制指定</p></li><li><p>爬行网站URL<br>sqlmap可以收集潜在的可能存在漏洞的连接，后面跟的参数是爬行的深度。<br>—crawl  从起始位置爬站深度<br>—batch—crawl=3</p></li><li><p>刷新session文件<br>—flush-session  清空session<br>如果不想用之前缓存这个目标的session文件，可以使用这个参数。 会清空之前的session，重新测试该目标。</p></li><li><p>自动获取form表单测试<br>—forms<br>如果你想对一个页面的form表单中的参数测试，可以使用-r参数读取请求文件，或者通过—data参数测试。 但是当使用—forms参数时，sqlmap会自动从-u中的url获取页面中的表单进行测试。</p></li><li><p>忽略在会话文件中存储的查询结果<br>-fresh-quesries 忽略session查询结果</p></li><li><p>使用DBMS的hex函数<br>—hex  dump非ASCII字符内容时，将其编码为16进制形式，收到后解码还原</p></li><li><p>分析和现实数据库内建报错信息<br>—parse-errors  将会分析和现实数据库内建报错信息</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-s SESSIONFILE      保存和恢复检索会话文件的所有数据</span><br><span class="line">-t TRAFFICFILE      记录所有HTTP流量到一个文本文件中</span><br><span class="line">-z MNEMONICS        使用短记忆法 (e.g.&quot;flu,bat,ban,tec&#x3D;EU&quot;)</span><br><span class="line">--alert&#x3D;ALERT       发现SQL注入时，运行主机操作系统命令</span><br><span class="line">--answers&#x3D;ANSWERS   设置预定义的答案(e.g. &quot;quit&#x3D;N,follow&#x3D;N&quot;)</span><br><span class="line">--base64&#x3D;BASE64P..  包含Base64编码数据的参数</span><br><span class="line">--batch             从不询问用户输入，使用所有默认配置。</span><br><span class="line">--beep              发现sql注入时，发出蜂鸣声。</span><br><span class="line">--binary-fields&#x3D;..  结果字段具有二进制值(e.g.&quot;digest&quot;)</span><br><span class="line">--charset&#x3D;CHARSET   强制字符编码</span><br><span class="line">--check-internet    Check Internet connection before assessing the target</span><br><span class="line">--cleanup           清除sqlmap注入时在DBMS中产生的udf与表。</span><br><span class="line">--crawl&#x3D;CRAWLDEPTH  从目标URL爬行网站</span><br><span class="line">--crawl-exclude&#x3D;..  正则表达式从爬行页中排除</span><br><span class="line">--csv-del&#x3D;CSVDEL    限定使用CSV输出 (default&quot;,&quot;)</span><br><span class="line">--dependencies      Check formissing (non-core) sqlmap dependencies</span><br><span class="line">--disable-coloring  默认彩色输出，禁掉彩色输出。</span><br><span class="line">--dump-format&#x3D;DU..  转储数据格式(CSV(default), HTML or SQLITE)</span><br><span class="line">--eta               显示每个输出的预计到达时间</span><br><span class="line">--flush-session     刷新当前目标的会话文件</span><br><span class="line">--forms             解析和测试目标URL表单</span><br><span class="line">--fresh-queries     忽略在会话文件中存储的查询结果</span><br><span class="line">--gpage&#x3D;GOOGLEPAGE  使用前100个URL地址作为注入测试，结合此选项，可以指定页面的URL测试</span><br><span class="line">--hex               使用DBMS Hex函数数据检索</span><br><span class="line">--identify-waf      进行WAF&#x2F;IPS&#x2F;IDS保护测试，目前大约支持30种产品的识别</span><br><span class="line">--mobile            有时服务端只接收移动端的访问，此时可以设定一个手机的User-Agent来模仿手机登陆。</span><br><span class="line">--offline           Work inoffline mode (only use session data)</span><br><span class="line">--output-dir&#x3D;OUT..  自定义输出目录路径</span><br><span class="line">--parse-errors      解析和显示响应数据库错误信息</span><br><span class="line">--purge-output      从输出目录安全删除所有内容，有时需要删除结果文件，而不被恢复，可以使用此参数，原有文件将会被随机的一些文件覆盖。</span><br><span class="line">--save&#x3D;SAVECONFIG   保存选项到INI配置文件</span><br><span class="line">--scope&#x3D;SCOPE       从提供的代理日志中使用正则表达式过滤目标</span><br><span class="line">--skip-waf          跳过WAF／IPS &#x2F; IDS启发式检测保护</span><br><span class="line">--smart             进行积极的启发式测试，快速判断为注入的报错点进行注入</span><br><span class="line">--sqlmap-shell      互动提示一个sqlmapshell</span><br><span class="line">--test-filter&#x3D;TE..  选择测试的有效载荷和&#x2F;或标题(e.g. ROW)</span><br><span class="line">--test-skip&#x3D;TEST..  跳过试验载荷和&#x2F;或标题(e.g.BENCHMARK)</span><br><span class="line">--tmp-dir&#x3D;TMPDIR    用于存储临时文件的本地目录</span><br><span class="line">--update            更新sqlmap</span><br><span class="line">--web-root&#x3D;WEBROOT  Web服务器的文档根目录(e.g.&quot;&#x2F;var&#x2F;www&quot;)</span><br><span class="line">--wizard            新手用户简单的向导使用，可以一步一步教你如何输入针对目标注入</span><br></pre></td></tr></table></figure><h1 id="tamper中部分脚本"><a href="#tamper中部分脚本" class="headerlink" title="tamper中部分脚本"></a>tamper中部分脚本</h1><div class="table-container"><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">apostrophemask.py</td><td style="text-align:left">用utf8代替引号</td></tr><tr><td style="text-align:left">apostrophenullencode.py</td><td style="text-align:left">绕过过滤双引号，替换字符和双引号。</td></tr><tr><td style="text-align:left">appendnullbyte.py</td><td style="text-align:left">在有效负荷结束位置加载零字节字符编码</td></tr><tr><td style="text-align:left">base64encode.py</td><td style="text-align:left">用base64编码替换</td></tr><tr><td style="text-align:left">between.py</td><td style="text-align:left">用between替换大于号（&gt;）</td></tr><tr><td style="text-align:left">bluecoat.py</td><td style="text-align:left">代替空格字符后与一个有效的随机空白字符的SQL语句,然后替换=为like</td></tr><tr><td style="text-align:left">chardoubleencode.py</td><td style="text-align:left">双url编码(不处理以编码的)</td></tr><tr><td style="text-align:left">charencode.py</td><td style="text-align:left">url编码</td></tr><tr><td style="text-align:left">charunicodeencode.py</td><td style="text-align:left">字符串 unicode 编码</td></tr><tr><td style="text-align:left">equaltolike.py</td><td style="text-align:left">like代替等号</td></tr><tr><td style="text-align:left">greatest.py</td><td style="text-align:left">绕过过滤’&gt;’ ,用GREATEST替换大于号。</td></tr><tr><td style="text-align:left">halfversionedmorekeywords.py</td><td style="text-align:left">关键字前加注释</td></tr><tr><td style="text-align:left">halfversionedmorekeywords.py</td><td style="text-align:left">当数据库为mysql时绕过防火墙，每个关键字之前添加mysql版本评论</td></tr><tr><td style="text-align:left">ifnull2ifisnull.py</td><td style="text-align:left">绕过对IFNULL过滤,替换类似’IFNULL(A,B)’为’IF(ISNULL(A), B, A)’</td></tr><tr><td style="text-align:left">modsecurityversioned.py</td><td style="text-align:left">过滤空格，包含完整的查询版本注释</td></tr><tr><td style="text-align:left">multiplespaces.py</td><td style="text-align:left">围绕SQL关键字添加多个空格</td></tr><tr><td style="text-align:left">randomcase.py</td><td style="text-align:left">随机大小写</td></tr><tr><td style="text-align:left">randomcomments.py</td><td style="text-align:left">用/**/分割sql关键字</td></tr><tr><td style="text-align:left">sp_password.py</td><td style="text-align:left">追加sp_password’从DBMS日志的自动模糊处理的有效载荷的末尾</td></tr><tr><td style="text-align:left">space2comment.py</td><td style="text-align:left">用/**/代替空格</td></tr><tr><td style="text-align:left">space2dash.py</td><td style="text-align:left">绕过过滤‘=’ 替换空格字符（”），（’–‘）后跟一个破折号注释，一个随机字符串和一个新行（’n’）</td></tr><tr><td style="text-align:left">space2hash.py</td><td style="text-align:left">空格替换为#号,随机字符串以及换行符</td></tr><tr><td style="text-align:left">space2morehash.py</td><td style="text-align:left">空格替换为 #号 以及更多随机字符串 换行符</td></tr><tr><td style="text-align:left">space2mssqlblank.py</td><td style="text-align:left">(mssql)空格替换为其它空符号</td></tr><tr><td style="text-align:left">space2mssqlhash.py</td><td style="text-align:left">替换空格</td></tr><tr><td style="text-align:left">space2mysqlblank.py</td><td style="text-align:left">空格替换其它空白符号(mysql)</td></tr><tr><td style="text-align:left">space2mysqldash.py</td><td style="text-align:left">替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）</td></tr><tr><td style="text-align:left">space2plus.py</td><td style="text-align:left">用+替换空格</td></tr><tr><td style="text-align:left">space2randomblank.py</td><td style="text-align:left">代替空格字符（“”）从一个随机的空白字符可选字符的有效集</td></tr><tr><td style="text-align:left">space2comment.py</td><td style="text-align:left">替换空格字符串(‘‘) 使用注释‘/**/’</td></tr><tr><td style="text-align:left">unionalltounion.py</td><td style="text-align:left">替换UNION ALLSELECT UNION SELECT</td></tr><tr><td style="text-align:left">unmagicquotes.py</td><td style="text-align:left">宽字符绕过 GPCaddslashes</td></tr><tr><td style="text-align:left">versionedmorekeywords.py</td><td style="text-align:left">注释绕过</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入学习笔记</title>
      <link href="/2020/06/05/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/06/05/SQL%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>开始web学习</p><a id="more"></a><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>在MySQL 5.0以上的版本中，为了方便管理，默认定义了information_schema数据库，用来存储数据库元信息。其中具有schemata（数据库名）、tables（表名）、columns（列名或字段名）。</p><p>在schemata表中，schema_name字段用来存储数据库名。</p><p>在tables表中，table_schema和table_name分别用来存储数据库名和表名。</p><p>在columns表中，tanle_schema（数据库名）、table_name（表名）、column_name（字段名）</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释符：在MySQL中常见的注释符表达式：#，—空格，/**/</p><p>内联注释：<code>/*! SQL语句 */</code> 只有MySQL可以识别，常用于绕过WAF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 例：</span><br><span class="line">select * from user where id &#x3D; id;</span><br><span class="line"># 使用内联注释注入：</span><br><span class="line">select * from user where id &#x3D; -1 &#x2F;*!union*&#x2F; &#x2F;*!select*&#x2F; 1,2,3,4</span><br></pre></td></tr></table></figure><h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><p>一般用户登陆所用的SQL语句为：<code>SELECT * FROM user WHERE username= &#39;admin&#39; and password=&#39;passwd&#39;</code>，若对用户输入的用户名和密码无处理，则可构造万能密码绕过验证‘ or 1 #，SQL语句就变为：<code>SELECT * FROM user WHERE username= &#39;&#39; or 1 # and password=&#39; &#39;</code>，#号后注释。</p><h1 id="SQL注入分类及判断"><a href="#SQL注入分类及判断" class="headerlink" title="SQL注入分类及判断"></a>SQL注入分类及判断</h1><ol><li>数据类型<ul><li>数字型</li><li>字符型</li><li>搜索型</li></ul></li><li>提交方式<ul><li>GET型</li><li>POST型</li><li>Cookie型</li><li>HTTP请求头注入</li></ul></li><li>执行效果<ul><li>报错注入</li><li>联合查询注入</li><li>堆叠查询注入</li><li>盲注<ul><li>基于bool</li><li>基于时间</li></ul></li></ul></li></ol><p>数字型注入查询语句为：<code>SELECT * FROM user WHERE id=1</code>,搜索型注入为查询语句为：<code>SELECT * FROM user WHERE search like &#39;%1%&#39;</code>。</p><p>在URL或者表单中输入0 or 1，如果可以查到数据，说明是数字型注入，如果输入0’or 1#，查到数据说明是字符型注入，方法不唯一。</p><h1 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h1><p>使用联合查询时，必须使得两张表的表结构一致<br>构造联合注入语句：<code>1&#39; order by 1#</code> or <code>1&#39; order by 2#</code><br>构造联合查询语句：<code>&#39;union select 1,2#</code><br>以上构造可查询表的列数</p><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>Blind SQL是注入攻击的其中一种，向数据库发送true或false这样的问题，并根据应用程序返回的信息判断结果。这种攻击的出现是应为应用程序配置为只显示常规错误，但并没有解决SQL注入存在的代码问题</p><p>当攻击者利用SQL注入漏洞进行攻击时，有时候web应用程序会显示，后端数据库执行SQL查询返回的错误信息。盲注与常规注入很接近，不同的是数据库返回数据的检索方式。若书库没有输出数据到web页面，攻击者会询问一系列的true或false问题，强制从数据库获取数据</p><h2 id="基于bool的盲注"><a href="#基于bool的盲注" class="headerlink" title="基于bool的盲注"></a>基于bool的盲注</h2><p>通常使用函数length()，返回长度；ascii()，返回ASCII值；substr(string,a,b)，返回string以a开头，长度为b的字符串；count()，返回数量。</p><p>在存在注入的注入点参数后使用if判断正确或错误的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select length(database());</span><br><span class="line">select substr(database(),1,1);</span><br><span class="line">select ascii(substr(database(),1,1));</span><br><span class="line">select ascii(substr(database(),1,1)) &gt; N;</span><br><span class="line">select ascii(substr(database(),1,1)) &#x3D; N;</span><br><span class="line">select ascii(substr(database(),1,1)) &lt; N;</span><br></pre></td></tr></table></figure><h2 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h2><p>除了需使用以上函数之外，一般还使用延时函数sleep()，if(c,a,b)等等。</p><p>在存在注入的注入点参数后使用<code>if(length(database())&gt;5,sleep(5),null)</code>，如果执行的页面响应时间大于5秒，那么存在注入，并且对相应的SQL语句执行。</p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>报错注入形式上是两个嵌套的查询，即select…(select…)，里面的select被称为子查询，他执行的顺序也是先执行子查询，然后再执行外面的select，双注入主要涉及到了几个sql函数：</p><ul><li>rand()随机函数，返回0~1之间的某个值</li><li>floor(a)取整函数，返回小于等于a，且最接近a的一个整数</li><li>count()聚合函数，也成计数函数，返回查询对象的总数</li><li>group by clause分组函数，按照查询结果分组</li></ul><p>通过报错来显示具体的信息</p><p>查询的时候如果使用rand()的话，该值会被计算多次。在使用group by的时候，floor(rand(0)*2)会被执行一次，如果续表不存在记录，插入虚表的时候会再被执行一次。在一次多记录的查询过程中 floor(rand(0)*2)的值是定值，为011011</p><p>select count(*) from table group by floor(rand(0)*2);</p><p>例：sqli Less5</p><p>获取数据库</p><p><code>http://127.0.0.1/sqli/Less-5/?id=0&#39; union select 1,2,3 from (select count(*),concat((select concat(version(),0x3a,0x3a,database(),0x3a,0x3a,user(),0x3a)limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a --+</code></p><p>获取表名</p><p><code>http://127.0.0.1/sqli/Less-5/?id=0&#39; union select 1,2,3 from (select count(*),concat((select concat(group_concat(table_name),0x3a,0x3a)from information_schema.tables where table_schema=database() limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a --+</code></p><p>获取用户信息</p><p><code>http://127.0.0.1/sqli/Less-5/?id=0&#39; union select 1,2,3 from (select count(*),concat((select concat(username,0x3a,0x3a,password,0x3a,0x3a) from security.users limit 1,1),floor(rand(0)*2))x from information_schema.tables group by x)a --+</code></p><h1 id="SQL注入绕过"><a href="#SQL注入绕过" class="headerlink" title="SQL注入绕过"></a>SQL注入绕过</h1><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><p>如果出现中设置了过滤关键字，但是过滤过程中并没有对关键字组成进行深入分析过滤，导致只是对整体进行过滤</p><p>可以通过修改关键字内字母大小写来绕过过滤措施。例：AnD 1=1</p><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><p>如果在程序设置出现关键字之后替换为空，那么SQL注入攻击也不会发生。对于这样的过滤策略可以使用双写绕过。因为在过滤过程中只进行了一次替换，就是将关键字替换为空</p><p>例：过滤了union 只要发现union时，无论大小写都会被替换为空</p><p>ununionion，UnunionIon</p><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>可以利用网路中的url在线编码，绕过SQL注入的过滤机制</p><h2 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h2><p>在Mysql中内联注释中的内容可以被当做SQL语句执行</p><h1 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h1><ol><li><p>判断是否存在SQL注入</p><p><code>1&#39; or 1 --+</code></p></li><li><p>利用order by判断字段数</p><p><code>1&#39; order by 1 --+</code> 或 <code>1&#39; order by 2 --+</code></p></li><li><p>利用union select联合查询，获取表名</p><p><code>1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code></p></li><li><p>利用union select联合查询，获取字段名</p><p><code>1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; --+</code></p></li></ol><p>sqlmap：</p><ol><li><p>sqlmap -u “<a href="http://www.xx.com?id=x" target="_blank" rel="noopener">http://www.xx.com?id=x</a>“    （查询是否存在注入点）</p></li><li><p>—dbs（检测站点包含哪些数据库）</p></li><li><p>—current-db（获取当前的数据库名）</p></li><li><p>-D “db_name” —tables（获取指定数据库中的表名 -D后接指定的数据库名称）</p></li><li><p>-D “db_name” -T “table_name” —columns（获取数据库表中的字段）</p></li><li><p>-D “db_name” -T “table_name” -C “columns_name” —dump (获取字段的数据内容)</p></li></ol><h1 id="HTTP头中的SQL注入"><a href="#HTTP头中的SQL注入" class="headerlink" title="HTTP头中的SQL注入"></a>HTTP头中的SQL注入</h1><h2 id="HTTP头中的注入介绍"><a href="#HTTP头中的注入介绍" class="headerlink" title="HTTP头中的注入介绍"></a>HTTP头中的注入介绍</h2><p>在安全意识越来越重视的情况下，很多网站都在防止漏洞的发生。例如在SQL注入中，用户提交的参数都会被代码中的某些措施进行过滤。</p><p>但是对于HTTP头中提交的内容很有可能就没有进行过滤。例如HTTP头中 User-Agent、Referer、Cookies等。</p><h2 id="HTTP-User-Agent注入"><a href="#HTTP-User-Agent注入" class="headerlink" title="HTTP  User-Agent注入"></a>HTTP  User-Agent注入</h2><p>sqli Less18</p><p>源文档语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$insert=<span class="string">"INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)"</span>;</span><br></pre></td></tr></table></figure><p>payload:<br>updatexml(xml document,xpath_string,new_value):<br>第一个参数：XML文档对象名称。<br>第二个参数：XPath字符串。<br>第三个参数：替换查找到的符合条件的数据。<br><code>&#39; and updatexml(1,concat(0x7e,(select @@version),0x7e),1) or &#39;1&#39;=&#39;1</code></p><h1 id="绕过去除特定字符的SQL注入"><a href="#绕过去除特定字符的SQL注入" class="headerlink" title="绕过去除特定字符的SQL注入"></a>绕过去除特定字符的SQL注入</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = <span class="number">-1</span> [, int &amp;$count ]] )</span><br></pre></td></tr></table></figure><p>搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换。</p><p>参数说明：</p><ul><li>$pattern: 要搜索的模式，可以是字符串或一个字符串数组。</li><li>$replacement: 用于替换的字符串或字符串数组。</li><li>$subject: 要搜索替换的目标字符串或字符串数组。</li><li>$limit: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li><li>$count: 可选，为替换执行的次数。</li></ul><h2 id="去除注释符"><a href="#去除注释符" class="headerlink" title="去除注释符"></a>去除注释符</h2><p>代码示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">"/#/"</span>;</span><br><span class="line">$reg1 = <span class="string">"/--/"</span>;</span><br><span class="line">$replace = <span class="string">""</span>;</span><br><span class="line">$id = preg_replace($reg, $replace, $id);</span><br><span class="line">$id = preg_replace($reg1, $replace, $id);</span><br></pre></td></tr></table></figure><p>绕过策略：</p><p>利用<code>or &#39;1&#39; = &#39;1</code>闭合后面的单引号</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli/Less-23/?id=-1' union select 1,database(),'3</span><br></pre></td></tr></table></figure><h2 id="去除and和or"><a href="#去除and和or" class="headerlink" title="去除and和or"></a>去除and和or</h2><p>代码示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = preg_replace(<span class="string">'/or/'</span>, <span class="string">""</span>, $id);</span><br><span class="line">$id = preg_replace(<span class="string">'/and/'</span>, <span class="string">""</span>, $id);</span><br></pre></td></tr></table></figure><p>绕过策略：</p><ol><li>大小写变形，代码中大小写不敏感，都会被剔除</li><li>在这两个敏感词汇中添加注释，例如：a/**/nd 双写绕过oorr</li><li>利用符号替代：and—&amp;&amp;，or—||</li></ol><h2 id="去除空格"><a href="#去除空格" class="headerlink" title="去除空格"></a>去除空格</h2><p>代码示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$id= preg_replace(<span class="string">'/or/i'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/and/i'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\*]/'</span>,<span class="string">""</span>, $id);<span class="comment">//strip out /*</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[--]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out --</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[#]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out #</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\s]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out spaces</span></span><br><span class="line">$id= preg_replace(<span class="string">'/[\/\\\\]/'</span>,<span class="string">""</span>, $id);<span class="comment">//Strip out slashes</span></span><br><span class="line"><span class="keyword">return</span> $id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绕过策略：</p><p>编码：hex，urlencode</p><p>空格URL编码 %20、%09 TAB键（水平）、%0a 新建一行、%0c 新的一页、%0d return功能、%0b TAB键（垂直）</p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>GBK编码占用两字节<br>ASCII编码占用一字节<br>PHP中编码为GBK，函数执行添加的是ASCII编码，MySQL默认字符集是GBK等宽字节字符集。</p><p>%DF’：会被PHP当中的addslashes函数转义成为“%DF\\’”，“\\”既URL里的“%5C”，那么也就是说，“%DF”会被转成“%DF%5C%27”，若网站的字符集是GBK，MySQL使用的编码也是GBK的话，就会认为“%DF%5C%27”是一个宽字符。</p><p>代码分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string= addslashes($string);    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql_query(<span class="string">"SET NAMES gbk"</span>);</span><br></pre></td></tr></table></figure><p>sqli Less33</p><p>payload: <code>id=%df&#39; --+</code></p><p>sqlmap: <code>sqlmap -u &quot;url?id=1%df%27&quot; --search --level 3 --risk 1</code></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>最长是通的宽字节注入是利用%df，其实只要第一个ascii吗大于128就可以了，比如ascii吗为129的，将129（十进制）转换为十六进制，为0x81，然后在十六进制前加%即可，即为%81</p><p>GBK首字节对应0x81-0xFE，尾字节对应0x40-0xFE（除0x7F）</p><p>代码分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string = preg_replace(<span class="string">'/'</span>. preg_quote(<span class="string">'\\'</span>) .<span class="string">'/'</span>, <span class="string">"\\\\\\"</span>, $string);          <span class="comment">//escape any backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\'/i'</span>, <span class="string">'\\\''</span>, $string);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\"/'</span>, <span class="string">"\\\""</span>, $string);                                <span class="comment">//escape double quote with a backslash   </span></span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql_query(<span class="string">"SET NAMES gbk"</span>);</span><br></pre></td></tr></table></figure><p>sqli Less32</p><p>payload: <code>id=%bf&#39; --+</code></p><p>sqlmap: <code>sqlmap -u &quot;url?id=1&quot; --tamper=unmagicquotes.py</code></p><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p>sqli Less24</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = mysql_real_escape_string($_POST[<span class="string">"login_user"</span>]);</span><br><span class="line">$password = mysql_real_escape_string($_POST[<span class="string">"login_password"</span>]);</span><br><span class="line">$sql = <span class="string">"SELECT * FROM users WHERE username='$username' and password='$password'"</span>;</span><br></pre></td></tr></table></figure><p>通过部分源代码得知，此处使用了<code>mysql_real_escape_string</code>进行转义，无法SQL注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注册</span><br><span class="line">Username:admin&#39; -- -</span><br><span class="line">Password:123</span><br></pre></td></tr></table></figure><p>然后登录发现可以更改密码，因为更改密码的操作是</p><p><code>$sql = &quot;UPDATE users SET PASSWORD=&#39;$pass&#39; where username=&#39;$username&#39; and password=&#39;$curr_pass&#39; &quot;;</code></p><p>假设更改的密码是123456</p><p>此处执行的SQL语句为</p><p><code>$sql = &quot;UPDATE users SET PASSWORD=&#39;123456&#39; where username=&#39;admin&#39; -- &#39; and password=&#39;$curr_pass&#39; &quot;;</code></p><p>即将admin的密码进行了更改</p><h1 id="MySQL注入常用函数"><a href="#MySQL注入常用函数" class="headerlink" title="MySQL注入常用函数"></a>MySQL注入常用函数</h1><div class="table-container"><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">函数功能</th></tr></thead><tbody><tr><td style="text-align:center">system_user()</td><td style="text-align:center">系统用户名</td></tr><tr><td style="text-align:center">user()</td><td style="text-align:center">用户名</td></tr><tr><td style="text-align:center">current_user()</td><td style="text-align:center">当前用户名</td></tr><tr><td style="text-align:center">session_user()</td><td style="text-align:center">连接数据库的用户名</td></tr><tr><td style="text-align:center">database()</td><td style="text-align:center">数据库名</td></tr><tr><td style="text-align:center">version()</td><td style="text-align:center">数据库版本</td></tr><tr><td style="text-align:center">@@datadir</td><td style="text-align:center">数据库路径</td></tr><tr><td style="text-align:center">@@basedir</td><td style="text-align:center">数据库安装路径</td></tr><tr><td style="text-align:center">@@version_compile_os</td><td style="text-align:center">操作系统</td></tr><tr><td style="text-align:center">count()</td><td style="text-align:center">返回执行结果数量········</td></tr><tr><td style="text-align:center">concat()</td><td style="text-align:center">没有分隔符的连接字符串</td></tr><tr><td style="text-align:center">concat_ws()</td><td style="text-align:center">含有分隔符的连接字符串</td></tr><tr><td style="text-align:center">group_concat</td><td style="text-align:center">连接一个组的所有字符串，并以逗号分隔每一条数据</td></tr><tr><td style="text-align:center">load_file()</td><td style="text-align:center">读取本地文件</td></tr><tr><td style="text-align:center">into outfile</td><td style="text-align:center">写文件</td></tr><tr><td style="text-align:center">ascii()</td><td style="text-align:center">字符串的ASCII代码值</td></tr><tr><td style="text-align:center">ord()</td><td style="text-align:center">返回字符串第一个字符的ACSCII值</td></tr><tr><td style="text-align:center">mid()</td><td style="text-align:center">返回一个字符串的一部分</td></tr><tr><td style="text-align:center">substr()</td><td style="text-align:center">返回一个字符串的一部分</td></tr><tr><td style="text-align:center">length()</td><td style="text-align:center">返回字符串的长度</td></tr><tr><td style="text-align:center">left()</td><td style="text-align:center">返回字符串的最左边几个字符</td></tr><tr><td style="text-align:center">floor</td><td style="text-align:center">返回小于或等于x的最大整数</td></tr><tr><td style="text-align:center">rand</td><td style="text-align:center">返回0和1之间的随机数</td></tr><tr><td style="text-align:center">extractvalue()</td><td style="text-align:center">第一个参数：XML document是String格式，为XML文档对象的名称，文中为Doc 第二个参数：XPath string（Xpath格式的字符串） 作用：从目标XML中返回包含所查询值的字符串</td></tr><tr><td style="text-align:center">updatexml()</td><td style="text-align:center">第一个参数：XML document是String格式，为XML文档对象的名称，文中为Doc 第二个参数：XPath string（Xpath格式的字符串） 第三个参数：new value String格式，替换查找到的符合条件的数据 作用：改变文档中符合条件的节点的值</td></tr><tr><td style="text-align:center">sleep()</td><td style="text-align:center">让此语句运行N秒钟</td></tr><tr><td style="text-align:center">if()</td><td style="text-align:center">SELECT IF(1&gt;2.2.3) -&gt; 3 类似三目运算</td></tr><tr><td style="text-align:center">char()</td><td style="text-align:center">返回整数ASCII代码字符组成的字符串</td></tr><tr><td style="text-align:center">STRCMP()</td><td style="text-align:center">比较字符串内容</td></tr><tr><td style="text-align:center">IFNULL()</td><td style="text-align:center">假如参数1不为NUL,则返回值为参数1,否则其返回值为参数2</td></tr><tr><td style="text-align:center">exp()</td><td style="text-align:center">返回e的x次方</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF2020wp</title>
      <link href="/2020/06/03/GKCTF2020wp/"/>
      <url>/2020/06/03/GKCTF2020wp/</url>
      
        <content type="html"><![CDATA[<p>题目还算比较简单吧</p><a id="more"></a><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Pokémon"><a href="#Pokémon" class="headerlink" title="Pokémon"></a>Pokémon</h2><p>找个GBA模拟器玩游戏，到103街道，发现flag</p><p><code>flag{PokEmon_14_CutE}</code></p><h2 id="code-obfuscation"><a href="#code-obfuscation" class="headerlink" title="code obfuscation"></a>code obfuscation</h2><p>给了张二维码，扫描不了，直接手动复原：<a href="https://merricx.github.io/qrazybox/" target="_blank" rel="noopener">https://merricx.github.io/qrazybox/</a></p><p>扫描得到<code>base(gkctf)</code></p><p>然后base家族一个一个的试，最后发现是base58：CfjxaPF</p><p>解出一张图片和一段杂乱的js代码,<a href="https://tool.lu/js/" target="_blank" rel="noopener">https://tool.lu/js/</a>美化并解密</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> a b c d e f g h i j k l m n o p q r s t u v w x y z <span class="keyword">do</span> <span class="built_in">eval</span> An = <span class="string">"n"</span></span><br><span class="line">done</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z <span class="keyword">do</span> <span class="built_in">eval</span> An = <span class="string">"n"</span></span><br><span class="line">done num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> a b c d e f g h i j <span class="keyword">do</span> <span class="built_in">eval</span> Bn = <span class="string">"n"</span></span><br><span class="line">num = $((num + <span class="number">1</span>))</span><br><span class="line">done alert("Bk=' ';Bm='"';Bn='#';Bs='(';Bt=')';By='.';Cb='';Cc='&lt;';Ce='&gt;';Cl='_';Cn='&#123;';Cp='&#125;';Da='0';Db='1';Dc='2';Dd='3';De='4';Df='5';Dg='6';Dh='7';Di='8';Dj='9';")</span><br></pre></td></tr></table></figure><p>python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">s = <span class="string">"$Bn$Ai$An$Ac$Al$Au$Ad$Ae$Bk$Cc$As$At$Ad$Ai$Ao$By$Ah$Ce$Ai$An$At$Bk$Am$Aa$Ai$An$Bs$Bt$Cn$Ap$Ar$Ai$An$At$Bs$Bm$Aw$Dd$Al$Ac$Da$Am$Ae$Cl$De$Ao$Cl$Dj$Ak$Ac$At$Df$Bm$Bt$Cb$Ar$Ae$At$Au$Ar$An$Bk$Da$Cb$Cp"</span></span><br><span class="line">ll = s.split(<span class="string">'$'</span>)</span><br><span class="line">list1 = [<span class="string">'Bk'</span>,<span class="string">'Bm'</span>,<span class="string">'Bn'</span>,<span class="string">'Bs'</span>,<span class="string">'Bt'</span>,<span class="string">'By'</span>,<span class="string">'Cb'</span>,<span class="string">'Cc'</span>,<span class="string">'Ce'</span>,<span class="string">'Cl'</span>,<span class="string">'Cn'</span>,<span class="string">'Cp'</span>,<span class="string">'Da'</span>,<span class="string">'Db'</span>,<span class="string">'Dc'</span>,<span class="string">'Dd'</span>,<span class="string">'De'</span>,<span class="string">'Df'</span>,<span class="string">'Dg'</span>,<span class="string">'Dh'</span>,<span class="string">'Di'</span>,<span class="string">'Dj'</span>]</span><br><span class="line">list2 = [<span class="string">' '</span>,<span class="string">'"'</span>,<span class="string">'#'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'.'</span>,<span class="string">''</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>,<span class="string">'_'</span>,<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>]</span><br><span class="line">list3 = []</span><br><span class="line">list4 = []</span><br><span class="line">s = string.ascii_lowercase</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">list3.append(<span class="string">'A%s'</span>%i)</span><br><span class="line">list4.append(i)</span><br><span class="line"><span class="comment">#print(list3,'\n',list4)</span></span><br><span class="line"></span><br><span class="line">t = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(ll)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(list1)):</span><br><span class="line"><span class="keyword">if</span> ll[i]==list1[j]:</span><br><span class="line">t += list2[j]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>,len(list3)):</span><br><span class="line"><span class="keyword">if</span> ll[i]==list3[k]:</span><br><span class="line">t +=list4[k]</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;int main()&#123;print(&quot;w3lc0me_4o_9kct5&quot;)return 0&#125;</span><br></pre></td></tr></table></figure><p>flag:<code>flag{w3lc0me_4o_9kct5}</code></p><h2 id="Harley-Quinn"><a href="#Harley-Quinn" class="headerlink" title="Harley Quinn"></a>Harley Quinn</h2><p>将音频后面的电话音剪出来，使用dtmf2num.exe识别</p><p>识别出：222833344477773338866</p><p>九键密码：ctfisfun</p><p>然后下载FreeFileCamouflage</p><p>输入密码和图片地址得到flag</p><p><code>flag{Pudd1n!!_y0u_F1nd_m3!}</code></p><h2 id="Sail-a-boat-down-the-river"><a href="#Sail-a-boat-down-the-river" class="headerlink" title="Sail a boat down the river"></a>Sail a boat down the river</h2><p>下载得到一个视频和加密的rar文件</p><p>视频打开中间一段明显有个二维码，扫描是一个网盘链接</p><p><code>https://pan.baidu.com/s/1tygt0Nm_G5fTfVFlgxVcrQ</code></p><p>密码是视频里摄像头的闪光（这真没想到）</p><p><code>-.--/.--/---../--.</code></p><p>得到密码：yw8g</p><p>下载得到数独，在线解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0 8 1 7 4 0 0 0 0</span><br><span class="line">3 0 2 0 6 8 0 0 0</span><br><span class="line">4 0 6 5 0 0 8 2 0</span><br><span class="line">0 3 0 0 0 0 0 5 6</span><br><span class="line">7 0 4 3 0 9 2 0 1</span><br><span class="line">1 2 0 0 0 0 0 4 0</span><br><span class="line">0 5 9 0 0 4 1 0 8</span><br><span class="line">0 0 0 1 8 0 9 0 2</span><br><span class="line">0 0 0 0 9 7 4 6 0</span><br><span class="line"></span><br><span class="line">密文:</span><br><span class="line">efb851bdc71d72b9ff668bddd30fd6bd</span><br><span class="line">密钥:</span><br><span class="line">第一列九宫格从左到右从上到下</span><br></pre></td></tr></table></figure><p>得到密钥：<code>52693795149137</code></p><p>AES中hex解密得到<code>GG0kc.tf</code></p><p>解压rar文件得到<code>逆光 vocal.ovex</code>文件</p><p>使用<code>Overture 5</code>打谱软件打开，在歌词里看到flag</p><p><code>flag{gkctf_is_fun}</code></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="小学生的密码学"><a href="#小学生的密码学" class="headerlink" title="小学生的密码学"></a>小学生的密码学</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e(x)&#x3D;11x+6(mod26)</span><br><span class="line">密文：welcylk</span><br><span class="line">（flag为base64形式）</span><br></pre></td></tr></table></figure><p>仿射密码：<a href="http://ctf.ssleye.com/affine.html" target="_blank" rel="noopener">http://ctf.ssleye.com/affine.html</a></p><p>然后base64一下，得到<code>flag{c29yY2VyeQ==}</code></p><h2 id="汉字的秘密"><a href="#汉字的秘密" class="headerlink" title="汉字的秘密"></a>汉字的秘密</h2><p>当铺密码，按照汉字出头的个数来答题数字，例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">田：0由：1王：6壮：9</span><br></pre></td></tr></table></figure><p>翻译过来是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">69 74 62 67 118 83 72 77 86 55 71</span><br><span class="line">E  J  &gt;  C  v   S  H  M  V  7  G</span><br><span class="line">57 82 57 62 63 51 107</span><br><span class="line">9  R  9  &gt;  ?  3  k</span><br></pre></td></tr></table></figure><p>然后就是变种凯撒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = [<span class="number">69</span>,<span class="number">74</span>,<span class="number">62</span>,<span class="number">67</span>,<span class="number">118</span>,<span class="number">83</span>,<span class="number">72</span>,<span class="number">77</span>,<span class="number">86</span>,<span class="number">55</span>,<span class="number">71</span>,<span class="number">57</span>,<span class="number">82</span>,<span class="number">57</span>,<span class="number">64</span>,<span class="number">63</span>,<span class="number">51</span>,<span class="number">107</span>]</span><br><span class="line">s=<span class="string">""</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(n)):</span><br><span class="line">    s+=chr(n[i]+j)</span><br><span class="line">    j+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><p><code>flag{you_are_good}</code></p><h2 id="babycrypto"><a href="#babycrypto" class="headerlink" title="babycrypto"></a>babycrypto</h2><p>百度一下得知，强网杯原题，是已知p的高位，得到p的位</p><p>需要使用sage,sage安装：<a href="https://blog.csdn.net/vanarrow/article/details/106051909" target="_blank" rel="noopener">https://blog.csdn.net/vanarrow/article/details/106051909</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005L</span></span><br><span class="line">p_fake = <span class="number">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b00000000000000000000000000000000L</span></span><br><span class="line"></span><br><span class="line">pbits = <span class="number">1024</span>  </span><br><span class="line">kbits = <span class="number">128</span></span><br><span class="line">pbar = p_fake &amp; (<span class="number">2</span>^pbits<span class="number">-2</span>^kbits)  </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"upper %d bits (of %d bits) is given"</span> % (pbits-kbits, pbits))</span><br><span class="line">   </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))  </span><br><span class="line">f = x + pbar  </span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.3  </span></span><br><span class="line">p = int(x0 + pbar)</span><br><span class="line">print(<span class="string">'p='</span>,p)</span><br></pre></td></tr></table></figure><p>得到p，然后就简单了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = <span class="number">0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005L</span></span><br><span class="line">p = <span class="number">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b92826225b6d0e735440b613a8336ffa3</span></span><br><span class="line">q = n/p</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">1422566584480199878714663051468143513667934216213366733442059106529451931078271460363335887054199577950679102659270179475911101747625120544429262334214483688332111552004535828182425152965223599160129610990036911146029170033592055768983427904835395850414634659565092191460875900237711597421272312032796440948509724492027247376113218678183443222364531669985128032971256792532015051829041230203814090194611041172775368357197854451201260927117792277559690205342515437625417792867692280849139537687763919269337822899746924269847694138899165820004160319118749298031065800530869562704671435709578921901495688124042302500361</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><p><code>flag{3d0914a1-1e97-4822-a745-c7e20c5179b9}</code></p><h2 id="Backdoor"><a href="#Backdoor" class="headerlink" title="Backdoor"></a>Backdoor</h2><p>下载得到加密脚本，公钥以及密文</p><p>将公钥提取出来，可以分解n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">cipher=<span class="string">"MDIxNDJhZjdjZTcwZmUwZGRhZTExNmJiN2U5NjI2MDI3NGVlOTI1MmE4Y2I1MjhlN2ZkZDI5ODA5YzJhNjAzMjcyN2MwNTUyNjEzM2FlNDYxMGVkOTQ0NTcyZmYxYWJmY2QwYjE3YWEyMmVmNDRhMg=="</span></span><br><span class="line">c=base64.b64decode(cipher)</span><br><span class="line"><span class="keyword">print</span> c</span><br><span class="line">c = <span class="number">0x02142af7ce70fe0ddae116bb7e96260274ee9252a8cb528e7fdd29809c2a6032727c05526133ae4610ed944572ff1abfcd0b17aa22ef44a2</span></span><br><span class="line">n = <span class="number">15518961041625074876182404585394098781487141059285455927024321276783831122168745076359780343078011216480587575072479784829258678691739</span></span><br><span class="line">p = <span class="number">3386619977051114637303328519173627165817832179845212640767197001941</span></span><br><span class="line">q = <span class="number">4582433561127855310805294456657993281782662645116543024537051682479</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><p><code>flag{760958c9-cca9-458b-9cbe-ea07aa1668e4}</code></p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tonelli–Shanks Algorithm</title>
      <link href="/2020/06/01/Tonelli%E2%80%93Shanks-Algorithm/"/>
      <url>/2020/06/01/Tonelli%E2%80%93Shanks-Algorithm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://en.wikipedia.org/wiki/Tonelli–Shanks_algorithm" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm</a></p></blockquote><p>Tonelli–Shanks算法是一个求解二次平方根的算法</p><script type="math/tex; mode=display">x^2 \equiv n \pmod p</script><p>其中n是p的二次剩余，p为奇素数</p><a id="more"></a><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>输入:</p><ul><li>p,一个素数</li><li>n,一个模p的二次剩余</li></ul><p>输出:</p><ul><li>r, $ r^2 \equiv n \pmod p $</li></ul><p>算法:</p><ol><li>从p-1分解出2的幂次，即有:p-1=Q*2^S，其中Q是奇素数。如果S=1，即$p \equiv 3 \pmod 4$，然后直接返回$r \equiv \pm n^{\frac{p+1}{4}}$。</li><li>计算z，使得其满足L(z,p)=-1，令 $c \equiv z^Q$</li><li>令 $r \equiv n^{\frac{Q+1}{2}} , t \equiv n^Q , m = s$</li><li>循环：<ul><li>如果$t\equiv 1$，返回r</li><li>否则，找到最小的一个i(0&lt;i&lt;m)，且$t^{2i} \equiv 1$</li><li>令 $b \equiv c^{2^{m-i-1}}$，再令 $r\equiv br$,$t\equiv tb^2$,$c\equiv b^2$,$m=i$</li></ul></li></ol><p>如果得到一个解r，另一个解就是p-r</p><h1 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h1><p>首先有p-1=Q*2^S，令$r\equiv n^{\frac{Q+1}{2}}\pmod{p}, t\equiv n^Q\pmod p$，注意到有$r^2\equiv nt\pmod p$，这一同余式在每次循环中都保持正确；如果在某一时间点，$t \equiv 1\pmod p$，则有$r^2\equiv n\pmod p$，于是就找到n的二次平方根$R\equiv \pm r\pmod p$</p><p>如果$t!\equiv 1\pmod p$，那就考虑二次非剩余z；令$c\equiv z^Q\pmod p$，然后就有$c^{2^S}\equiv {(z^Q)}^{2^S}\equiv z^{2^SQ}\equiv z^{p-1}\equiv 1\pmod p$，并且$c^{2^{S-1}}\equiv z^{\frac{p-1}{2}}\equiv -1 \pmod p$，这意味着c的阶是$2^S$</p><p>类似地，$t^{2^S}\equiv 1\pmod p$，故t的阶能整除$2^S$；假设t的阶是$2^{S’}$，由于n是模p的二次剩余，$S’\leq S-1$</p><p>现在令$b \equiv c^{2^{m-i-1}}\pmod p$,$r’\equiv br\pmod p$,$c’\equiv b^2\pmod p$,$t’\equiv c’t\pmod p$,和之前一样，${r’}^2\equiv nt’ \pmod p$任然成立；然而现在的t和c’的阶数都是$2^{S’}$，这意味着t’的阶数$2^{S’’}$满足$S’’&lt;S’$</p><p>如果$s’’\equiv 0\pmod p$，则$t’\equiv 1\pmod p$，算法终止，返回$R\equiv \pm r’\pmod p$，否则重新执行循环，定义$b’,r’’,c’’,t’’$……直到停止；由于S序列严格递减，算法一定会结束</p><h1 id="实现-python"><a href="#实现-python" class="headerlink" title="实现(python)"></a>实现(python)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">legendre</span><span class="params">(a,p)</span>:</span></span><br><span class="line">    symbol = pow(a, (p - <span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line">    <span class="keyword">if</span> symbol == p - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> symbol</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tonelli</span><span class="params">(a,p)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">or</span> legendre(a,p) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    q = p - <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        q //= <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> s == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> pow(n, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">    </span><br><span class="line">    z = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> legendre(z, p) != <span class="number">-1</span>:</span><br><span class="line">        z += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    m = s</span><br><span class="line">    c = pow(z, q, p)</span><br><span class="line">    t = pow(a, q, p)</span><br><span class="line">    r = pow(a, (q +<span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> t!= <span class="number">1</span>:</span><br><span class="line">        t2 = t</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> t2 != <span class="number">1</span> <span class="keyword">and</span> i &lt; m:</span><br><span class="line">            t2 = pow(t2, <span class="number">2</span>, p)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        b = pow(c, <span class="number">2</span> ** (m - i - <span class="number">1</span>), p)</span><br><span class="line">        m = i</span><br><span class="line">        c = (b * b) % p</span><br><span class="line">        t = (t * c) % p</span><br><span class="line">        r = (r * b) % p</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> python </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几道RSA基础题</title>
      <link href="/2020/05/30/%E5%87%A0%E9%81%93RSA%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
      <url>/2020/05/30/%E5%87%A0%E9%81%93RSA%E5%9F%BA%E7%A1%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>记录几道RSA入门题</p><a id="more"></a><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><blockquote><p>题目：在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17<br>求解出d作为flga提交</p></blockquote><p>基础题，直接解<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">473398607161</span></span><br><span class="line">q=<span class="number">4511491</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">d=gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure></p><h1 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h1><p>题目给出了RSA的相关参数，直接求解<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">n = p * q</span><br><span class="line"><span class="keyword">print</span> pow(c, d, n)</span><br></pre></td></tr></table></figure></p><h1 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h1><ul><li>p，q，dp，dq，c</li></ul><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">dp = </span><br><span class="line">dq = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi =(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">dd = gmpy2.gcd(p<span class="number">-1</span>,q<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">d=(dp-dq)//dd * gmpy2.invert((q<span class="number">-1</span>)//dd,(p<span class="number">-1</span>)//dd) * (q<span class="number">-1</span>) + dq</span><br><span class="line"></span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><h1 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h1><ul><li>e，n，c，dp</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">dp = </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,e):</span><br><span class="line"><span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">        p=(e*dp<span class="number">-1</span>)//x+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        q=n//p</span><br><span class="line">        phin=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">        d=gmpy2.invert(e, phin)</span><br><span class="line">        m=gmpy2.powmod(c, d, n)</span><br><span class="line">        <span class="keyword">if</span>(len(hex(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><h1 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h1><ul><li>共模攻击</li><li>n，e1，e2，c1，c2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2) <span class="comment">#扩展欧几里得算法</span></span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">s = -s</span><br><span class="line">c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">t = -t</span><br><span class="line">c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><h1 id="RSA-1"><a href="#RSA-1" class="headerlink" title="RSA"></a>RSA</h1><ul><li><p>openssl的使用</p><p><a href="https://github.com/ius/rsatool" target="_blank" rel="noopener">rsatool</a></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl rsa -pubin -text -modulus -<span class="keyword">in</span> warmup -<span class="keyword">in</span> pub.key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> pyhton rsatool.py -o private.pem -e <span class="string">''</span> -p <span class="string">''</span> -q <span class="string">''</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> openssl rsautl -decrypt -<span class="keyword">in</span> flag.enc -inkey private.pem</span></span><br></pre></td></tr></table></figure><h1 id="RSAROLL"><a href="#RSAROLL" class="headerlink" title="RSAROLL"></a>RSAROLL</h1><ul><li>给出多个密文，逐一解密<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">920139713</span></span><br><span class="line">q = <span class="number">18443</span></span><br><span class="line">p = <span class="number">49891</span></span><br><span class="line">e = <span class="number">19</span></span><br><span class="line">d = int(gmpy2.invert(e , (p<span class="number">-1</span>) * (q<span class="number">-1</span>)))  </span><br><span class="line"></span><br><span class="line">c = <span class="string">'''704796792</span></span><br><span class="line"><span class="string">752211152</span></span><br><span class="line"><span class="string">274704164</span></span><br><span class="line"><span class="string">18414022</span></span><br><span class="line"><span class="string">368270835</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">263072905</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">663551792</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">704796792</span></span><br><span class="line"><span class="string">458265677</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">534149509</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">458265677</span></span><br><span class="line"><span class="string">263072905</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">828509797</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">306220148'''</span></span><br><span class="line">falg = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">'\n'</span>):</span><br><span class="line">falg += chr(pow(int(i),d,n))</span><br><span class="line"><span class="keyword">print</span> falg</span><br></pre></td></tr></table></figure></li></ul><h1 id="Dangerous-RSA"><a href="#Dangerous-RSA" class="headerlink" title="Dangerous RSA"></a>Dangerous RSA</h1><ul><li>低加密指数攻击（e=3）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c =</span><br><span class="line">n = </span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">m = gmpy2.iroot(c,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><h1 id="rsa2"><a href="#rsa2" class="headerlink" title="rsa2"></a>rsa2</h1><ul><li>低解密指数攻击（e非常大）<br><a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">rsa-wiener-attack</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Finds d knowing(e,n)</span></span><br><span class="line">    <span class="comment"># applying the Wiener continued fraction attack</span></span><br><span class="line">    </span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</span><br><span class="line">        </span><br><span class="line"><span class="comment"># check if d is actually the key</span></span><br><span class="line"><span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d<span class="number">-1</span>)%k == <span class="number">0</span>:</span><br><span class="line">    phi = (e*d<span class="number">-1</span>)//k</span><br><span class="line">    s = n - phi + <span class="number">1</span></span><br><span class="line">    <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">    <span class="comment"># has integer</span></span><br><span class="line">    discr = s*s - <span class="number">4</span>*n</span><br><span class="line">    <span class="keyword">if</span>(discr &gt;= <span class="number">0</span>):</span><br><span class="line">t = Arithmetic.is_perfect_square(discr)</span><br><span class="line"><span class="keyword">if</span> t!=<span class="number">-1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line">        </span><br><span class="line">n =</span><br><span class="line">e = </span><br><span class="line">d = hack_RSA(e,n)</span><br><span class="line">flag = <span class="string">"flag&#123;"</span> + hashlib.md5(hex(d)).hexdigest() + <span class="string">"&#125;"</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure></li></ul><h1 id="RSA5"><a href="#RSA5" class="headerlink" title="RSA5"></a>RSA5</h1><p>题目给出了20对n，c</p><p>先将20个n两两取最大公因数，即可得到p（q），然后选取得到这个最大公因数的两个n中的其中一个，即可得到另一个素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list=[n,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(list)):</span><br><span class="line"><span class="keyword">print</span> i,j</span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    <span class="keyword">print</span> (gmpy2.gcd(list[i],list[j]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"error "</span>,i</span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>我这选的是n4，q=n4/p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p=</span><br><span class="line">q=n4/p</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">nn = p * q</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(pow(c4,d,nn))</span><br></pre></td></tr></table></figure><h1 id="SameMod"><a href="#SameMod" class="headerlink" title="SameMod"></a>SameMod</h1><ul><li>共模攻击</li></ul><p>脚本跟RSA3相同，但解出的m需要用ASCII码解<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string = str(m)</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(string):</span><br><span class="line">    <span class="keyword">if</span> int(string[i:i+j]) &gt;= <span class="number">33</span> <span class="keyword">and</span> int(string[i:i+j]) &lt;=<span class="number">126</span>:</span><br><span class="line">        flag+=chr(int(string[i:i+j]))</span><br><span class="line">        i=i+j</span><br><span class="line">        j=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p><h1 id="RSA4"><a href="#RSA4" class="headerlink" title="RSA4"></a>RSA4</h1><ul><li>中国剩余定理</li></ul><p>使用中国剩余定理求解，但之前需做些转换，题目给出的n和c是5进制的<br>求出m之后转换出错，估计不是直接模的n，然后猜测e=3，开个根即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n1=  </span><br><span class="line">c1= </span><br><span class="line"></span><br><span class="line">n2=  </span><br><span class="line">c2= </span><br><span class="line"></span><br><span class="line">n3=  </span><br><span class="line">c3= </span><br><span class="line"></span><br><span class="line">ms=[n1,n2,n3]</span><br><span class="line">cs=[c1,c2,c3]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ms)):</span><br><span class="line">    ms[i]=int(str(ms[i]),<span class="number">5</span>)</span><br><span class="line">    cs[i]=int(str(cs[i]),<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span><span class="params">(bs,ms)</span>:</span></span><br><span class="line">    m = reduce(<span class="keyword">lambda</span> x,y: x*y, ms)</span><br><span class="line">    re = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ms)):</span><br><span class="line">        M = m / ms[i]</span><br><span class="line">        gcd, n1, M1 = gmpy2.gcdext(ms[i], M)<span class="comment"># ms[i]*n1 + M*M1 = 1</span></span><br><span class="line">        re += bs[i] * M * M1</span><br><span class="line">    <span class="keyword">return</span> re % m</span><br><span class="line"></span><br><span class="line">m = CRT(cs,ms)</span><br><span class="line">mm = gmpy2.iroot(m,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(mm)</span><br></pre></td></tr></table></figure><h1 id="RSA-amp-what"><a href="#RSA-amp-what" class="headerlink" title="RSA&amp;what"></a>RSA&amp;what</h1><ul><li>共模攻击</li><li>base64隐写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">cc1=</span><br><span class="line">cc2=</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">samemod</span><span class="params">(c1,c2)</span>:</span></span><br><span class="line">    gcd, s, t = gmpy2.gcdext(e1, e2) </span><br><span class="line">    <span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">        s = -s</span><br><span class="line">c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">        t = -t</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">    m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cc1)):</span><br><span class="line">    <span class="keyword">print</span> libnum.n2s(samemod(cc1[i],cc2[i]))</span><br></pre></td></tr></table></figure><p>在将结果写进txt时，注意将base64合并一下，确保每行结尾为’=’<br>base64隐写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https://www.jianshu.com/p/48fe4dd3e5ce</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64_diff_value</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">    base64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> abs(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_stego</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'0.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            norm_line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>).decode(<span class="string">'base64'</span>).encode(<span class="string">'base64'</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="keyword">print</span> diff</span><br><span class="line">            pads_num = steg_line.count(<span class="string">'='</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += bin(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">'0'</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="keyword">print</span> goflag(bin_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goflag</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    res_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += chr(int(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure><h1 id="坏蛋是雷宾"><a href="#坏蛋是雷宾" class="headerlink" title="坏蛋是雷宾"></a>坏蛋是雷宾</h1><ul><li>Rabin算法</li></ul><p>原理详见：<a href="https://wiki.x10sec.org/crypto/asymmetric/rsa/rsa_e_attack/" target="_blank" rel="noopener">https://wiki.x10sec.org/crypto/asymmetric/rsa/rsa_e_attack/</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">n=<span class="number">523798549</span></span><br><span class="line">p=<span class="number">10663</span></span><br><span class="line">q=<span class="number">49123</span></span><br><span class="line">e=<span class="number">2</span></span><br><span class="line">c=<span class="number">162853095</span></span><br><span class="line">inv_p = invert(p, q)</span><br><span class="line">inv_q = invert(q, p)</span><br><span class="line"></span><br><span class="line">mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line">a = (inv_p * p * mq + inv_q * q * mp) % n</span><br><span class="line">b = n - int(a)</span><br><span class="line">c = (inv_p * p * mq - inv_q * q * mp) % n</span><br><span class="line">d = n - int(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (a, b, c, d):</span><br><span class="line">    print(bin(i)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#10010011100100100101010110001  </span></span><br><span class="line">m=<span class="string">'10010011100100100101010'</span></span><br><span class="line">mc=str(int(m,<span class="number">2</span>))</span><br><span class="line">md=hashlib.md5()</span><br><span class="line">md.update(mc.encode(<span class="string">"utf8"</span>))</span><br><span class="line">flag = md.hexdigest()</span><br><span class="line">print(<span class="string">"flag&#123;"</span>+str(flag)+<span class="string">'&#125;'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> BUU </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF2020 Misc&amp;Crypto部分Write Up</title>
      <link href="/2020/04/30/MRCTF2020-Misc-Crypto%E9%83%A8%E5%88%86WriteUp/"/>
      <url>/2020/04/30/MRCTF2020-Misc-Crypto%E9%83%A8%E5%88%86WriteUp/</url>
      
        <content type="html"><![CDATA[<p>还是太菜，害</p><p>有几题后面借鉴大佬的博客才做出来的，在BUU复现</p><a id="more"></a><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="天干地支-甲子"><a href="#天干地支-甲子" class="headerlink" title="天干地支+甲子"></a>天干地支+甲子</h2><p>查一下每一个代表的数字，然后加上60（甲子），ASCII转一下就ok</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a= [<span class="number">11</span>, <span class="number">51</span>,<span class="number">51</span>,<span class="number">40</span>,<span class="number">46</span>,<span class="number">51</span>,<span class="number">38</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join(chr(i+<span class="number">60</span>) <span class="keyword">for</span> i <span class="keyword">in</span> a)</span><br></pre></td></tr></table></figure><p><code>MRCTF{Goodjob}</code></p><h2 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h2><p>键盘密码，手机9键走起</p><p>解出来是mobilephond，改一下mobilephone</p><p><code>MRCTF{mobilephone}</code></p><h2 id="古典密码知多少"><a href="#古典密码知多少" class="headerlink" title="古典密码知多少"></a>古典密码知多少</h2><p>蓝色：猪圈密码，黄色：圣武士堂密码，黑色：银河密码</p><p>解出来：FGCPFLIRTUASYON</p><p>然后栅栏一下：FLAGISCRYPTOFUN</p><p>最后<code>MRCTF{CRYPTOFUN}</code></p><h2 id="vigenere"><a href="#vigenere" class="headerlink" title="vigenere"></a>vigenere</h2><p>直接在线解密：<a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="noopener">https://www.guballa.de/vigenere-solver</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a declaration of the independence of cyberspace</span><br><span class="line">by john perry barlow </span><br><span class="line">governments of the industrial world, you weary giants of flesh and steel, i come from cyberspace, the new home of mind. on behalf of the future, i ask you of the past to leave us alone. you are not welcome among us. you have no sovereignty where we gather.</span><br><span class="line">we have no elected government, nor are we likely to have one, so i address you with no greater authority than that with which liberty itself always speaks. i declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. you have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.</span><br><span class="line">governments derive their just powers from the consent of the governed. you have neither solicited nor received ours. we did not invite you. you do not know us, nor do you know our world. cyberspace does not lie within your borders. do not think that you can build it, as though it were a public construction project. you cannot. it is an act of nature and it grows itself through our collective actions.</span><br><span class="line">you have not engaged in our great and gathering conversation, nor did you create the wealth of our marketplaces. you do not know our culture, our ethics, or the unwritten codes that already provide our society more order than could be obtained by any of your impositions.</span><br><span class="line">you claim there are problems among us that you need to solve. you use this claim as an excuse to invade our precincts. many of these problems don&#39;t exist. where there are real conflicts, where there are wrongs, we will identify them and address them by our means. we are forming our own social contract. this governance will arise according to the conditions of our world, not yours. our world is different.</span><br><span class="line">cyberspace consists of transactions, relationships, and thought itself, arrayed like a standing wave in the web of our communications. ours is a world that is both everywhere and nowhere, but it is not where bodies live.</span><br><span class="line">we are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.</span><br><span class="line">we are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.</span><br><span class="line">your legal concepts of property, expression, identity, movement, and context do not apply to us. they are all based on matter, and there is no matter here.</span><br><span class="line">our identities have no bodies, so, unlike you, we cannot obtain order by physical coercion. we believe that from ethics, enlightened self-interest, and the commonweal, our governance will emerge. our identities may be distributed across many of your jurisdictions. the only law that all our constituent cultures would generally recognize is the golden rule. we hope we will be able to build our particular solutions on that basis. but we cannot accept the solutions you are attempting to impose.</span><br><span class="line">in the united states, you have today created a law, the telecommunications reform act, which repudiates your own constitution and insults the dreams of jefferson, washington, mill, madison, detoqueville, and brandeis. these dreams must now be born anew in us.</span><br><span class="line">you are terrified of your own children, since they are natives in a world where you will always be immigrants. because you fear them, you entrust your bureaucracies with the parental responsibilities you are too cowardly to confront yourselves. in our world, all the sentiments and expressions of humanity, from the debasing to the angelic, are parts of a seamless whole, the global conversation of bits. we cannot separate the air that chokes from the air upon which wings beat.</span><br><span class="line">in china, germany, france, russia, singapore, italy and the united states, you are trying to ward off the virus of liberty by erecting guard posts at the frontiers of cyberspace. these may keep out the contagion for a small time, but they will not work in a world that will soon be blanketed in bit-bearing media.</span><br><span class="line">your increasingly obsolete information industries would perpetuate themselves by proposing laws, in america and elsewhere, that claim to own speech itself throughout the world. these laws would declare ideas to be another industrial product, no more noble than pig iron. in our world, whatever the human mind may create can be reproduced and distributed infinitely at no cost. the global conveyance of thought no longer requires your factories to accomplish.</span><br><span class="line">these increasingly hostile and colonial measures place us in the same position as those previous lovers of freedom and self-determination who had to reject the authorities of distant, uninformed powers. we must declare our virtual selves immune to your sovereignty, even as we continue to consent to your rule over our bodies. we will spread ourselves across the planet so that no one can arrest our thoughts.</span><br><span class="line">we will create a civilization of the mind in cyberspace. may it be more humane and fair than the world your governments have made before.</span><br><span class="line">flag is mrctf vigenere crypto crack man, please add underscore and curly braces.</span><br></pre></td></tr></table></figure><p>flag:<code>MRCTF{vigenere_crypto_crack_man}</code></p><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><p>看了一下源代码，找到p和q就行，然后先看p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_p</span><span class="params">()</span>:</span></span><br><span class="line">    P = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>)]</span><br><span class="line">    P[<span class="number">0</span>] = getPrime(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">        P[i] = sympy.nextprime(P[i<span class="number">-1</span>])</span><br><span class="line">    print(<span class="string">"P_p :"</span>, P[<span class="number">9</span>])</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">        n *= P[i]</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    factor = pow(p, base, n)</span><br><span class="line">    print(<span class="string">"P_factor :"</span>, factor)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(p)</span><br></pre></td></tr></table></figure><p>因为已经给出了P[9]，而且使用的是nextprime()，即可以将数组测试出来，这样就得到了这里面的n，从而得到后面需要的p</p><p>然后看q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_q</span><span class="params">()</span>:</span></span><br><span class="line">    sub_Q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q_1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q_2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q = sub_Q ** Q_2 % Q_1</span><br><span class="line">    print(<span class="string">"Q_1: "</span>, Q_1)</span><br><span class="line">    print(<span class="string">"Q_2: "</span>, Q_2)</span><br><span class="line">    print(<span class="string">"sub_Q: "</span>, sub_Q)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(Q)</span><br></pre></td></tr></table></figure><p>直接使用pow(sub_Q,Q-2,Q_1)得到Q，然后nextprime得到q<br>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">factor = <span class="number">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class="line"></span><br><span class="line">p = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>)]</span><br><span class="line">p[<span class="number">0</span>]=<span class="number">206027926847308612719677572554991142909</span></span><br><span class="line">p[<span class="number">1</span>]=<span class="number">206027926847308612719677572554991142911</span></span><br><span class="line">p[<span class="number">2</span>]=<span class="number">206027926847308612719677572554991142977</span></span><br><span class="line">p[<span class="number">3</span>]=<span class="number">206027926847308612719677572554991143071</span></span><br><span class="line">p[<span class="number">4</span>]=<span class="number">206027926847308612719677572554991143103</span></span><br><span class="line">p[<span class="number">5</span>]=<span class="number">206027926847308612719677572554991143121</span></span><br><span class="line">p[<span class="number">6</span>]=<span class="number">206027926847308612719677572554991143133</span></span><br><span class="line">p[<span class="number">7</span>]=<span class="number">206027926847308612719677572554991143317</span></span><br><span class="line">p[<span class="number">8</span>]=<span class="number">206027926847308612719677572554991143401</span></span><br><span class="line">p[<span class="number">9</span>]=<span class="number">206027926847308612719677572554991143421</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">17</span>):</span><br><span class="line">    p[i]=sympy.nextprime(p[i<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">        x= n*p[i]</span><br><span class="line">        n=x</span><br><span class="line">phi=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">17</span>):</span><br><span class="line">    phi *=p[i]<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print n</span></span><br><span class="line"><span class="comment">#print sympy.nextprime(n)</span></span><br><span class="line">d1 = gmpy2.invert(e,phi)</span><br><span class="line">p = pow(factor, d1, n)</span><br><span class="line">p = sympy.nextprime(p)</span><br><span class="line"><span class="keyword">print</span> p</span><br><span class="line"></span><br><span class="line">Q_1 = <span class="number">103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span></span><br><span class="line">Q_2 =  <span class="number">151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span></span><br><span class="line">sub_Q = <span class="number">168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span></span><br><span class="line">Q = pow(sub_Q, Q_2, Q_1)</span><br><span class="line">q = sympy.nextprime(Q)</span><br><span class="line"><span class="keyword">print</span> q</span><br><span class="line"></span><br><span class="line">c = <span class="number">1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span></span><br><span class="line"></span><br><span class="line">ph = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, ph)</span><br><span class="line">m = pow(c, d, p*q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br><span class="line"><span class="comment"># flag：MRCTF&#123;sti11_@_b@by_qu3st10n&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy_RSA"></a>Easy_RSA</h2><p>跟上一题相似，也是求p和q的</p><p>先看p：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_p</span><span class="params">()</span>:</span></span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">assert</span> (p &lt; q)</span><br><span class="line">    n = p * q</span><br><span class="line">    print(<span class="string">"P_n = "</span>, n)</span><br><span class="line">    F_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"P_F_n = "</span>, F_n)</span><br><span class="line">    factor2 = <span class="number">2021</span> * p + <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (<span class="number">-1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br></pre></td></tr></table></figure><p>可以知道这里已知的数有n = p <em> q和φ(n) = (p-1) </em> (q-1) ，这里就可以使用二分法来计算</p><p>然后是q：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_q</span><span class="params">()</span>:</span></span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">assert</span> (p &lt; q)</span><br><span class="line">    n = p * q</span><br><span class="line">    print(<span class="string">"Q_n = "</span>, n)</span><br><span class="line">    e = getRandomNBitInteger(<span class="number">53</span>)</span><br><span class="line">    F_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> gcd(e, F_n) != <span class="number">1</span>:</span><br><span class="line">        e = getRandomNBitInteger(<span class="number">53</span>)</span><br><span class="line">    d = invert(e, F_n)</span><br><span class="line">    print(<span class="string">"Q_E_D = "</span>, e * d)</span><br><span class="line">    factor2 = <span class="number">2021</span> * p - <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (<span class="number">-1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br></pre></td></tr></table></figure><p>相当于是已知e，d，n，借鉴了<a href="https://blog.csdn.net/qq_41956187/article/details/105189556?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2" target="_blank" rel="noopener">大佬的博客</a></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_P</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># P_n = p * q</span></span><br><span class="line">    P_n =  <span class="number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693</span></span><br><span class="line">    <span class="comment"># P_F_n = p*q - (p+q) + 1</span></span><br><span class="line">    P_F_n =  <span class="number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740</span></span><br><span class="line">    <span class="comment"># P_Q = p+q</span></span><br><span class="line">    P_Q = P_n - P_F_n + <span class="number">1</span></span><br><span class="line">    <span class="comment">#print P_Q</span></span><br><span class="line"></span><br><span class="line">    l=P_Q/<span class="number">2</span></span><br><span class="line">    r=P_Q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">      p=(l+r)/<span class="number">2</span></span><br><span class="line">      y=p*(P_Q-p)</span><br><span class="line">      <span class="keyword">if</span> y==P_n:</span><br><span class="line">          <span class="comment">#print p</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> y&gt;P_n:</span><br><span class="line">          <span class="comment">#print 'y&gt;P_n'</span></span><br><span class="line">          l=p</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="comment">#print 'y&lt;P_n'</span></span><br><span class="line">          r=p</span><br><span class="line">      </span><br><span class="line">    <span class="comment">#print 'done'</span></span><br><span class="line">    q=P_Q-p</span><br><span class="line">    <span class="comment">#print q</span></span><br><span class="line">    <span class="keyword">if</span> p&gt;q:</span><br><span class="line">        p,q=q,p</span><br><span class="line">        factor2 = <span class="number">2021</span> * p + <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (<span class="number">-1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Q</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Q_n = p * q</span></span><br><span class="line">    Q_n =  <span class="number">20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947</span></span><br><span class="line">    <span class="comment"># Q_E_D = e * d</span></span><br><span class="line">    Q_E_D =  <span class="number">100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201</span></span><br><span class="line">    f, s, tem = Q_E_D<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> f % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        f = f // <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    i, a, t = s, <span class="number">2</span>, f</span><br><span class="line">    b = pow(a, t, Q_n)</span><br><span class="line">    <span class="keyword">while</span> b == <span class="number">1</span>:</span><br><span class="line">        a = sympy.nextprime(a)</span><br><span class="line">        b = pow(a, t, Q_n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i != <span class="number">1</span>:</span><br><span class="line">        c = pow(b, <span class="number">2</span>, Q_n)</span><br><span class="line">        <span class="keyword">if</span> c != <span class="number">1</span>:</span><br><span class="line">            b = c</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> b == Q_n<span class="number">-1</span>:</span><br><span class="line">        a = sympy.nextprime(a)</span><br><span class="line">        b = pow(a, t, Q_n)</span><br><span class="line">        <span class="keyword">while</span> b == <span class="number">1</span>:</span><br><span class="line">            a = sympy.nextprime(a)</span><br><span class="line">            b = pow(a, t, Q_n)</span><br><span class="line"></span><br><span class="line">    p = gcd(b<span class="number">-1</span>, Q_n)</span><br><span class="line">    q = Q_n//p</span><br><span class="line">    </span><br><span class="line">    factor2 = <span class="number">2021</span> * p - <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (<span class="number">-1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line">    </span><br><span class="line">p = get_P()</span><br><span class="line"><span class="keyword">print</span> p</span><br><span class="line">q = get_Q()</span><br><span class="line"><span class="keyword">print</span> q</span><br><span class="line">c =  <span class="number">40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br><span class="line"><span class="comment"># flag：MRCTF&#123;Ju3t_@_31mp13_que3t10n&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="你能看懂音符吗"><a href="#你能看懂音符吗" class="headerlink" title="你能看懂音符吗"></a>你能看懂音符吗</h2><p>打开压缩包，发现一文档，不知道把文档里的内容藏哪去了，直接解压文档，在document.xml中找到音符</p><p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue" target="_blank" rel="noopener">在线网站解密</a></p><p>flag：<code>MRCTF{thEse_n0tes_ArE_am@zing~}</code></p><h2 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h2><p>图片显示问题，估计改了高，爆破一下，修改得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'flag.png'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    all_b = f.read()</span><br><span class="line">    crc32key = int(all_b[<span class="number">29</span>:<span class="number">33</span>].hex(),<span class="number">16</span>)</span><br><span class="line">    data = bytearray(all_b[<span class="number">12</span>:<span class="number">29</span>])</span><br><span class="line">    n = <span class="number">4095</span>            <span class="comment">#理论上0xffffffff,但考虑到屏幕实际/cpu，0x0fff就差不多了</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> range(n):          <span class="comment">#高和宽一起爆破</span></span><br><span class="line">        width = bytearray(struct.pack(<span class="string">'&gt;i'</span>, w))     <span class="comment">#q为8字节，i为4字节，h为2字节</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(n):</span><br><span class="line">            height = bytearray(struct.pack(<span class="string">'&gt;i'</span>, h))</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">                data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">            crc32result = zlib.crc32(data)</span><br><span class="line">            <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">                print(<span class="string">"宽为："</span>,end=<span class="string">""</span>)</span><br><span class="line">                print(width)</span><br><span class="line">                print(<span class="string">"高为："</span>,end=<span class="string">""</span>)</span><br><span class="line">                print(height)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>flag:<code>MRCTF{1ts_vEryyyyyy_ez!}</code></p><h2 id="CyberPunk"><a href="#CyberPunk" class="headerlink" title="CyberPunk"></a>CyberPunk</h2><p>将系统时间改成2020/09/17就行了</p><p>flag:<code>MRCTF{We1cOm3_70_cyber_security}</code></p><h2 id="不眠之夜"><a href="#不眠之夜" class="headerlink" title="不眠之夜"></a>不眠之夜</h2><p>直接拼图</p><p>flag：<code>MRCTF{Why_4re_U_5o_ShuL1an??}</code></p><p>(听说nb的大佬都是直接montage，但是我这种菜鸟不会用啊啊啊)</p><h2 id="千层套路"><a href="#千层套路" class="headerlink" title="千层套路"></a>千层套路</h2><p>直接上解压脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile,os </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unzip</span><span class="params">(path,zfile)</span>:</span></span><br><span class="line">    file_path=path+os.sep+zfile</span><br><span class="line">    desdir=path</span><br><span class="line">    print(desdir)</span><br><span class="line">    srcfile=zipfile.ZipFile(file_path)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> srcfile.namelist():</span><br><span class="line">        srcfile.extract(filename,desdir,pwd= bytes(zfile.split(<span class="string">"."</span>)[<span class="number">0</span>],<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">            <span class="comment"># if zipfile.is_zipfile(filename):</span></span><br><span class="line">            path=desdir</span><br><span class="line">            zfile=filename</span><br><span class="line">            unzip(path,zfile)</span><br><span class="line"></span><br><span class="line">path=<span class="string">"C:\\Users\\Admin\\Downloads\\[MRCTF2020]千层套路"</span></span><br><span class="line">zfile=<span class="string">"0573.zip"</span></span><br><span class="line">unzip(path,zfile)</span><br></pre></td></tr></table></figure><p>然后得到rgb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">x=<span class="number">200</span></span><br><span class="line">y=<span class="number">200</span></span><br><span class="line">im=Image.new(<span class="string">"RGB"</span>,(x,y))</span><br><span class="line">file=open(<span class="string">'qr.txt'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,y):</span><br><span class="line">        line=file.readline()</span><br><span class="line">rgb=line.replace(<span class="string">"\n"</span>,<span class="string">""</span>).replace(<span class="string">"("</span>,<span class="string">""</span>).replace(<span class="string">")"</span>,<span class="string">""</span>).split(<span class="string">", "</span>)</span><br><span class="line"><span class="comment">#print rgb</span></span><br><span class="line"><span class="keyword">if</span>(rgb[<span class="number">0</span>]==<span class="string">''</span>):</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">im.putpixel((i, j), (int(rgb[<span class="number">0</span>]), int(rgb[<span class="number">1</span>]), int(rgb[<span class="number">2</span>])))</span><br><span class="line"></span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p>得到二维码，扫码得flag：<code>MRCTF{ta01uyout1nreet1n0usandtimes}</code></p><h2 id="Unravel"><a href="#Unravel" class="headerlink" title="Unravel!!"></a>Unravel!!</h2><p>首先是Look_at_the_file_ending.wav文件，直接010打开，可以看到有一串字符串</p><p><code>key=U2FsdGVkX1/nSQN+hoHL8OwV9iJB/mSdKk5dmusulz4=</code></p><p>然后看看JM.png这张图片，binwalk，foremost一下，得到压缩包，解压得到aes.png图片，上面写着“Tokyo”</p><p>估计是aes加密，找个网站在线解密一下<a href="https://www.sojson.com/encrypt_aes.html" target="_blank" rel="noopener">https://www.sojson.com/encrypt_aes.html</a></p><p>又得到一串字符串<code>CCGandGulu</code></p><p>最后看看Ending.wav，用SilentEye打开，输入密码，得到flag:<code>MRCTF{Th1s_is_the_3nd1n9}</code></p><h2 id="Hello-misc"><a href="#Hello-misc" class="headerlink" title="Hello_ misc"></a>Hello_ misc</h2><p>拿到图片，binwalk,foremost直接走起，得到压缩包，然后用Stegsolve看看图片，将Red的0通道保存得到压缩包密码：<code>!@#$%67*()-+</code></p><p>压缩包解压后，打开文件是一大堆63,127,191,255，TTL隐写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fp = open(<span class="string">'out.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">a = fp.readlines()</span><br><span class="line">p = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    p.append(int(i))</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">63</span>:</span><br><span class="line">        a = <span class="string">'00'</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">127</span>:</span><br><span class="line">        a = <span class="string">'01'</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">191</span>:</span><br><span class="line">        a = <span class="string">'10'</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">255</span>:</span><br><span class="line">        a = <span class="string">'11'</span></span><br><span class="line">    s += a</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(s),<span class="number">8</span>):</span><br><span class="line">    flag += chr(int(s[i:i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (flag)</span><br><span class="line"><span class="comment"># rar-passwd:0ac1fe6b77be5dbe</span></span><br></pre></td></tr></table></figure><p>得到了rar的密码：<code>0ac1fe6b77be5dbe</code></p><p>rar解压后发现文档中的5串base64编码，解码之后全是0和1</p><p>然后仔细一看，将1替换成空格，然后缩小至最小（sublime Text），就能看出flag了</p><p>flag:<code>MRCTF{He1Lo_mi5c~}</code> (居然是5。。。)</p><h2 id="pyFlag"><a href="#pyFlag" class="headerlink" title="pyFlag"></a>pyFlag</h2><p>给了3张图片，010打开发现文件尾都有点数据，foremost分不出来，仔细看了看，将三个数据合并成一个后，解压得到一个txt，里面是flag的base套娃，直接一个一个的试</p><p>解码顺序：base85-&gt;base16-&gt;base32-&gt;base16-&gt;base64</p><p>flag:<code>MRCTF{Y0u_Are_4_p3rFect_dec0der}</code></p><h2 id="寻找xxx"><a href="#寻找xxx" class="headerlink" title="寻找xxx"></a>寻找xxx</h2><p>电话音，使用dtmf2num.exe，得到电话号码18684221609</p><p>发送到公众号，得到flag:<code>MRCTF{Oh!!!_Y0u_f1nd_my_secret}</code></p><h2 id="A-Signal-From-ISS"><a href="#A-Signal-From-ISS" class="headerlink" title="A Signal From ISS"></a>A Signal From ISS</h2><p>SSTV无线电相关知识，将图片转换成声音，使用MMSSTV即可</p><p>flag:<code>merak{r3ce1ved_4n_img}</code></p><h2 id="小O的考研复试"><a href="#小O的考研复试" class="headerlink" title="小O的考研复试"></a>小O的考研复试</h2><p>简单数学题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">19260817</span>):</span><br><span class="line">  flag=(flag*<span class="number">10</span>+<span class="number">2</span>)%<span class="number">1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="comment"># 577302567</span></span><br></pre></td></tr></table></figure><p>flag:<code>MRCTF{577302567}</code></p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020 部分WriteUp</title>
      <link href="/2020/03/14/BJDCTF2020-%E9%83%A8%E5%88%86WriteUp/"/>
      <url>/2020/03/14/BJDCTF2020-%E9%83%A8%E5%88%86WriteUp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>复现平台：<a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">https://buuoj.cn/challenges</a></p></blockquote><a id="more"></a><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="这是base？？"><a href="#这是base？？" class="headerlink" title="这是base？？"></a>这是base？？</h2><p>base编码原理的实现，百度了一下，找到个脚本，改一下table即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* base64_table = <span class="string">"JKLMNOxyUVzABCDEFGH789PQIabcdefghijklmWXYZ0123456RSTnopqrstuvw+/="</span>; <span class="comment">/* base64编码表 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">num_strchr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* p = <span class="built_in">strchr</span>(str, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p - str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> base64_get_dest_len(<span class="keyword">uint32_t</span> src_len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span> * ((src_len + <span class="number">2</span>) / <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> src_get_dest_len(<span class="keyword">uint32_t</span> base64_len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> base64_len / <span class="number">4</span> * <span class="number">3</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* src_str, <span class="keyword">uint32_t</span> src_len, <span class="keyword">char</span>* dest_str, <span class="keyword">uint32_t</span> dest_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> i, j, len;</span><br><span class="line"></span><br><span class="line">len = base64_get_dest_len(src_len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dest_len &lt; len)</span><br><span class="line">&#123;<span class="comment">/* 空间不足 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; src_len / <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">*dest_str++ = base64_table[(src_str[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>]; <span class="comment">/* 取第一字符前6bit */</span></span><br><span class="line">*dest_str++ = base64_table[((src_str[<span class="number">0</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x30</span>) | ((src_str[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>)]; <span class="comment">/* 第一字符的后2bit与第二字符的前4位进行合并 */</span></span><br><span class="line">*dest_str++ = base64_table[((src_str[<span class="number">1</span>] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x3c</span>) | ((src_str[<span class="number">2</span>] &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x03</span>)]; <span class="comment">/* 将第二字符的后4bit与第三字符的前2bit组合并 */</span></span><br><span class="line">*dest_str++ = base64_table[src_str[<span class="number">2</span>] &amp; <span class="number">0x3f</span>]; <span class="comment">/* 取第三字符的后6bit */</span></span><br><span class="line">src_str += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 非3的整数倍补“=” */</span></span><br><span class="line"><span class="keyword">if</span> ((src_len % <span class="number">3</span>) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">*dest_str++ = base64_table[(src_str[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">*dest_str++ = base64_table[((src_str[<span class="number">0</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x30</span>) | ((src_str[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>)];</span><br><span class="line">*dest_str++ = <span class="string">'='</span>;</span><br><span class="line">*dest_str++ = <span class="string">'='</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((src_len % <span class="number">3</span>) == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">*dest_str++ = base64_table[(src_str[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">*dest_str++ = base64_table[((src_str[<span class="number">0</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x30</span>) | ((src_str[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>)];</span><br><span class="line">*dest_str++ = base64_table[(src_str[j + <span class="number">1</span>] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x3c</span>];</span><br><span class="line">*dest_str++ = <span class="string">'='</span>;</span><br><span class="line">&#125;</span><br><span class="line">*dest_str = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">base64_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* src_str, <span class="keyword">uint32_t</span> src_len, <span class="keyword">char</span>* dest_str, <span class="keyword">uint32_t</span> dest_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dest_len &lt; src_get_dest_len(src_len))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; (src_str[i] != <span class="string">'\0'</span>) &amp;&amp; (i &lt; src_len); i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 四个码译成三个字符 */</span></span><br><span class="line">buf[<span class="number">0</span>] = num_strchr(base64_table, src_str[i]);</span><br><span class="line">buf[<span class="number">1</span>] = num_strchr(base64_table, src_str[i + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">*dest_str++ = ((buf[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xfc</span>) | ((buf[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (src_str[i + <span class="number">2</span>] == <span class="string">'='</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">buf[<span class="number">2</span>] = num_strchr(base64_table, src_str[i + <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">*dest_str++ = ((buf[<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0xf0</span>) | ((buf[<span class="number">2</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (src_str[i + <span class="number">3</span>] == <span class="string">'='</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">buf[<span class="number">3</span>] = num_strchr(base64_table, src_str[i + <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">*dest_str++ = ((buf[<span class="number">2</span>] &lt;&lt; <span class="number">6</span>) &amp; <span class="number">0xc0</span>) | (buf[<span class="number">3</span>] &amp; <span class="number">0x3f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*dest_str = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* buf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> dest_len, src_len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"decode"</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">src_len = <span class="built_in">strlen</span>(argv[<span class="number">2</span>]);</span><br><span class="line">dest_len = src_get_dest_len(src_len);</span><br><span class="line">buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(dest_len);</span><br><span class="line"><span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">base64_decode(argv[<span class="number">2</span>], src_len, buf, dest_len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"base64 str:%s\n"</span>, argv[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"base64_decode str:%s\n"</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"encode"</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">src_len = <span class="built_in">strlen</span>(argv[<span class="number">2</span>]);</span><br><span class="line">dest_len = base64_get_dest_len(src_len);</span><br><span class="line">buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(dest_len);</span><br><span class="line"><span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">base64_encode(argv[<span class="number">2</span>], src_len, buf, dest_len);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"src str:%s\n"</span>, argv[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"base64_encode str:%s\n"</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(buf);</span><br><span class="line">buf = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@Kali:~# gcc 0.c</span><br><span class="line">root@Kali:~# ./a.out decode FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw</span><br><span class="line">base64 str:FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw</span><br><span class="line">base64_decode str:BJD&#123;D0_Y0u_kNoW_Th1s_b4se_map&#125;</span><br></pre></td></tr></table></figure><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>hex编码</p><p><code>BJD{We1c0me_t4_BJDCTF}</code></p><h2 id="rsa-output"><a href="#rsa-output" class="headerlink" title="rsa_output"></a>rsa_output</h2><p>RSA共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n= <span class="number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span></span><br><span class="line">e1= <span class="number">2767</span></span><br><span class="line">e2= <span class="number">3659</span></span><br><span class="line">c1= <span class="number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span></span><br><span class="line">c2= <span class="number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">s = -s</span><br><span class="line">c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">t = -t</span><br><span class="line">c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>n1和n2共用一个q，可以先求最大公约数求出q，然后求出p，然后通过m（或者pow(294,e,n)）可以求出e，就把RSA的所有参数求出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span></span><br><span class="line">n1 = <span class="number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span></span><br><span class="line">c3 = <span class="number">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span></span><br><span class="line">c2 = <span class="number">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721</span></span><br><span class="line">n2 = <span class="number">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#q = gmpy2.gcd(n1, n2)</span></span><br><span class="line"><span class="comment">#print q</span></span><br><span class="line"><span class="comment">#p1 = n1 / q</span></span><br><span class="line"><span class="comment">#p2 = n2 / q</span></span><br><span class="line"><span class="comment">#print p1</span></span><br><span class="line"><span class="comment">#print p2</span></span><br><span class="line"></span><br><span class="line">q = <span class="number">99855353761764939308265951492116976798674681282941462516956577712943717850048051273358745095906207085170915794187749954588685850452162165059831749303473106541930948723000882713453679904525655327168665295207423257922666721077747911860159181041422993030618385436504858943615630219459262419715816361781062898911</span></span><br><span class="line">p1 = <span class="number">135283423427545651023916134156519717109709399113553907832988770259402226695880524199087896377303631866790192008529658716376684328032075836094156150811025163336681163420875451747389868549203081743561907379260240665153166927504059379076555558704275659133135906827306189040804323574468819553401905127999523676067</span></span><br><span class="line">p2 = <span class="number">128247614380441198621646495410948309946997239795951661931273072927374035259759992149357909896141726187046548986417994702167046344214464500647935997258628531837792334712721963467008407166687868929005971168361860024531036817205076054969304421022680304986295959208344157424943500032828301016675631415023886775977</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#for e in range(0,100000):</span></span><br><span class="line"><span class="comment">#    if pow(294, e, n1) == c3:</span></span><br><span class="line"><span class="comment">#print e</span></span><br><span class="line"><span class="comment">#break</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">52361</span></span><br><span class="line">phi = (p1 - <span class="number">1</span>)*(q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c1, d, n1)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><p>flag: <code>BJD{p_is_common_divisor}</code></p><h2 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h2><p>实际上z=p^2+q^2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span></span><br><span class="line">z = <span class="number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span></span><br><span class="line">n = <span class="number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span></span><br><span class="line"></span><br><span class="line">p_and_q = gmpy2.iroot(z + <span class="number">2</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">phi = n - p_and_q + <span class="number">1</span></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><p>flag:<code>BJD{Advanced_mathematics_is_too_hard!!!}</code></p><h2 id="Polybius"><a href="#Polybius" class="headerlink" title="Polybius"></a>Polybius</h2><p>棋盘密码，特点：密文长度是明文长度的两倍</p><p>密文中只出现了aeiou，解密不对，需要爆破顺序，即5！个,不太会写脚本（菜。。。）</p><p>官方wp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line">cipher = <span class="string">"ouauuuoooeeaaiaeauieuooeeiea"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="string">'aeiou'</span>, <span class="number">5</span>):</span><br><span class="line">    key.append(<span class="string">''</span>.join(i))</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> key:</span><br><span class="line">    temp_cipher = <span class="string">""</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> cipher:</span><br><span class="line">        temp_cipher += str(each.index(temp))          </span><br><span class="line"><span class="comment">#这里其实是将字母的表换成数字的表以便后续计算</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(temp_cipher),<span class="number">2</span>):</span><br><span class="line">        current_ascii = int(temp_cipher[i])*<span class="number">5</span>+int(temp_cipher[i+<span class="number">1</span>])+<span class="number">97</span>     </span><br><span class="line"><span class="comment">#因为棋盘密码是采用两位一起表示一个字母</span></span><br><span class="line">        <span class="keyword">if</span> current_ascii&gt;ord(<span class="string">'i'</span>):</span><br><span class="line">            current_ascii+=<span class="number">1</span></span><br><span class="line">        result += chr(current_ascii)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> result:</span><br><span class="line">        print(each,result)</span><br></pre></td></tr></table></figure><p>长度14，猜测flag就是flagispolybius</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uoaei flagispolybius</span><br><span class="line">uoaie flagkxoplubkyx</span><br></pre></td></tr></table></figure><p><code>BJD{flagispolybius}</code></p><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><p>曼彻斯特编码，学习了学习了。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msg=<span class="number">0x2559659965656a9a65656996696965a6695669a9695a699569666a5a6a6569666a59695a69aa696569666aa6</span></span><br><span class="line">s=bin(msg)[<span class="number">2</span>:]</span><br><span class="line">r=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)/<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> s[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>] == <span class="string">'10'</span>:</span><br><span class="line">        r += <span class="string">'1'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r += <span class="string">'0'</span></span><br><span class="line">print(hex(int(r,<span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>))</span><br></pre></td></tr></table></figure><p>flag:<code>BJD{DifManchestercode}</code></p><h2 id="伏羲六十四卦"><a href="#伏羲六十四卦" class="headerlink" title="伏羲六十四卦"></a>伏羲六十四卦</h2><p>这套娃也套得太多了吧。。。</p><blockquote><p>参考：<a href="https://github.com/BjdsecCA/BJDCTF2020_January" target="_blank" rel="noopener">https://github.com/BjdsecCA/BJDCTF2020_January</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> a2b_hex</span><br><span class="line">enc=<span class="string">'升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有'</span></span><br><span class="line">mydisc=&#123;<span class="string">'坤'</span>: <span class="string">'000000'</span>, <span class="string">'剥'</span>: <span class="string">'000001'</span>, <span class="string">'比'</span>: <span class="string">'000010'</span>, <span class="string">'观'</span>: <span class="string">'000011'</span>, <span class="string">'豫'</span>: <span class="string">'000100'</span>, <span class="string">'晋'</span>: <span class="string">'000101'</span>, <span class="string">'萃'</span>: <span class="string">'000110'</span>, <span class="string">'否'</span>: <span class="string">'000111'</span>, <span class="string">'谦'</span>: <span class="string">'001000'</span>, <span class="string">'艮'</span>: <span class="string">'001001'</span>, <span class="string">'蹇'</span>: <span class="string">'001010'</span>, <span class="string">'渐'</span>: <span class="string">'001011'</span>, <span class="string">'小过'</span>: <span class="string">'001100'</span>, <span class="string">'旅'</span>: <span class="string">'001101'</span>, <span class="string">'咸'</span>: <span class="string">'001110'</span>, <span class="string">'遁'</span>: <span class="string">'001111'</span>, <span class="string">'师'</span>: <span class="string">'010000'</span>, <span class="string">'蒙'</span>: <span class="string">'010001'</span>, <span class="string">'坎'</span>: <span class="string">'010010'</span>, <span class="string">'涣'</span>: <span class="string">'010011'</span>, <span class="string">'解'</span>: <span class="string">'010100'</span>, <span class="string">'未济'</span>: <span class="string">'010101'</span>, <span class="string">'困'</span>: <span class="string">'010110'</span>, <span class="string">'讼'</span>: <span class="string">'010111'</span>, <span class="string">'升'</span>: <span class="string">'011000'</span>, <span class="string">'蛊'</span>: <span class="string">'011001'</span>, <span class="string">'井'</span>: <span class="string">'011010'</span>, <span class="string">'巽'</span>: <span class="string">'011011'</span>, <span class="string">'恒'</span>: <span class="string">'011100'</span>, <span class="string">'鼎'</span>: <span class="string">'011101'</span>, <span class="string">'大过'</span>: <span class="string">'011110'</span>, <span class="string">'姤'</span>: <span class="string">'011111'</span>, <span class="string">'复'</span>: <span class="string">'100000'</span>, <span class="string">'颐'</span>: <span class="string">'100001'</span>, <span class="string">'屯'</span>: <span class="string">'100010'</span>, <span class="string">'益'</span>: <span class="string">'100011'</span>, <span class="string">'震'</span>: <span class="string">'100100'</span>, <span class="string">'噬嗑'</span>: <span class="string">'100101'</span>, <span class="string">'随'</span>: <span class="string">'100110'</span>, <span class="string">'无妄'</span>: <span class="string">'100111'</span>, <span class="string">'明夷'</span>: <span class="string">'101000'</span>, <span class="string">'贲'</span>: <span class="string">'101001'</span>, <span class="string">'既济'</span>: <span class="string">'101010'</span>, <span class="string">'家人'</span>: <span class="string">'101011'</span>, <span class="string">'丰'</span>: <span class="string">'101100'</span>, <span class="string">'离'</span>: <span class="string">'101101'</span>, <span class="string">'革'</span>: <span class="string">'101110'</span>, <span class="string">'同人'</span>: <span class="string">'101111'</span>, <span class="string">'临'</span>: <span class="string">'110000'</span>, <span class="string">'损'</span>: <span class="string">'110001'</span>, <span class="string">'节'</span>: <span class="string">'110010'</span>, <span class="string">'中孚'</span>: <span class="string">'110011'</span>, <span class="string">'归妹'</span>: <span class="string">'110100'</span>, <span class="string">'睽'</span>: <span class="string">'110101'</span>, <span class="string">'兑'</span>: <span class="string">'110110'</span>, <span class="string">'履'</span>: <span class="string">'110111'</span>, <span class="string">'泰'</span>: <span class="string">'111000'</span>, <span class="string">'大畜'</span>: <span class="string">'111001'</span>, <span class="string">'需'</span>: <span class="string">'111010'</span>, <span class="string">'小畜'</span>: <span class="string">'111011'</span>, <span class="string">'大壮'</span>: <span class="string">'111100'</span>, <span class="string">'大有'</span>: <span class="string">'111101'</span>, <span class="string">'夬'</span>: <span class="string">'111110'</span>, <span class="string">'乾'</span>: <span class="string">'111111'</span>&#125;</span><br><span class="line">keys=[<span class="string">'坤'</span>, <span class="string">'剥'</span>, <span class="string">'比'</span>, <span class="string">'观'</span>, <span class="string">'豫'</span>, <span class="string">'晋'</span>, <span class="string">'萃'</span>, <span class="string">'否'</span>, <span class="string">'谦'</span>, <span class="string">'艮'</span>, <span class="string">'蹇'</span>, <span class="string">'渐'</span>, <span class="string">'小过'</span>, <span class="string">'旅'</span>, <span class="string">'咸'</span>, <span class="string">'遁'</span>, <span class="string">'师'</span>, <span class="string">'蒙'</span>, <span class="string">'坎'</span>, <span class="string">'涣'</span>, <span class="string">'解'</span>, <span class="string">'未济'</span>, <span class="string">'困'</span>, <span class="string">'讼'</span>, <span class="string">'升'</span>, <span class="string">'蛊'</span>, <span class="string">'井'</span>, <span class="string">'巽'</span>, <span class="string">'恒'</span>, <span class="string">'鼎'</span>, <span class="string">'大过'</span>, <span class="string">'姤'</span>, <span class="string">'复'</span>, <span class="string">'颐'</span>, <span class="string">'屯'</span>, <span class="string">'益'</span>, <span class="string">'震'</span>, <span class="string">'噬嗑'</span>, <span class="string">'随'</span>, <span class="string">'无妄'</span>, <span class="string">'明夷'</span>, <span class="string">'贲'</span>, <span class="string">'既济'</span>, <span class="string">'家人'</span>, <span class="string">'丰'</span>, <span class="string">'离'</span>, <span class="string">'革'</span>, <span class="string">'同人'</span>, <span class="string">'临'</span>, <span class="string">'损'</span>, <span class="string">'节'</span>, <span class="string">'中孚'</span>, <span class="string">'归妹'</span>, <span class="string">'睽'</span>, <span class="string">'兑'</span>, <span class="string">'履'</span>, <span class="string">'泰'</span>, <span class="string">'大畜'</span>, <span class="string">'需'</span>, <span class="string">'小畜'</span>, <span class="string">'大壮'</span>, <span class="string">'大有'</span>, <span class="string">'夬'</span>, <span class="string">'乾'</span>]</span><br><span class="line"></span><br><span class="line">m=enc</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> keys:</span><br><span class="line">    m=m.replace(each,mydisc[each])</span><br><span class="line">print(m)</span><br><span class="line"> </span><br><span class="line">m1 = <span class="number">0b011000100110110000110001011011110101100001000110001100010111001001100001001100100100011001100010010101110011001001010110011100000101011000110001011001000110011001010101011011010100001001101001010101000011000100110001011001000101100101000101001101010100111001010110010101100110010001011000010100110101010101011010010110010101001101000110010101100100010001010101010000010011110100111101</span></span><br><span class="line"><span class="keyword">print</span> (str(hex(m1)))</span><br><span class="line"><span class="keyword">print</span> (a2b_hex(str(hex(m1)[<span class="number">2</span>::<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line">m2 = <span class="string">'bl1oXF1ra2FbW2VpV1dfUmBiT11dYE5NVVdXSUZYSFVDUA=='</span></span><br><span class="line"><span class="keyword">print</span> (base64.b64decode(m2))</span><br><span class="line"></span><br><span class="line">m3 = <span class="string">'n]h\\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP'</span></span><br><span class="line">m4=<span class="string">''</span></span><br><span class="line">offset=<span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(m3)):</span><br><span class="line">    m4+=chr(ord(m3[i])+offset+i)</span><br><span class="line">print(m4)</span><br><span class="line"></span><br><span class="line">m5 = <span class="string">'scodfuvmhityhirfuxfuvziiruvigzkyhv'</span></span><br><span class="line">b=<span class="number">7</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">9</span>,<span class="number">21</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">25</span>):</span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> m5:</span><br><span class="line">        flag += chr(i*((ord(k)-ord(<span class="string">'a'</span>))-b)%<span class="number">26</span>+ord(<span class="string">'a'</span>))</span><br><span class="line">    print(i,<span class="string">':'</span>,flag)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">011000100110110000110001011011110101100001000110001100010111001001100001001100100100011001100010010101110011001001010110011100000101011000110001011001000110011001010101011011010100001001101001010101000011000100110001011001000101100101000101001101010100111001010110010101100110010001011000010100110101010101011010010110010101001101000110010101100100010001010101010000010011110100111101</span><br><span class="line">0x626c316f58463172613246625732567056316466556d4269543131645945354e5656645853555a595346564455413d3d</span><br><span class="line">b'bl1oXF1ra2FbW2VpV1dfUmBiT11dYE5NVVdXSUZYSFVDUA=='</span><br><span class="line">b'n]h\\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP'</span><br><span class="line">scodfuvmhityhirfuxfuvziiruvigzkyhv</span><br><span class="line">1 : lvhwynofabmrabkynqynosbbknobzsdrao</span><br><span class="line">9 : vhlqinwtajexajminoinwgjjmnwjrgbxaw</span><br><span class="line">21 : xzruknibavstavcknykniovvcnivfoltai</span><br><span class="line">15 : jdbswncxapyvapuwngwnckppuncplktvac</span><br><span class="line">3 : hlvounqpadkzadeunwunqcddenqdxcjzaq</span><br><span class="line">7 : zrxymnujahgpahsmnimnuwhhsnuhtwvpau</span><br><span class="line">23 : tpfmgnklaxqbaxwgnegnkyxxwnkxdyrbak</span><br><span class="line">19 : bjdcongratulationsongettingtheflag</span><br><span class="line">11 : rxzienydalcfalgenuenyqllgnylpqhfay</span><br><span class="line">5 : dbjgqnszafihafyqncqnsmffynsfvmphas</span><br><span class="line">17 : ftpksneharwdarosnmsneurronerjuzdae</span><br><span class="line">25 : pftecnmvazojazqcnkcnmizzqnmzbixjam</span><br></pre></td></tr></table></figure><p>flag:<code>BJD{bjdcongratulationsongettingtheflag}</code></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="认真你就输了"><a href="#认真你就输了" class="headerlink" title="认真你就输了"></a>认真你就输了</h2><p>解压文档，找一下就找到了flag，charts文件夹下flag：flag{M9eVfi2Pcs&#35;}</p><h2 id="你猜我是个啥"><a href="#你猜我是个啥" class="headerlink" title="你猜我是个啥"></a>你猜我是个啥</h2><p>打开压缩包文件报错，16进制看一下，是个png，改后缀，是个二维码，扫描说flag不在这。。。</p><p>继续16进制看看，文件底部找到flag:<code>flag{i_am_fl@g}</code></p><h2 id="藏藏藏"><a href="#藏藏藏" class="headerlink" title="藏藏藏"></a>藏藏藏</h2><p>给了一张jpg图片，binwalk发现压缩包，foremost解压得到一个文档，打开扫码得到flag:<code>flag{you are the best!}</code></p><h2 id="just-a-rar"><a href="#just-a-rar" class="headerlink" title="just_a_rar"></a>just_a_rar</h2><p>4位数密码爆破，得到：2016，解压得到图片，16进制源码得到flag:<code>flag{Wadf_123}</code></p><h2 id="一叶障目"><a href="#一叶障目" class="headerlink" title="一叶障目"></a>一叶障目</h2><p>因为我使用的是honeyview查看图片，显示失败，多半是改了png图片的高，010打开，将第二行的01 4C改成03 4C保存，再打开就得到flag:<code>flag{66666}</code></p><h2 id="纳尼"><a href="#纳尼" class="headerlink" title="纳尼"></a>纳尼</h2><p>gif文件打不开，多半是16进制源码出问题了，打开看到少了gif的文件头，添加上47 49 46 38后保存，打开看到字符串，记录下来<code>Q1RGe3dhbmdfYmFvX3FpYW5nX2lzX3NhZH0=</code></p><p>base64:<code>CTF{wang_bao_qiang_is_sad}</code></p><h2 id="鸡你太美"><a href="#鸡你太美" class="headerlink" title="鸡你太美"></a>鸡你太美</h2><p>给了两张gif，一个打不开，直接010,看到，第二张少了文件头，加上之后得到<br>flag:<code>flag{zhi_yin_you_are_beautiful}</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> BUU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF中RSA的常见套路</title>
      <link href="/2020/02/22/CTF%E4%B8%ADRSA%E7%9A%84%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF/"/>
      <url>/2020/02/22/CTF%E4%B8%ADRSA%E7%9A%84%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>当时学习RSA的时候感觉挺简单的，但一到做题时，就发现还有很多地方没有理解透，这里记录一下CTF中RSA的常见套路，参考来源：<a href="https://wiki.x10sec.org/crypto/introduction/" target="_blank" rel="noopener">https://wiki.x10sec.org/crypto/introduction/</a><br><a href="https://err0rzz.github.io/2017/11/14/CTF%E4%B8%ADRSA%E5%A5%97%E8%B7%AF/index.html" target="_blank" rel="noopener">https://err0rzz.github.io/2017/11/14/CTF中RSA套路/index.html</a><br>这里仅记录一些代码，具体解法还请参考：<a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84632</a><br>需要注意：关于gmpy2库的使用，可以参考<a href="https://www.cnblogs.com/pcat/p/5746821.html" target="_blank" rel="noopener">https://www.cnblogs.com/pcat/p/5746821.html</a></p><a id="more"></a><h1 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h1><p>一般来说，RSA都围绕着c,m,d,n,p,q这几个参数展开，但不会给出全部，给出其中几个来求解。数据的给出也有以下几种方式：  </p><ul><li>txt文件：直接给出已知数据，分析求解</li><li>源文件：直接将加密的源文件给出，通过分析源代码，编写程序求解</li><li>pem文件：针对这类文件需要使用openssl来提取数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -pubin -text -modulus -in warmup -in public.pem</span><br><span class="line">openssl rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc</span><br></pre></td></tr></table></figure></li><li>pcap文件：针对这类文件可以使用wireshake follow一下。这种问题一般都是写了一个交互式crypto系统，可能产生多轮交互</li><li>ppc模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出</li></ul><h1 id="模数分解"><a href="#模数分解" class="headerlink" title="模数分解"></a>模数分解</h1><p>先说一说RSA中最简单最暴力的，直接分解n，一般给出的n不会太大</p><h2 id="已知n求p，q"><a href="#已知n求p，q" class="headerlink" title="已知n求p，q"></a>已知n求p，q</h2><ul><li>在线分解：<a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a><br>通过在此类网站上查询n，如果可以分解或者之前分解成功过，那么可以直接得到p和q。此类问题一般是分值较小的题目，提取出n之后可以发现n的长度小于等于512bit，可以直接取分解n。如果大于512bit，建议在使用每个题目都用后面所说的方法去解题。</li><li>yafu分解：<a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="noopener">https://sourceforge.net/projects/yafu/</a><br>下载解压后直接打开程序，输入factor(n)，n为要分解的数，即可</li><li>公约数分解n：一般这种是用于题目给出了两个及以上的n，可以使用这种方法来得到p和q，然后n1与n2的最大公因数就是p，再用n1或n2除以p就能得到q1或q2  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">      a, b = b, a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">      temp = a % b</span><br><span class="line">      a = b</span><br><span class="line">      b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">p = gcd(n1, n2)</span><br><span class="line">q1 = n1/p</span><br><span class="line">q2 = n2/p</span><br></pre></td></tr></table></figure>或者直接使用gmpy2库<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(n1, n2)</span><br><span class="line">q1 = n1/p</span><br><span class="line">q2 = n2/p</span><br></pre></td></tr></table></figure></li></ul><h2 id="已知e，p，q求d"><a href="#已知e，p，q求d" class="headerlink" title="已知e，p，q求d"></a>已知e，p，q求d</h2><p>一般e都是直接给出的，然后得到p和q之后，便可以求d<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      g, y, x = egcd(b % a, a)</span><br><span class="line">      <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">d = modinv(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者使用gmpy2</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br></pre></td></tr></table></figure></p><h2 id="已知c，d，n求m"><a href="#已知c，d，n求m" class="headerlink" title="已知c，d，n求m"></a>已知c，d，n求m</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow(c, d, n)</span><br></pre></td></tr></table></figure><h1 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h1><h2 id="e-3时的小明文攻击"><a href="#e-3时的小明文攻击" class="headerlink" title="e = 3时的小明文攻击"></a>e = 3时的小明文攻击</h2><p>识别：e=3时<br>如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。<br>如果明文的三次方虽然比n大，但是大不了多少，则可以爆破。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">if</span>(gmpy2.iroot(c+i*n, <span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">print</span> gmpy2.iroot(c+i*n, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a>低加密指数广播攻击</h2><p>如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。<br>这个识别起来比较简单，一般来说都是给了三组加密的参数和明密文，其中题目很明确地能告诉你这三组的明文都是一样的，并且e都取了一个较小的数字。<br>（个人还没做到过）</p><h1 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a>低解密指数攻击</h1><p>识别：简单来说，就是e非常大<br>GitHub上的开源攻击代码：<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a><br>这里注意一个细节问题，如果在运行脚本的时候报错，请在脚本前加上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>   sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000000</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Finds d knowing (e,n)</span></span><br><span class="line"><span class="string">    applying the Wiener continued fraction attack</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#check if d is actually the key</span></span><br><span class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d<span class="number">-1</span>)%k == <span class="number">0</span>:</span><br><span class="line">            phi = (e*d<span class="number">-1</span>)//k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">            <span class="comment"># has integer roots</span></span><br><span class="line">            discr = s*s - <span class="number">4</span>*n</span><br><span class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t!=<span class="number">-1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">d = hack_RSA(e,n)</span><br></pre></td></tr></table></figure></p><h1 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h1><p>识别：若干次加密，e不同，n相同，m相同。就可以在不分解n和求d的前提下，解出明文m。<br>给出了c1，c2，e1，e2，n<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">s = -s</span><br><span class="line">c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">t = -t</span><br><span class="line">c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br></pre></td></tr></table></figure></p><h1 id="已知dp，dq"><a href="#已知dp，dq" class="headerlink" title="已知dp，dq"></a>已知dp，dq</h1><p>最开始看到dp和dq时还查了好久，不知道啥意思，推导参考：<a href="https://beiyuouo.github.io/beiyuouo.github.io/blog/ctf-buuctf/" target="_blank" rel="noopener">https://beiyuouo.github.io/beiyuouo.github.io/blog/ctf-buuctf/</a></p><h2 id="已知dp，dq，p，q，c"><a href="#已知dp，dq，p，q，c" class="headerlink" title="已知dp，dq，p，q，c"></a>已知dp，dq，p，q，c</h2><p>其中</p><script type="math/tex; mode=display">dp \equiv d \pmod {\varphi(p)}，dq \equiv d \pmod {\varphi(q)}</script><p>使用中国剩余定理即可，但p-1与q-1不互质，推导如下：</p><script type="math/tex; mode=display">dd=gcd(p-1,q-1) \\d=k_1{\varphi(p)}+dp=k_2{\varphi(q)}+dq \\k_2{\varphi(q)} \equiv {dp - dq} \pmod{\varphi(p)} \\k_2 \frac {\varphi(q)}{dd} \equiv \frac{dp-dq}{dd} \pmod {\frac{\varphi(p)}{dd}} \\k_2 = k' \frac{\varphi(p)}{dd} + \frac{dp-dq}{dd} (\frac{\varphi(q)}{dd})^{-1}</script><p>最后</p><script type="math/tex; mode=display">d=k_2{\varphi(q)}+dq=(k'\frac{\varphi(p)}{dd}+\frac{pd-dq}{dd} ({\frac{\varphi(q)}{dd}})^{-1}){\varphi(q)}+dq</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">dd = gmpy2.gcd(p<span class="number">-1</span>, q<span class="number">-1</span>)</span><br><span class="line">d=(dp-dq)//dd * gmyp2.invert((q<span class="number">-1</span>)//dd, (p<span class="number">-1</span>)//dd) * (q<span class="number">-1</span>) +dq</span><br></pre></td></tr></table></figure><h2 id="已知e，n，dp，c"><a href="#已知e，n，dp，c" class="headerlink" title="已知e，n，dp，c"></a>已知e，n，dp，c</h2><p>dp同上</p><script type="math/tex; mode=display">e*dp \equiv ed \pmod{\varphi(p)} \\ed=k{\varphi(p)}+e*dp \\ed = (k{\varphi(p)}+e*dp) \equiv 1 \pmod{\varphi(n)} \\k{\varphi(p)}+e*dp=k'(p-1)(q-1)+1 \\移项得\\(p-1)(k'(q-1)-k)+1=e*dp \\\because dp<{\varphi(p)} \\\therefore e=65537>(k'(q-1)-k)=x</script><p>然后枚举x就可以计算出p-1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,e):</span><br><span class="line"><span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">        p=(e*dp<span class="number">-1</span>)//x+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        q=n//p</span><br><span class="line">        phin=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">        d=gmpy2.invert(e, phin)</span><br><span class="line">        m=gmpy2.powmod(c, d, n)</span><br><span class="line">        <span class="keyword">if</span>(len(hex(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> m</span><br></pre></td></tr></table></figure></p><h1 id="已知e，d，n"><a href="#已知e，d，n" class="headerlink" title="已知e，d，n"></a>已知e，d，n</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="comment"># n = p * q</span></span><br><span class="line">n =</span><br><span class="line"><span class="comment"># e_d = e * d</span></span><br><span class="line">e_d = </span><br><span class="line">f, s, tem = e_d<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> f % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    f = f // <span class="number">2</span></span><br><span class="line">    s += <span class="number">1</span></span><br><span class="line">i, a, t = s, <span class="number">2</span>, f</span><br><span class="line">b = pow(a, t, n)</span><br><span class="line"><span class="keyword">while</span> b == <span class="number">1</span>:</span><br><span class="line">    a = sympy.nextprime(a)</span><br><span class="line">    b = pow(a, t, n)</span><br><span class="line"><span class="keyword">while</span> i != <span class="number">1</span>:</span><br><span class="line">    c = pow(b, <span class="number">2</span>, n)</span><br><span class="line">    <span class="keyword">if</span> c != <span class="number">1</span>:</span><br><span class="line">        b = c</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> b == n<span class="number">-1</span>:</span><br><span class="line">    a = sympy.nextprime(a)</span><br><span class="line">    b = pow(a, t, n)</span><br><span class="line">    <span class="keyword">while</span> b == <span class="number">1</span>:</span><br><span class="line">        a = sympy.nextprime(a)</span><br><span class="line">        b = pow(a, t, n)</span><br><span class="line">p = gmpy2.gcd(b<span class="number">-1</span>, n)</span><br><span class="line">q = n//p</span><br></pre></td></tr></table></figure><h1 id="已知n-pq-，-p-1-q-1"><a href="#已知n-pq-，-p-1-q-1" class="headerlink" title="已知n(pq)，(p-1)(q-1)"></a>已知n(p<em>q)，(p-1)</em>(q-1)</h1><p>利用二分法求p，q<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n = p * q</span></span><br><span class="line">n =</span><br><span class="line"><span class="comment"># phi = (p- 1 ) * (q - 1)</span></span><br><span class="line">phi =</span><br><span class="line"></span><br><span class="line">c=n-phi+<span class="number">1</span> <span class="comment"># p + q</span></span><br><span class="line">l=c/<span class="number">2</span></span><br><span class="line">r=c</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> l&lt;r:</span><br><span class="line">    p=(l+r)/<span class="number">2</span></span><br><span class="line">    y=p*(c-p)</span><br><span class="line">        <span class="keyword">if</span> y==n:</span><br><span class="line">            <span class="keyword">print</span> p</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> y&gt;n:</span><br><span class="line">            l=p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r=p</span><br><span class="line">q=c-p</span><br><span class="line"><span class="keyword">print</span> q</span><br></pre></td></tr></table></figure></p><h1 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">ms=[]</span><br><span class="line">cs=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span><span class="params">(bs,ms)</span>:</span></span><br><span class="line">    m = reduce(<span class="keyword">lambda</span> x,y: x*y, ms)</span><br><span class="line">    re = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ms)):</span><br><span class="line">        M = m / ms[i]</span><br><span class="line">        gcd, n1, M1 = gmpy2.gcdext(ms[i], M)<span class="comment"># ms[i]*n1 + M*M1 = 1</span></span><br><span class="line">        re += bs[i] * M * M1</span><br><span class="line">    <span class="keyword">return</span> re % m</span><br><span class="line">m = CRT(cs,ms)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF Crypto部分wp</title>
      <link href="/2020/02/21/BUUCTF-Crypto%E9%83%A8%E5%88%86wp/"/>
      <url>/2020/02/21/BUUCTF-Crypto%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<p>记录一些密码学简单的题目，仅供参考</p><a id="more"></a><h1 id="1-MD5"><a href="#1-MD5" class="headerlink" title="1.MD5"></a>1.MD5</h1><p>直接md5解密<a href="https://www.cmd5.com/" target="_blank" rel="noopener">https://www.cmd5.com/</a></p><h1 id="2-看我回旋踢"><a href="#2-看我回旋踢" class="headerlink" title="2.看我回旋踢"></a>2.看我回旋踢</h1><p>一看就是凯撒密码，直接凯撒解密<a href="http://www.nicetool.net/embed/caesar_decrypt.html" target="_blank" rel="noopener">http://www.nicetool.net/embed/caesar_decrypt.html</a></p><h1 id="3-Url编码"><a href="#3-Url编码" class="headerlink" title="3.Url编码"></a>3.Url编码</h1><p>Url解密<a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/urlencode.aspx</a></p><h1 id="4-一眼就解密"><a href="#4-一眼就解密" class="headerlink" title="4.一眼就解密"></a>4.一眼就解密</h1><p>一眼就看出base64编码，解密<a href="http://ctf.ssleye.com/base64.html" target="_blank" rel="noopener">http://ctf.ssleye.com/base64.html</a></p><h1 id="5-摩丝"><a href="#5-摩丝" class="headerlink" title="5.摩丝"></a>5.摩丝</h1><p>摩斯密码<a href="http://www.ip138.com/mosi/" target="_blank" rel="noopener">http://www.ip138.com/mosi/</a></p><h1 id="6-变异凯撒"><a href="#6-变异凯撒" class="headerlink" title="6.变异凯撒"></a>6.变异凯撒</h1><p>既然是凯撒加密，就先看看密文：有小写字母，大写字母，”_”，”^”，还有数字，可能是按照ASCII码表移位的，’a’的ASCII值为97，’f’为102，a-&gt;f的ASCII值增加了5；’l’为108，f-&gt;l的ASCII值增加了6；’Z’为90，Z-&gt;a的ASCII值增加了7；之后的每次移位增加1，所以写个脚本<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"afZ_r9VYfScOeO_UL^RWUc"</span></span><br><span class="line">res =<span class="string">""</span></span><br><span class="line">j = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    res += chr(ord(i) + j)</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><br>运行一下即得flag</p><h1 id="7-Quoted-printable"><a href="#7-Quoted-printable" class="headerlink" title="7.Quoted-printable"></a>7.Quoted-printable</h1><p>Quoted-printable编码<a href="http://ctf.ssleye.com/quoted.html" target="_blank" rel="noopener">http://ctf.ssleye.com/quoted.html</a></p><h1 id="8-password"><a href="#8-password" class="headerlink" title="8.password"></a>8.password</h1><p>弱密码，猜测flag为zs19900315</p><h1 id="9-zip伪加密"><a href="#9-zip伪加密" class="headerlink" title="9.zip伪加密"></a>9.zip伪加密</h1><p>懒得写了，可以参考一下这篇文章<a href="https://blog.csdn.net/qq_26187985/article/details/83654197" target="_blank" rel="noopener">https://blog.csdn.net/qq_26187985/article/details/83654197</a><br>（还有更简单的，直接在Linux系统下提取文件，zip伪加密能够直接提取出来的）</p><h1 id="10-Rabbit"><a href="#10-Rabbit" class="headerlink" title="10.Rabbit"></a>10.Rabbit</h1><p>Rabbit密码<a href="https://www.sojson.com/encrypt_rabbit.html" target="_blank" rel="noopener">https://www.sojson.com/encrypt_rabbit.html</a></p><h1 id="11-丢失的MD5"><a href="#11-丢失的MD5" class="headerlink" title="11.丢失的MD5"></a>11.丢失的MD5</h1><p>运行一遍程序就得到了flag，展示的是md5的爆破（后面的还原大师就可以用这个）</p><h1 id="12-篱笆墙的影子"><a href="#12-篱笆墙的影子" class="headerlink" title="12.篱笆墙的影子"></a>12.篱笆墙的影子</h1><p>篱笆-&gt;栅栏，栅栏密码<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/zhalanmima.php</a></p><h1 id="13-Alice与Bob"><a href="#13-Alice与Bob" class="headerlink" title="13.Alice与Bob"></a>13.Alice与Bob</h1><p>在线分解<a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a>，然后再md5<a href="https://www.cmd5.com/" target="_blank" rel="noopener">https://www.cmd5.com/</a></p><h1 id="14-传统知识-古典密码"><a href="#14-传统知识-古典密码" class="headerlink" title="14.传统知识+古典密码"></a>14.传统知识+古典密码</h1><p>百度得到每一个年份代表的具体数字，然后“+甲子”就是指加60，之后得到88 90 83 68 77 70 76 90通过ASCII码查表之后得到XZSDMFLZ，在试一试栅栏和凯撒，发现先栅栏（XMZFSLDZ）后凯撒（SHUANGYU）得到flag</p><h1 id="15-大帝的密码武器"><a href="#15-大帝的密码武器" class="headerlink" title="15.大帝的密码武器"></a>15.大帝的密码武器</h1><p>古罗马大帝-&gt;凯撒-&gt;凯撒密码，先解密FRPHEVGL，解出来security，移动14位，然后在用这个来加密ComeChina，不过要注意大小写</p><h1 id="16-Windows系统密码"><a href="#16-Windows系统密码" class="headerlink" title="16.Windows系统密码"></a>16.Windows系统密码</h1><p>Linux的shadow文件，把这几个都用md5查询一遍，发现密码是：a7fcb22a88038f35a8f39d503e7f0062，解出：good-luck</p><h1 id="17-凯撒？替换？呵呵"><a href="#17-凯撒？替换？呵呵" class="headerlink" title="17.凯撒？替换？呵呵!"></a>17.凯撒？替换？呵呵!</h1><p>替换密码，直接在线破解<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a>（在Clues处填MTHJ=flag）</p><h1 id="18-信息化时代的步伐"><a href="#18-信息化时代的步伐" class="headerlink" title="18.信息化时代的步伐"></a>18.信息化时代的步伐</h1><p>中文电码直接破解<a href="http://code.mcdvisa.com/" target="_blank" rel="noopener">http://code.mcdvisa.com/</a></p><h1 id="19-old-fashion"><a href="#19-old-fashion" class="headerlink" title="19.old-fashion"></a>19.old-fashion</h1><p>同样是替换密码，直接在线破解<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p><pre><code>?l fog?vryoe?sg, e h?dhv?v?v?rl f??sao ?h e ?avsrb rc alfrb?ly dg ?s?fs ?l?vh rc ?ne?lvaiv eoa oa?nefab ??vs f??saovaiv, effrob?ly vr e oay?neo hghva?; the units may be single letters (the most common), pairs of letters, triplets of letters, mi?tures of the above, and so forth. The receiver deciphers the te?t by performing an inverse substitution. So the flag is n1_2hen-d3_hu1-mi-ma_a</code></pre><h1 id="20-robomunication"><a href="#20-robomunication" class="headerlink" title="20.robomunication"></a>20.robomunication</h1><p>仔细一听，像是摩斯密码，将’b’换成’.’，’p’换成’_’，得到<br>    …. . .-.. .-.. —- .— …. .- - .. … - …. . -.- . -.— .. - .. … -… —- —- .—. -… . . .—.<br>解密得到<br>    HELLOWHATISTHEKEYITISBOOPBEEP</p><h1 id="21-世上无难事"><a href="#21-世上无难事" class="headerlink" title="21.世上无难事"></a>21.世上无难事</h1><p>词频分析<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p><h1 id="22-萌萌哒的八戒"><a href="#22-萌萌哒的八戒" class="headerlink" title="22.萌萌哒的八戒"></a>22.萌萌哒的八戒</h1><p>猪圈密码<a href="http://ctf.ssleye.com/pigpen.html" target="_blank" rel="noopener">http://ctf.ssleye.com/pigpen.html</a></p><h1 id="23-权限获得第一步"><a href="#23-权限获得第一步" class="headerlink" title="23.权限获得第一步"></a>23.权限获得第一步</h1><p>和之前的Windows系统密码一样的道理</p><h1 id="24-异性相吸"><a href="#24-异性相吸" class="headerlink" title="24.异性相吸"></a>24.异性相吸</h1><p>异或，直接上脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'密文.txt'</span> )<span class="keyword">as</span> a:</span><br><span class="line">    a=a.read()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'key.txt'</span> )<span class="keyword">as</span> b:</span><br><span class="line">    b=b.read()</span><br><span class="line">d=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(b)):</span><br><span class="line">    c=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    d+=c</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure></p><h1 id="25-还原大师"><a href="#25-还原大师" class="headerlink" title="25.还原大师"></a>25.还原大师</h1><p>就用之前丢失的md5中给出的脚本，换一下数据即可</p><h1 id="26-Cipher"><a href="#26-Cipher" class="headerlink" title="26.Cipher"></a>26.Cipher</h1><p>本来没啥思路的，看到那句“公平的玩吧（密钥自己找）”，公平：fair，估计是playfair，密钥就猜是playfair，然后在线解密 <a href="http://rumkin.com/tools/cipher/playfair.php" target="_blank" rel="noopener">http://rumkin.com/tools/cipher/playfair.php</a></p><h1 id="27-这是什么"><a href="#27-这是什么" class="headerlink" title="27.这是什么"></a>27.这是什么</h1><p>用16进制编译器（winhex，010Editor）打开，可以看到一大堆括号，感叹号，复制下来，直接放在浏览器的命令行（console）中，得到flag<br>（我记得有一大串FFFFFFF的文件是word文件，也可以直接把文件后缀名改成.doc，打开也能看到文本）</p><h1 id="28-Unencode"><a href="#28-Unencode" class="headerlink" title="28.Unencode"></a>28.Unencode</h1><p>UUencode<a href="http://ctf.ssleye.com/uu.html" target="_blank" rel="noopener">http://ctf.ssleye.com/uu.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRYPTO </tag>
            
            <tag> BUU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF MISC zip</title>
      <link href="/2020/02/16/BUUCTF-MISC-zip/"/>
      <url>/2020/02/16/BUUCTF-MISC-zip/</url>
      
        <content type="html"><![CDATA[<p>在刷BUU时碰到这题(<a href="https://buuoj.cn/challenges#zip" target="_blank" rel="noopener">题目地址</a>)，题目给出了许多压缩包，但是没有一点头绪，看了看别人的wp才知道是crc爆破，在此记录一下这个知识点。</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>CRC全称Cyclic Redundancy Check，也就是循环冗余校验码，是一种能力相当强的检错、纠错码，并且实现编码和检码的电路比较简单，常用于串行传送（二进制位串沿一条信号线逐位传送）的辅助存储器与主机的数据通信和计算机网络中。<br>总而言之，就是每一个文件都有它唯一的CRC32值，即便数据中一个bit发生变化，也会导致CRC32值不同。若是知道一段数据的长度和CRC32值，便可穷举数据，与其CRC32对照，以此达到暴力猜解的目的。但通常只适用于较小文本文件。<br>自己写的脚本总出错，于是借用了大佬的脚本<a href="https://blog.csdn.net/u011377996/article/details/79360820" target="_blank" rel="noopener">https://blog.csdn.net/u011377996/article/details/79360820</a>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span><span class="params">(crc)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic: </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + j + k + h</span><br><span class="line">                    <span class="keyword">if</span> crc == (binascii.crc32(s.encode())):</span><br><span class="line">                        f.write(s)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackZip</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">68</span>):</span><br><span class="line">            file = <span class="string">'out'</span>+str(i)+<span class="string">'.zip'</span></span><br><span class="line">            crc = zipfile.ZipFile(file,<span class="string">'r'</span>).getinfo(<span class="string">'data.txt'</span>).CRC</span><br><span class="line">            CrackCrc(crc)</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">'+/='</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'out.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">CrackZip()</span><br><span class="line">print(<span class="string">"CRC32碰撞完成"</span>)</span><br><span class="line">f.close</span><br></pre></td></tr></table></figure><p>碰撞完成后得到一串base64编码，解码一看，要修复文件<br>查了点资料后发现这是一个rar压缩包 <a href="https://blog.csdn.net/vevenlcf/article/details/51538837" target="_blank" rel="noopener">https://blog.csdn.net/vevenlcf/article/details/51538837</a>，<br>修改一下文件，在文件前面加上补上52 61 72 21 1A 07 00 后保存<br>打开压缩包一看，在备注处看到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> BUU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF Misc部分wp（二）</title>
      <link href="/2020/02/12/BUUCTF-Misc%E9%83%A8%E5%88%86wp%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/02/12/BUUCTF-Misc%E9%83%A8%E5%88%86wp%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>涉及的知识点：  </p><ul><li>英语┭┮﹏┭┮</li><li>gnuplot的使用</li><li>steghide隐写</li><li>lsb隐写</li></ul><a id="more"></a><h1 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h1><p>得到一张图片，发现zip，foremost解压<br>得到密钥和一份已加密的文件，将密钥base64解码后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What is Nicki Minaj&#39;s favorite song that refers to snakes?</span><br></pre></td></tr></table></figure><br>密钥就是anaconda，那么关于蛇的加密方式就是serpent加密（也是关于蛇的单词┭┮﹏┭┮，记得在密码学课上讲过，好像是AES竞选之一，但忘完了(⊙o⊙)…）<br>在线解密：<a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">http://serpent.online-domain-tools.com/</a>  </p><h1 id="梅花香自苦寒来"><a href="#梅花香自苦寒来" class="headerlink" title="梅花香自苦寒来"></a>梅花香自苦寒来</h1><p>winhex下发现大量数据，猜测是hex编码<br>随便使用一个16进制编译器将这些编码保存，我这使用的是HxD<br>然后写脚本将它们转成ASCII码（个人比较懒，直接<a href="http://stool.chinaz.com/hex" target="_blank" rel="noopener">在线解码</a>了）<br>然后发现是一大堆坐标，使用gnuplot绘制图片，首先还是要写脚本将坐标转成gnuplot能识别的形式（除去“（”，“，”和“）”）  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> a:</span><br><span class="line">a = a.read()</span><br><span class="line">b = open(<span class="string">'2.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.split(<span class="string">'\n'</span>):</span><br><span class="line">b.write(i.lstrip(<span class="string">'('</span>).rstrip(<span class="string">')'</span>).replace(<span class="string">','</span>,<span class="string">' '</span>)+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>最后扫码得到flag</p><h1 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h1><p>binwalk先分析发现zip，解压出来发现一张图片需要密码，而压缩包不用，用winhex打开发现是一个伪加密（<a href="https://blog.csdn.net/qq_26187985/article/details/83654197" target="_blank" rel="noopener">伪加密具体详情</a>），此处将01 08改为00 08<br>解压出的图片应该就是flag压缩包密码的线索，然后对这个图片各种分析无果，最后去看了其他大佬的wp，才知道一个隐写神器：steghide（<a href="https://blog.csdn.net/Blood_Seeker/article/details/81837571" target="_blank" rel="noopener">详情</a>）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将secret.txt文件隐藏到a.jpg中：</span><br><span class="line">#steghide embed -cf a.jpg -ef secret.txt -p 123</span><br><span class="line">（-p表示密码）</span><br><span class="line">从a.jpg解出secret.txt：</span><br><span class="line">#steghide extract -sf a.jpg -p 123</span><br></pre></td></tr></table></figure><p>这题没有说要密码，直接提取出ko.txt，解压后得到flag</p><h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><p>本以为真的是弱口令，找了个字典爆破，爆破不出来，然后打开压缩包发现注释（看了好久。。。）<br>保存到sublime，是摩斯密码，解密后发现还是打不开压缩包，把字母换成大写就打开了，然后得到一张图片。。。<br>看了半天也分析不出来个啥，就去看了看wp，原来是lsb隐写，那就直接GitHub上的一个工具<a href="https://github.com/livz/cloacked-pixel" target="_blank" rel="noopener">https://github.com/livz/cloacked-pixel</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python lsb.py extract 女神.png 0.txt 123456</span><br><span class="line">弱密码猜123456</span><br></pre></td></tr></table></figure><br>得到0.txt打开即有flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> BUU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF Misc部分wp（一）</title>
      <link href="/2020/02/05/BUUCTF-Misc%E9%83%A8%E5%88%86wp%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/02/05/BUUCTF-Misc%E9%83%A8%E5%88%86wp%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>最近开始刷<a href="https://buuoj.cn/" target="_blank" rel="noopener">BUUCTF</a>，感觉题目比较基础，而且这还有许多比赛题目的复现。<br>这里将记录一些简单的MISC题目，较难的题目将单独写出来。</p><a id="more"></a><h2 id="1-金三胖"><a href="#1-金三胖" class="headerlink" title="1.金三胖"></a>1.金三胖</h2><p>题目给出了一张gif图，放入Stegsolve中逐帧查看，得到flag</p><h2 id="2-二维码"><a href="#2-二维码" class="headerlink" title="2.二维码"></a>2.二维码</h2><p>一张二维码，首先扫描一下，明显不是flag，在kali中binwalk分析一波<br>发现一个压缩包，使用foremost命令或者binwalk -e命令将压缩包提取出来发现是一个密码为四位数字的压缩包<br>fcrackzip -b -c1 -l 4 -u爆破得到flag</p><h2 id="3-N种解决方法"><a href="#3-N种解决方法" class="headerlink" title="3.N种解决方法"></a>3.N种解决方法</h2><p>下载后发现是一个exe文件，但打不开，使用任意一个文本编译器打开发现是将图片转base64了，把内容复制再转回图片<a href="http://tool.chinaz.com/tools/imgtobase" target="_blank" rel="noopener" title="http://tool.chinaz.com/tools/imgtobase">http://tool.chinaz.com/tools/imgtobase</a>，是一个二维码，扫码得到flag</p><h2 id="4-大白"><a href="#4-大白" class="headerlink" title="4.大白"></a>4.大白</h2><p>题目说屏幕太小了<br>估计是改了图片长宽，用winhex打开图片，将01 00改为02 00（对于png文件，其第二行第六列是高度位，改这一位即可）<br>得到flag</p><h2 id="5-基础破解"><a href="#5-基础破解" class="headerlink" title="5.基础破解"></a>5.基础破解</h2><p>暴力破解，使用ARCHPR破解，得到flag</p><h2 id="6-你竟然赶我走"><a href="#6-你竟然赶我走" class="headerlink" title="6.你竟然赶我走"></a>6.你竟然赶我走</h2><p>winhex下分析，发现flag  </p><h2 id="7-LSB"><a href="#7-LSB" class="headerlink" title="7.LSB"></a>7.LSB</h2><p>看到LSB，将图片放入Stegsolve中Data Extract分析<br>保存为png后是一张二维码，扫码得到flag</p><h2 id="8-乌镇峰会种图"><a href="#8-乌镇峰会种图" class="headerlink" title="8.乌镇峰会种图"></a>8.乌镇峰会种图</h2><p>同样是winhex下分析，发现flag</p><h2 id="9-rar"><a href="#9-rar" class="headerlink" title="9.rar"></a>9.rar</h2><p>ARCHPR破解，得到flag</p><h2 id="10-ningen"><a href="#10-ningen" class="headerlink" title="10.ningen"></a>10.ningen</h2><p>同之前的二维码一样解法</p><h2 id="11-文件中的秘密"><a href="#11-文件中的秘密" class="headerlink" title="11.文件中的秘密"></a>11.文件中的秘密</h2><p>winhex下分析，发现flag</p><h2 id="12-wireshark"><a href="#12-wireshark" class="headerlink" title="12.wireshark"></a>12.wireshark</h2><p>题目给出的是pcap流量包，使用wireshark打开查看http的包<br>搜索flag</p><h2 id="13-镜子里面的世界"><a href="#13-镜子里面的世界" class="headerlink" title="13.镜子里面的世界"></a>13.镜子里面的世界</h2><p>将图片放入Stegsolve中，发现Red、Green和Blue的0通道的图片的最上端有东西<br>接下来用Data Extract查看这三个通道结合起来的东西，发现flag  </p><h2 id="14-小明的保险箱"><a href="#14-小明的保险箱" class="headerlink" title="14.小明的保险箱"></a>14.小明的保险箱</h2><p>同之前的二维码一样解法</p><h2 id="15-爱因斯坦"><a href="#15-爱因斯坦" class="headerlink" title="15.爱因斯坦"></a>15.爱因斯坦</h2><p>同样是binwalk分析后分离出压缩包，不过解压密码在图片备注中</p><h2 id="16-被嗅探的流量"><a href="#16-被嗅探的流量" class="headerlink" title="16.被嗅探的流量"></a>16.被嗅探的流量</h2><p>使用wireshark追踪TCP流，查找得到flag  </p><h2 id="17-假如给我三天光明"><a href="#17-假如给我三天光明" class="headerlink" title="17.假如给我三天光明"></a>17.假如给我三天光明</h2><p>给了一张图和一个压缩包，图片下估计为盲文，猜测为压缩包密码<br>盲文解密为：kmdonowg，解压出一段音频，一听为摩斯密码，使用Audacity分析<br>摩斯解密，得flag</p><h2 id="18-easycap"><a href="#18-easycap" class="headerlink" title="18.easycap"></a>18.easycap</h2><p>wireshark追踪TCP流，直接得到flag  </p><h2 id="19-FLAG"><a href="#19-FLAG" class="headerlink" title="19.FLAG"></a>19.FLAG</h2><p>winhex，binwalk后无结果，将图片放入Stegsolve中<br>保存为zip文件，解压后为.elf文件，kali运行得flag<br>（chmod a+x a.txt 等价于 chmod +x a.txt，给所有用户给予a.txt文件可执行权限）</p><h2 id="20-另外一个世界"><a href="#20-另外一个世界" class="headerlink" title="20.另外一个世界"></a>20.另外一个世界</h2><p>winhex下发现一串二进制码，估计是ascii码，8个一组，翻译后得到flag</p><h2 id="21-荷兰宽带数据泄露"><a href="#21-荷兰宽带数据泄露" class="headerlink" title="21.荷兰宽带数据泄露"></a>21.荷兰宽带数据泄露</h2><p>下载解压后得到一个路由器配置文件，使用RouterPassView打开后搜索不到flag，再试试username或者password，结果flag是username  </p><h2 id="22-隐藏的钥匙"><a href="#22-隐藏的钥匙" class="headerlink" title="22.隐藏的钥匙"></a>22.隐藏的钥匙</h2><p>winhex下打开文件，搜索发现flag是base64编码，在线解码一下得到flag</p><h2 id="23-来首歌吧"><a href="#23-来首歌吧" class="headerlink" title="23.来首歌吧"></a>23.来首歌吧</h2><p>得到一段音频，使用Audacity分析，发现摩斯密码，解码得到flag</p><h2 id="24-后门查杀"><a href="#24-后门查杀" class="headerlink" title="24.后门查杀"></a>24.后门查杀</h2><p>webshell会报病毒，随便拿杀毒软件一个扫描一下，就得到目的文件<br>文件打开就得到flag</p><h2 id="25-神秘龙卷风"><a href="#25-神秘龙卷风" class="headerlink" title="25.神秘龙卷风"></a>25.神秘龙卷风</h2><p>解压得到一压缩包，提示说密码四位数，ARCHPR破解，打开文件发现是Brainfuck编码，<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">在线解码</a></p><h2 id="26-面具下的flag"><a href="#26-面具下的flag" class="headerlink" title="26.面具下的flag"></a>26.面具下的flag</h2><p>解压得到的图片binwalk分析发现压缩包，foremost解压后得到一个flag.vmdk的文件（老实说vmdk我也没怎么见过，于是就看了看网上的wp），使用7z解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7z x flag.vmdk</span><br></pre></td></tr></table></figure><br>解压后得到flag的两部分，ook与Brainfuck<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">在线解码</a><br>（不太明白为什么7z能解压vmdk文件，而且有趣的是我在Windows下解压不能解压出flag后半段密码，在kali下却能。。。）</p><h2 id="27-webshell后门"><a href="#27-webshell后门" class="headerlink" title="27.webshell后门"></a>27.webshell后门</h2><p>和后门查杀那题一样，杀毒软件一扫完事~~~</p><h2 id="28-被劫持的神秘礼物"><a href="#28-被劫持的神秘礼物" class="headerlink" title="28.被劫持的神秘礼物"></a>28.被劫持的神秘礼物</h2><p>wireshark打开查询TCP流，发现账号密码，串一起再md5  </p><h2 id="29-刷新过的图片"><a href="#29-刷新过的图片" class="headerlink" title="29.刷新过的图片"></a>29.刷新过的图片</h2><p>（知识盲区，唉~~~）<br>F5隐写，参考论文：<a href="https://wenku.baidu.com/view/c9150e29b4daa58da0114a39.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/c9150e29b4daa58da0114a39.html</a><br>解题时就直接使用：F5-steganography<br>解压出来一个output.txt，打开一看PK开头，估计是zip，改后缀名，解压后得到flag</p><h2 id="30-穿越时空的思恋"><a href="#30-穿越时空的思恋" class="headerlink" title="30.穿越时空的思恋"></a>30.穿越时空的思恋</h2><p>又是一段音频，Audacity分析，发现摩斯密码，解码得到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> BUU </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
