<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BJDCTF2020 Misc&amp;Crypto部分WriteUp</title>
    <url>/2020/03/14/BJDCTF2020-Misc-Crypto%E9%83%A8%E5%88%86WriteUp/</url>
    <content><![CDATA[<blockquote>
<p>复现平台：<a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">https://buuoj.cn/challenges</a></p>
</blockquote>
<a id="more"></a>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="这是base？？"><a href="#这是base？？" class="headerlink" title="这是base？？"></a>这是base？？</h2><p>base编码原理的实现，百度了一下，找到个脚本，改一下table即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* base64_table = <span class="string">"JKLMNOxyUVzABCDEFGH789PQIabcdefghijklmWXYZ0123456RSTnopqrstuvw+/="</span>; <span class="comment">/* base64编码表 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">num_strchr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* p = <span class="built_in">strchr</span>(str, c);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> p - str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> base64_get_dest_len(<span class="keyword">uint32_t</span> src_len)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">4</span> * ((src_len + <span class="number">2</span>) / <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> src_get_dest_len(<span class="keyword">uint32_t</span> base64_len)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> base64_len / <span class="number">4</span> * <span class="number">3</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* src_str, <span class="keyword">uint32_t</span> src_len, <span class="keyword">char</span>* dest_str, <span class="keyword">uint32_t</span> dest_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">uint32_t</span> i, j, len;</span><br><span class="line"></span><br><span class="line">	len = base64_get_dest_len(src_len);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (dest_len &lt; len)</span><br><span class="line">	&#123;<span class="comment">/* 空间不足 */</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; src_len / <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		*dest_str++ = base64_table[(src_str[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>]; <span class="comment">/* 取第一字符前6bit */</span></span><br><span class="line">		*dest_str++ = base64_table[((src_str[<span class="number">0</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x30</span>) | ((src_str[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>)]; <span class="comment">/* 第一字符的后2bit与第二字符的前4位进行合并 */</span></span><br><span class="line">		*dest_str++ = base64_table[((src_str[<span class="number">1</span>] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x3c</span>) | ((src_str[<span class="number">2</span>] &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x03</span>)]; <span class="comment">/* 将第二字符的后4bit与第三字符的前2bit组合并 */</span></span><br><span class="line">		*dest_str++ = base64_table[src_str[<span class="number">2</span>] &amp; <span class="number">0x3f</span>]; <span class="comment">/* 取第三字符的后6bit */</span></span><br><span class="line">		src_str += <span class="number">3</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 非3的整数倍补“=” */</span></span><br><span class="line">	<span class="keyword">if</span> ((src_len % <span class="number">3</span>) == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*dest_str++ = base64_table[(src_str[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">		*dest_str++ = base64_table[((src_str[<span class="number">0</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x30</span>) | ((src_str[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>)];</span><br><span class="line">		*dest_str++ = <span class="string">'='</span>;</span><br><span class="line">		*dest_str++ = <span class="string">'='</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> ((src_len % <span class="number">3</span>) == <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*dest_str++ = base64_table[(src_str[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">		*dest_str++ = base64_table[((src_str[<span class="number">0</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x30</span>) | ((src_str[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>)];</span><br><span class="line">		*dest_str++ = base64_table[(src_str[j + <span class="number">1</span>] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x3c</span>];</span><br><span class="line">		*dest_str++ = <span class="string">'='</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	*dest_str = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">base64_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* src_str, <span class="keyword">uint32_t</span> src_len, <span class="keyword">char</span>* dest_str, <span class="keyword">uint32_t</span> dest_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">uint32_t</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (dest_len &lt; src_get_dest_len(src_len))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (; (src_str[i] != <span class="string">'\0'</span>) &amp;&amp; (i &lt; src_len); i += <span class="number">4</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* 四个码译成三个字符 */</span></span><br><span class="line">		buf[<span class="number">0</span>] = num_strchr(base64_table, src_str[i]);</span><br><span class="line">		buf[<span class="number">1</span>] = num_strchr(base64_table, src_str[i + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">		*dest_str++ = ((buf[<span class="number">0</span>] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xfc</span>) | ((buf[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (src_str[i + <span class="number">2</span>] == <span class="string">'='</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		buf[<span class="number">2</span>] = num_strchr(base64_table, src_str[i + <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">		*dest_str++ = ((buf[<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0xf0</span>) | ((buf[<span class="number">2</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x0f</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (src_str[i + <span class="number">3</span>] == <span class="string">'='</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		buf[<span class="number">3</span>] = num_strchr(base64_table, src_str[i + <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">		*dest_str++ = ((buf[<span class="number">2</span>] &lt;&lt; <span class="number">6</span>) &amp; <span class="number">0xc0</span>) | (buf[<span class="number">3</span>] &amp; <span class="number">0x3f</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	*dest_str = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>* buf = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">uint32_t</span> dest_len, src_len;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">3</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"decode"</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		src_len = <span class="built_in">strlen</span>(argv[<span class="number">2</span>]);</span><br><span class="line">		dest_len = src_get_dest_len(src_len);</span><br><span class="line">		buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(dest_len);</span><br><span class="line">		<span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		base64_decode(argv[<span class="number">2</span>], src_len, buf, dest_len);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"base64 str:%s\n"</span>, argv[<span class="number">2</span>]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"base64_decode str:%s\n"</span>, buf);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"encode"</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		src_len = <span class="built_in">strlen</span>(argv[<span class="number">2</span>]);</span><br><span class="line">		dest_len = base64_get_dest_len(src_len);</span><br><span class="line">		buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(dest_len);</span><br><span class="line">		<span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		base64_encode(argv[<span class="number">2</span>], src_len, buf, dest_len);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"src str:%s\n"</span>, argv[<span class="number">2</span>]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"base64_encode str:%s\n"</span>, buf);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(buf);</span><br><span class="line">	buf = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@Kali:~# gcc 0.c</span><br><span class="line">root@Kali:~# ./a.out decode FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw</span><br><span class="line">base64 str:FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw</span><br><span class="line">base64_decode str:BJD&#123;D0_Y0u_kNoW_Th1s_b4se_map&#125;</span><br></pre></td></tr></table></figure>
<h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>hex编码</p>
<p><code>BJD{We1c0me_t4_BJDCTF}</code></p>
<h2 id="rsa-output"><a href="#rsa-output" class="headerlink" title="rsa_output"></a>rsa_output</h2><p>RSA共模攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n= <span class="number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span></span><br><span class="line">e1= <span class="number">2767</span></span><br><span class="line">e2= <span class="number">3659</span></span><br><span class="line">c1= <span class="number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span></span><br><span class="line">c2= <span class="number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">	s = -s</span><br><span class="line">	c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">	t = -t</span><br><span class="line">	c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure>
<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>n1和n2共用一个q，可以先求最大公约数求出q，然后求出p，然后通过m（或者pow(294,e,n)）可以求出e，就把RSA的所有参数求出来了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span></span><br><span class="line">n1 = <span class="number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span></span><br><span class="line">c3 = <span class="number">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span></span><br><span class="line">c2 = <span class="number">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721</span></span><br><span class="line">n2 = <span class="number">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#q = gmpy2.gcd(n1, n2)</span></span><br><span class="line"><span class="comment">#print q</span></span><br><span class="line"><span class="comment">#p1 = n1 / q</span></span><br><span class="line"><span class="comment">#p2 = n2 / q</span></span><br><span class="line"><span class="comment">#print p1</span></span><br><span class="line"><span class="comment">#print p2</span></span><br><span class="line"></span><br><span class="line">q = <span class="number">99855353761764939308265951492116976798674681282941462516956577712943717850048051273358745095906207085170915794187749954588685850452162165059831749303473106541930948723000882713453679904525655327168665295207423257922666721077747911860159181041422993030618385436504858943615630219459262419715816361781062898911</span></span><br><span class="line">p1 = <span class="number">135283423427545651023916134156519717109709399113553907832988770259402226695880524199087896377303631866790192008529658716376684328032075836094156150811025163336681163420875451747389868549203081743561907379260240665153166927504059379076555558704275659133135906827306189040804323574468819553401905127999523676067</span></span><br><span class="line">p2 = <span class="number">128247614380441198621646495410948309946997239795951661931273072927374035259759992149357909896141726187046548986417994702167046344214464500647935997258628531837792334712721963467008407166687868929005971168361860024531036817205076054969304421022680304986295959208344157424943500032828301016675631415023886775977</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#for e in range(0,100000):</span></span><br><span class="line"><span class="comment">#    if pow(294, e, n1) == c3:</span></span><br><span class="line"><span class="comment">#	print e</span></span><br><span class="line"><span class="comment">#	break</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">52361</span></span><br><span class="line">phi = (p1 - <span class="number">1</span>)*(q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c1, d, n1)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure>
<p>flag: <code>BJD{p_is_common_divisor}</code></p>
<h2 id="easyrsa"><a href="#easyrsa" class="headerlink" title="easyrsa"></a>easyrsa</h2><p>实际上z=p^2+q^2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span></span><br><span class="line">z = <span class="number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span></span><br><span class="line">n = <span class="number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span></span><br><span class="line"></span><br><span class="line">p_and_q = gmpy2.iroot(z + <span class="number">2</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">phi = n - p_and_q + <span class="number">1</span></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure>
<p>flag:<code>BJD{Advanced_mathematics_is_too_hard!!!}</code></p>
<h2 id="Polybius"><a href="#Polybius" class="headerlink" title="Polybius"></a>Polybius</h2><p>棋盘密码，特点：密文长度是明文长度的两倍</p>
<p>密文中只出现了aeiou，解密不对，需要爆破顺序，即5！个,不太会写脚本（菜。。。）</p>
<p>官方wp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line">cipher = <span class="string">"ouauuuoooeeaaiaeauieuooeeiea"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="string">'aeiou'</span>, <span class="number">5</span>):</span><br><span class="line">    key.append(<span class="string">''</span>.join(i))</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> key:</span><br><span class="line">    temp_cipher = <span class="string">""</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> cipher:</span><br><span class="line">        temp_cipher += str(each.index(temp))          </span><br><span class="line"><span class="comment">#这里其实是将字母的表换成数字的表以便后续计算</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(temp_cipher),<span class="number">2</span>):</span><br><span class="line">        current_ascii = int(temp_cipher[i])*<span class="number">5</span>+int(temp_cipher[i+<span class="number">1</span>])+<span class="number">97</span>     </span><br><span class="line"><span class="comment">#因为棋盘密码是采用两位一起表示一个字母</span></span><br><span class="line">        <span class="keyword">if</span> current_ascii&gt;ord(<span class="string">'i'</span>):</span><br><span class="line">            current_ascii+=<span class="number">1</span></span><br><span class="line">        result += chr(current_ascii)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> result:</span><br><span class="line">        print(each,result)</span><br></pre></td></tr></table></figure>
<h1 id="长度14，猜测flag就是flagispolybius"><a href="#长度14，猜测flag就是flagispolybius" class="headerlink" title="长度14，猜测flag就是flagispolybius"></a>长度14，猜测flag就是flagispolybius</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uoaei flagispolybius</span><br><span class="line">uoaie flagkxoplubkyx</span><br></pre></td></tr></table></figure>
<p><code>BJD{flagispolybius}</code></p>
<h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><p>曼彻斯特编码，学习了学习了。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg=<span class="number">0x2559659965656a9a65656996696965a6695669a9695a699569666a5a6a6569666a59695a69aa696569666aa6</span></span><br><span class="line">s=bin(msg)[<span class="number">2</span>:]</span><br><span class="line">r=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)/<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> s[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>] == <span class="string">'10'</span>:</span><br><span class="line">        r += <span class="string">'1'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r += <span class="string">'0'</span></span><br><span class="line">print(hex(int(r,<span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>))</span><br></pre></td></tr></table></figure>
<p>flag:<code>BJD{DifManchestercode}</code></p>
<h2 id="伏羲六十四卦"><a href="#伏羲六十四卦" class="headerlink" title="伏羲六十四卦"></a>伏羲六十四卦</h2><p>这套娃也套得太多了吧。。。</p>
<blockquote>
<p>参考：<a href="https://github.com/BjdsecCA/BJDCTF2020_January" target="_blank" rel="noopener">https://github.com/BjdsecCA/BJDCTF2020_January</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> a2b_hex</span><br><span class="line">enc=<span class="string">'升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有'</span></span><br><span class="line">mydisc=&#123;<span class="string">'坤'</span>: <span class="string">'000000'</span>, <span class="string">'剥'</span>: <span class="string">'000001'</span>, <span class="string">'比'</span>: <span class="string">'000010'</span>, <span class="string">'观'</span>: <span class="string">'000011'</span>, <span class="string">'豫'</span>: <span class="string">'000100'</span>, <span class="string">'晋'</span>: <span class="string">'000101'</span>, <span class="string">'萃'</span>: <span class="string">'000110'</span>, <span class="string">'否'</span>: <span class="string">'000111'</span>, <span class="string">'谦'</span>: <span class="string">'001000'</span>, <span class="string">'艮'</span>: <span class="string">'001001'</span>, <span class="string">'蹇'</span>: <span class="string">'001010'</span>, <span class="string">'渐'</span>: <span class="string">'001011'</span>, <span class="string">'小过'</span>: <span class="string">'001100'</span>, <span class="string">'旅'</span>: <span class="string">'001101'</span>, <span class="string">'咸'</span>: <span class="string">'001110'</span>, <span class="string">'遁'</span>: <span class="string">'001111'</span>, <span class="string">'师'</span>: <span class="string">'010000'</span>, <span class="string">'蒙'</span>: <span class="string">'010001'</span>, <span class="string">'坎'</span>: <span class="string">'010010'</span>, <span class="string">'涣'</span>: <span class="string">'010011'</span>, <span class="string">'解'</span>: <span class="string">'010100'</span>, <span class="string">'未济'</span>: <span class="string">'010101'</span>, <span class="string">'困'</span>: <span class="string">'010110'</span>, <span class="string">'讼'</span>: <span class="string">'010111'</span>, <span class="string">'升'</span>: <span class="string">'011000'</span>, <span class="string">'蛊'</span>: <span class="string">'011001'</span>, <span class="string">'井'</span>: <span class="string">'011010'</span>, <span class="string">'巽'</span>: <span class="string">'011011'</span>, <span class="string">'恒'</span>: <span class="string">'011100'</span>, <span class="string">'鼎'</span>: <span class="string">'011101'</span>, <span class="string">'大过'</span>: <span class="string">'011110'</span>, <span class="string">'姤'</span>: <span class="string">'011111'</span>, <span class="string">'复'</span>: <span class="string">'100000'</span>, <span class="string">'颐'</span>: <span class="string">'100001'</span>, <span class="string">'屯'</span>: <span class="string">'100010'</span>, <span class="string">'益'</span>: <span class="string">'100011'</span>, <span class="string">'震'</span>: <span class="string">'100100'</span>, <span class="string">'噬嗑'</span>: <span class="string">'100101'</span>, <span class="string">'随'</span>: <span class="string">'100110'</span>, <span class="string">'无妄'</span>: <span class="string">'100111'</span>, <span class="string">'明夷'</span>: <span class="string">'101000'</span>, <span class="string">'贲'</span>: <span class="string">'101001'</span>, <span class="string">'既济'</span>: <span class="string">'101010'</span>, <span class="string">'家人'</span>: <span class="string">'101011'</span>, <span class="string">'丰'</span>: <span class="string">'101100'</span>, <span class="string">'离'</span>: <span class="string">'101101'</span>, <span class="string">'革'</span>: <span class="string">'101110'</span>, <span class="string">'同人'</span>: <span class="string">'101111'</span>, <span class="string">'临'</span>: <span class="string">'110000'</span>, <span class="string">'损'</span>: <span class="string">'110001'</span>, <span class="string">'节'</span>: <span class="string">'110010'</span>, <span class="string">'中孚'</span>: <span class="string">'110011'</span>, <span class="string">'归妹'</span>: <span class="string">'110100'</span>, <span class="string">'睽'</span>: <span class="string">'110101'</span>, <span class="string">'兑'</span>: <span class="string">'110110'</span>, <span class="string">'履'</span>: <span class="string">'110111'</span>, <span class="string">'泰'</span>: <span class="string">'111000'</span>, <span class="string">'大畜'</span>: <span class="string">'111001'</span>, <span class="string">'需'</span>: <span class="string">'111010'</span>, <span class="string">'小畜'</span>: <span class="string">'111011'</span>, <span class="string">'大壮'</span>: <span class="string">'111100'</span>, <span class="string">'大有'</span>: <span class="string">'111101'</span>, <span class="string">'夬'</span>: <span class="string">'111110'</span>, <span class="string">'乾'</span>: <span class="string">'111111'</span>&#125;</span><br><span class="line">keys=[<span class="string">'坤'</span>, <span class="string">'剥'</span>, <span class="string">'比'</span>, <span class="string">'观'</span>, <span class="string">'豫'</span>, <span class="string">'晋'</span>, <span class="string">'萃'</span>, <span class="string">'否'</span>, <span class="string">'谦'</span>, <span class="string">'艮'</span>, <span class="string">'蹇'</span>, <span class="string">'渐'</span>, <span class="string">'小过'</span>, <span class="string">'旅'</span>, <span class="string">'咸'</span>, <span class="string">'遁'</span>, <span class="string">'师'</span>, <span class="string">'蒙'</span>, <span class="string">'坎'</span>, <span class="string">'涣'</span>, <span class="string">'解'</span>, <span class="string">'未济'</span>, <span class="string">'困'</span>, <span class="string">'讼'</span>, <span class="string">'升'</span>, <span class="string">'蛊'</span>, <span class="string">'井'</span>, <span class="string">'巽'</span>, <span class="string">'恒'</span>, <span class="string">'鼎'</span>, <span class="string">'大过'</span>, <span class="string">'姤'</span>, <span class="string">'复'</span>, <span class="string">'颐'</span>, <span class="string">'屯'</span>, <span class="string">'益'</span>, <span class="string">'震'</span>, <span class="string">'噬嗑'</span>, <span class="string">'随'</span>, <span class="string">'无妄'</span>, <span class="string">'明夷'</span>, <span class="string">'贲'</span>, <span class="string">'既济'</span>, <span class="string">'家人'</span>, <span class="string">'丰'</span>, <span class="string">'离'</span>, <span class="string">'革'</span>, <span class="string">'同人'</span>, <span class="string">'临'</span>, <span class="string">'损'</span>, <span class="string">'节'</span>, <span class="string">'中孚'</span>, <span class="string">'归妹'</span>, <span class="string">'睽'</span>, <span class="string">'兑'</span>, <span class="string">'履'</span>, <span class="string">'泰'</span>, <span class="string">'大畜'</span>, <span class="string">'需'</span>, <span class="string">'小畜'</span>, <span class="string">'大壮'</span>, <span class="string">'大有'</span>, <span class="string">'夬'</span>, <span class="string">'乾'</span>]</span><br><span class="line"></span><br><span class="line">m=enc</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> keys:</span><br><span class="line">    m=m.replace(each,mydisc[each])</span><br><span class="line">print(m)</span><br><span class="line"> </span><br><span class="line">m1 = <span class="number">0b011000100110110000110001011011110101100001000110001100010111001001100001001100100100011001100010010101110011001001010110011100000101011000110001011001000110011001010101011011010100001001101001010101000011000100110001011001000101100101000101001101010100111001010110010101100110010001011000010100110101010101011010010110010101001101000110010101100100010001010101010000010011110100111101</span></span><br><span class="line"><span class="keyword">print</span> (str(hex(m1)))</span><br><span class="line"><span class="keyword">print</span> (a2b_hex(str(hex(m1)[<span class="number">2</span>::<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line">m2 = <span class="string">'bl1oXF1ra2FbW2VpV1dfUmBiT11dYE5NVVdXSUZYSFVDUA=='</span></span><br><span class="line"><span class="keyword">print</span> (base64.b64decode(m2))</span><br><span class="line"></span><br><span class="line">m3 = <span class="string">'n]h\\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP'</span></span><br><span class="line">m4=<span class="string">''</span></span><br><span class="line">offset=<span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(m3)):</span><br><span class="line">    m4+=chr(ord(m3[i])+offset+i)</span><br><span class="line">print(m4)</span><br><span class="line"></span><br><span class="line">m5 = <span class="string">'scodfuvmhityhirfuxfuvziiruvigzkyhv'</span></span><br><span class="line">b=<span class="number">7</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">9</span>,<span class="number">21</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">25</span>):</span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> m5:</span><br><span class="line">        flag += chr(i*((ord(k)-ord(<span class="string">'a'</span>))-b)%<span class="number">26</span>+ord(<span class="string">'a'</span>))</span><br><span class="line">    print(i,<span class="string">':'</span>,flag)</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">011000100110110000110001011011110101100001000110001100010111001001100001001100100100011001100010010101110011001001010110011100000101011000110001011001000110011001010101011011010100001001101001010101000011000100110001011001000101100101000101001101010100111001010110010101100110010001011000010100110101010101011010010110010101001101000110010101100100010001010101010000010011110100111101</span><br><span class="line">0x626c316f58463172613246625732567056316466556d4269543131645945354e5656645853555a595346564455413d3d</span><br><span class="line">b'bl1oXF1ra2FbW2VpV1dfUmBiT11dYE5NVVdXSUZYSFVDUA=='</span><br><span class="line">b'n]h\\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP'</span><br><span class="line">scodfuvmhityhirfuxfuvziiruvigzkyhv</span><br><span class="line">1 : lvhwynofabmrabkynqynosbbknobzsdrao</span><br><span class="line">9 : vhlqinwtajexajminoinwgjjmnwjrgbxaw</span><br><span class="line">21 : xzruknibavstavcknykniovvcnivfoltai</span><br><span class="line">15 : jdbswncxapyvapuwngwnckppuncplktvac</span><br><span class="line">3 : hlvounqpadkzadeunwunqcddenqdxcjzaq</span><br><span class="line">7 : zrxymnujahgpahsmnimnuwhhsnuhtwvpau</span><br><span class="line">23 : tpfmgnklaxqbaxwgnegnkyxxwnkxdyrbak</span><br><span class="line">19 : bjdcongratulationsongettingtheflag</span><br><span class="line">11 : rxzienydalcfalgenuenyqllgnylpqhfay</span><br><span class="line">5 : dbjgqnszafihafyqncqnsmffynsfvmphas</span><br><span class="line">17 : ftpksneharwdarosnmsneurronerjuzdae</span><br><span class="line">25 : pftecnmvazojazqcnkcnmizzqnmzbixjam</span><br></pre></td></tr></table></figure>
<p>flag:<code>BJD{bjdcongratulationsongettingtheflag}</code></p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="认真你就输了"><a href="#认真你就输了" class="headerlink" title="认真你就输了"></a>认真你就输了</h2><p>解压文档，找一下就找到了flag，charts文件夹下flag：flag{M9eVfi2Pcs&#35;}</p>
<h2 id="你猜我是个啥"><a href="#你猜我是个啥" class="headerlink" title="你猜我是个啥"></a>你猜我是个啥</h2><p>打开压缩包文件报错，16进制看一下，是个png，改后缀，是个二维码，扫描说flag不在这。。。</p>
<p>继续16进制看看，文件底部找到flag:<code>flag{i_am_fl@g}</code></p>
<h2 id="藏藏藏"><a href="#藏藏藏" class="headerlink" title="藏藏藏"></a>藏藏藏</h2><p>给了一张jpg图片，binwalk发现压缩包，foremost解压得到一个文档，打开扫码得到flag:<code>flag{you are the best!}</code></p>
<h2 id="just-a-rar"><a href="#just-a-rar" class="headerlink" title="just_a_rar"></a>just_a_rar</h2><p>4位数密码爆破，得到：2016，解压得到图片，16进制源码得到flag:<code>flag{Wadf_123}</code></p>
<h2 id="一叶障目"><a href="#一叶障目" class="headerlink" title="一叶障目"></a>一叶障目</h2><p>因为我使用的是honeyview查看图片，显示失败，多半是改了png图片的高，010打开，将第二行的01 4C改成03 4C保存，再打开就得到flag:<code>flag{66666}</code></p>
<h2 id="纳尼"><a href="#纳尼" class="headerlink" title="纳尼"></a>纳尼</h2><p>gif文件打不开，多半是16进制源码出问题了，打开看到少了gif的文件头，添加上47 49 46 38后保存，打开看到字符串，记录下来<code>Q1RGe3dhbmdfYmFvX3FpYW5nX2lzX3NhZH0=</code></p>
<p>base64:<code>CTF{wang_bao_qiang_is_sad}</code></p>
<h2 id="鸡你太美"><a href="#鸡你太美" class="headerlink" title="鸡你太美"></a>鸡你太美</h2><p>给了两张gif，一个打不开，直接010,看到，第二张少了文件头，加上之后得到<br>flag:<code>flag{zhi_yin_you_are_beautiful}</code></p>
]]></content>
      <tags>
        <tag>MISC</tag>
        <tag>CRYPTO</tag>
        <tag>BUU</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF Crypto部分wp</title>
    <url>/2020/02/21/BUUCTF-Crypto%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<p>记录一些密码学简单的题目，仅供参考</p>
<a id="more"></a>
<h1 id="1-MD5"><a href="#1-MD5" class="headerlink" title="1.MD5"></a>1.MD5</h1><p>直接md5解密<a href="https://www.cmd5.com/" target="_blank" rel="noopener">https://www.cmd5.com/</a></p>
<h1 id="2-看我回旋踢"><a href="#2-看我回旋踢" class="headerlink" title="2.看我回旋踢"></a>2.看我回旋踢</h1><p>一看就是凯撒密码，直接凯撒解密<a href="http://www.nicetool.net/embed/caesar_decrypt.html" target="_blank" rel="noopener">http://www.nicetool.net/embed/caesar_decrypt.html</a></p>
<h1 id="3-Url编码"><a href="#3-Url编码" class="headerlink" title="3.Url编码"></a>3.Url编码</h1><p>Url解密<a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/urlencode.aspx</a></p>
<h1 id="4-一眼就解密"><a href="#4-一眼就解密" class="headerlink" title="4.一眼就解密"></a>4.一眼就解密</h1><p>一眼就看出base64编码，解密<a href="http://ctf.ssleye.com/base64.html" target="_blank" rel="noopener">http://ctf.ssleye.com/base64.html</a></p>
<h1 id="5-摩丝"><a href="#5-摩丝" class="headerlink" title="5.摩丝"></a>5.摩丝</h1><p>摩斯密码<a href="http://www.ip138.com/mosi/" target="_blank" rel="noopener">http://www.ip138.com/mosi/</a></p>
<h1 id="6-变异凯撒"><a href="#6-变异凯撒" class="headerlink" title="6.变异凯撒"></a>6.变异凯撒</h1><p>既然是凯撒加密，就先看看密文：有小写字母，大写字母，”_”，”^”，还有数字，可能是按照ASCII码表移位的，’a’的ASCII值为97，’f’为102，a-&gt;f的ASCII值增加了5；’l’为108，f-&gt;l的ASCII值增加了6；’Z’为90，Z-&gt;a的ASCII值增加了7；之后的每次移位增加1，所以写个脚本<br>    <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">"afZ_r9VYfScOeO_UL^RWUc"</span></span><br><span class="line">res =<span class="string">""</span></span><br><span class="line">j = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    res += chr(ord(i) + j)</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><br>运行一下即得flag</p>
<h1 id="7-Quoted-printable"><a href="#7-Quoted-printable" class="headerlink" title="7.Quoted-printable"></a>7.Quoted-printable</h1><p>Quoted-printable编码<a href="http://ctf.ssleye.com/quoted.html" target="_blank" rel="noopener">http://ctf.ssleye.com/quoted.html</a></p>
<h1 id="8-password"><a href="#8-password" class="headerlink" title="8.password"></a>8.password</h1><p>弱密码，猜测flag为zs19900315</p>
<h1 id="9-zip伪加密"><a href="#9-zip伪加密" class="headerlink" title="9.zip伪加密"></a>9.zip伪加密</h1><p>懒得写了，可以参考一下这篇文章<a href="https://blog.csdn.net/qq_26187985/article/details/83654197" target="_blank" rel="noopener">https://blog.csdn.net/qq_26187985/article/details/83654197</a><br>（还有更简单的，直接在Linux系统下提取文件，zip伪加密能够直接提取出来的）</p>
<h1 id="10-Rabbit"><a href="#10-Rabbit" class="headerlink" title="10.Rabbit"></a>10.Rabbit</h1><p>Rabbit密码<a href="https://www.sojson.com/encrypt_rabbit.html" target="_blank" rel="noopener">https://www.sojson.com/encrypt_rabbit.html</a></p>
<h1 id="11-丢失的MD5"><a href="#11-丢失的MD5" class="headerlink" title="11.丢失的MD5"></a>11.丢失的MD5</h1><p>运行一遍程序就得到了flag，展示的是md5的爆破（后面的还原大师就可以用这个）</p>
<h1 id="12-篱笆墙的影子"><a href="#12-篱笆墙的影子" class="headerlink" title="12.篱笆墙的影子"></a>12.篱笆墙的影子</h1><p>篱笆-&gt;栅栏，栅栏密码<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/zhalanmima.php</a></p>
<h1 id="13-Alice与Bob"><a href="#13-Alice与Bob" class="headerlink" title="13.Alice与Bob"></a>13.Alice与Bob</h1><p>在线分解<a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a>，然后再md5<a href="https://www.cmd5.com/" target="_blank" rel="noopener">https://www.cmd5.com/</a></p>
<h1 id="14-传统知识-古典密码"><a href="#14-传统知识-古典密码" class="headerlink" title="14.传统知识+古典密码"></a>14.传统知识+古典密码</h1><p>百度得到每一个年份代表的具体数字，然后“+甲子”就是指加60，之后得到88 90 83 68 77 70 76 90通过ASCII码查表之后得到XZSDMFLZ，在试一试栅栏和凯撒，发现先栅栏（XMZFSLDZ）后凯撒（SHUANGYU）得到flag</p>
<h1 id="15-大帝的密码武器"><a href="#15-大帝的密码武器" class="headerlink" title="15.大帝的密码武器"></a>15.大帝的密码武器</h1><p>古罗马大帝-&gt;凯撒-&gt;凯撒密码，先解密FRPHEVGL，解出来security，移动14位，然后在用这个来加密ComeChina，不过要注意大小写</p>
<h1 id="16-Windows系统密码"><a href="#16-Windows系统密码" class="headerlink" title="16.Windows系统密码"></a>16.Windows系统密码</h1><p>Linux的shadow文件，把这几个都用md5查询一遍，发现密码是：a7fcb22a88038f35a8f39d503e7f0062，解出：good-luck</p>
<h1 id="17-凯撒？替换？呵呵"><a href="#17-凯撒？替换？呵呵" class="headerlink" title="17.凯撒？替换？呵呵!"></a>17.凯撒？替换？呵呵!</h1><p>替换密码，直接在线破解<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a>（在Clues处填MTHJ=flag）</p>
<h1 id="18-信息化时代的步伐"><a href="#18-信息化时代的步伐" class="headerlink" title="18.信息化时代的步伐"></a>18.信息化时代的步伐</h1><p>中文电码直接破解<a href="http://code.mcdvisa.com/" target="_blank" rel="noopener">http://code.mcdvisa.com/</a></p>
<h1 id="19-old-fashion"><a href="#19-old-fashion" class="headerlink" title="19.old-fashion"></a>19.old-fashion</h1><p>同样是替换密码，直接在线破解<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p>
<pre><code>?l fog?vryoe?sg, e h?dhv?v?v?rl f??sao ?h e ?avsrb rc alfrb?ly dg ?s?fs ?l?vh rc ?ne?lvaiv eoa oa?nefab ??vs f??saovaiv, effrob?ly vr e oay?neo hghva?; the units may be single letters (the most common), pairs of letters, triplets of letters, mi?tures of the above, and so forth. The receiver deciphers the te?t by performing an inverse substitution. So the flag is n1_2hen-d3_hu1-mi-ma_a
</code></pre><h1 id="20-robomunication"><a href="#20-robomunication" class="headerlink" title="20.robomunication"></a>20.robomunication</h1><p>仔细一听，像是摩斯密码，将’b’换成’.’，’p’换成’_’，得到<br>    …. . .-.. .-.. —- .— …. .- - .. … - …. . -.- . -.— .. - .. … -… —- —- .—. -… . . .—.<br>解密得到<br>    HELLOWHATISTHEKEYITISBOOPBEEP</p>
<h1 id="21-世上无难事"><a href="#21-世上无难事" class="headerlink" title="21.世上无难事"></a>21.世上无难事</h1><p>词频分析<a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p>
<h1 id="22-萌萌哒的八戒"><a href="#22-萌萌哒的八戒" class="headerlink" title="22.萌萌哒的八戒"></a>22.萌萌哒的八戒</h1><p>猪圈密码<a href="http://ctf.ssleye.com/pigpen.html" target="_blank" rel="noopener">http://ctf.ssleye.com/pigpen.html</a></p>
<h1 id="23-权限获得第一步"><a href="#23-权限获得第一步" class="headerlink" title="23.权限获得第一步"></a>23.权限获得第一步</h1><p>和之前的Windows系统密码一样的道理</p>
<h1 id="24-异性相吸"><a href="#24-异性相吸" class="headerlink" title="24.异性相吸"></a>24.异性相吸</h1><p>异或，直接上脚本<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'密文.txt'</span> )<span class="keyword">as</span> a:</span><br><span class="line">    a=a.read()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'key.txt'</span> )<span class="keyword">as</span> b:</span><br><span class="line">    b=b.read()</span><br><span class="line">d=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(b)):</span><br><span class="line">    c=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    d+=c</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure></p>
<h1 id="25-还原大师"><a href="#25-还原大师" class="headerlink" title="25.还原大师"></a>25.还原大师</h1><p>就用之前丢失的md5中给出的脚本，换一下数据即可</p>
<h1 id="26-Cipher"><a href="#26-Cipher" class="headerlink" title="26.Cipher"></a>26.Cipher</h1><p>本来没啥思路的，看到那句“公平的玩吧（密钥自己找）”，公平：fair，估计是playfair，密钥就猜是playfair，然后在线解密 <a href="http://rumkin.com/tools/cipher/playfair.php" target="_blank" rel="noopener">http://rumkin.com/tools/cipher/playfair.php</a></p>
<h1 id="27-这是什么"><a href="#27-这是什么" class="headerlink" title="27.这是什么"></a>27.这是什么</h1><p>用16进制编译器（winhex，010Editor）打开，可以看到一大堆括号，感叹号，复制下来，直接放在浏览器的命令行（console）中，得到flag<br>（我记得有一大串FFFFFFF的文件是word文件，也可以直接把文件后缀名改成.doc，打开也能看到文本）</p>
<h1 id="28-Unencode"><a href="#28-Unencode" class="headerlink" title="28.Unencode"></a>28.Unencode</h1><p>UUencode<a href="http://ctf.ssleye.com/uu.html" target="_blank" rel="noopener">http://ctf.ssleye.com/uu.html</a></p>
]]></content>
      <tags>
        <tag>CRYPTO</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF Misc部分wp（一）</title>
    <url>/2020/02/05/BUUCTF-Misc%E9%83%A8%E5%88%86wp%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>最近开始刷<a href="https://buuoj.cn/" target="_blank" rel="noopener">BUUCTF</a>，感觉题目比较基础，而且这还有许多比赛题目的复现。<br>这里将记录一些简单的MISC题目，较难的题目将单独写出来。</p>
<a id="more"></a>
<h2 id="1-金三胖"><a href="#1-金三胖" class="headerlink" title="1.金三胖"></a>1.金三胖</h2><p>题目给出了一张gif图，放入Stegsolve中逐帧查看，得到flag</p>
<h2 id="2-二维码"><a href="#2-二维码" class="headerlink" title="2.二维码"></a>2.二维码</h2><p>一张二维码，首先扫描一下，明显不是flag，在kali中binwalk分析一波<br>发现一个压缩包，使用foremost命令或者binwalk -e命令将压缩包提取出来发现是一个密码为四位数字的压缩包<br>fcrackzip -b -c1 -l 4 -u爆破得到flag</p>
<h2 id="3-N种解决方法"><a href="#3-N种解决方法" class="headerlink" title="3.N种解决方法"></a>3.N种解决方法</h2><p>下载后发现是一个exe文件，但打不开，使用任意一个文本编译器打开发现是将图片转base64了，把内容复制再转回图片<a href="http://tool.chinaz.com/tools/imgtobase" target="_blank" rel="noopener" title="http://tool.chinaz.com/tools/imgtobase">http://tool.chinaz.com/tools/imgtobase</a>，是一个二维码，扫码得到flag</p>
<h2 id="4-大白"><a href="#4-大白" class="headerlink" title="4.大白"></a>4.大白</h2><p>题目说屏幕太小了<br>估计是改了图片长宽，用winhex打开图片，将01 00改为02 00（对于png文件，其第二行第六列是高度位，改这一位即可）<br>得到flag</p>
<h2 id="5-基础破解"><a href="#5-基础破解" class="headerlink" title="5.基础破解"></a>5.基础破解</h2><p>暴力破解，使用ARCHPR破解，得到flag</p>
<h2 id="6-你竟然赶我走"><a href="#6-你竟然赶我走" class="headerlink" title="6.你竟然赶我走"></a>6.你竟然赶我走</h2><p>winhex下分析，发现flag  </p>
<h2 id="7-LSB"><a href="#7-LSB" class="headerlink" title="7.LSB"></a>7.LSB</h2><p>看到LSB，将图片放入Stegsolve中Data Extract分析<br>保存为png后是一张二维码，扫码得到flag</p>
<h2 id="8-乌镇峰会种图"><a href="#8-乌镇峰会种图" class="headerlink" title="8.乌镇峰会种图"></a>8.乌镇峰会种图</h2><p>同样是winhex下分析，发现flag</p>
<h2 id="9-rar"><a href="#9-rar" class="headerlink" title="9.rar"></a>9.rar</h2><p>ARCHPR破解，得到flag</p>
<h2 id="10-ningen"><a href="#10-ningen" class="headerlink" title="10.ningen"></a>10.ningen</h2><p>同之前的二维码一样解法</p>
<h2 id="11-文件中的秘密"><a href="#11-文件中的秘密" class="headerlink" title="11.文件中的秘密"></a>11.文件中的秘密</h2><p>winhex下分析，发现flag</p>
<h2 id="12-wireshark"><a href="#12-wireshark" class="headerlink" title="12.wireshark"></a>12.wireshark</h2><p>题目给出的是pcap流量包，使用wireshark打开查看http的包<br>搜索flag</p>
<h2 id="13-镜子里面的世界"><a href="#13-镜子里面的世界" class="headerlink" title="13.镜子里面的世界"></a>13.镜子里面的世界</h2><p>将图片放入Stegsolve中，发现Red、Green和Blue的0通道的图片的最上端有东西<br>接下来用Data Extract查看这三个通道结合起来的东西，发现flag  </p>
<h2 id="14-小明的保险箱"><a href="#14-小明的保险箱" class="headerlink" title="14.小明的保险箱"></a>14.小明的保险箱</h2><p>同之前的二维码一样解法</p>
<h2 id="15-爱因斯坦"><a href="#15-爱因斯坦" class="headerlink" title="15.爱因斯坦"></a>15.爱因斯坦</h2><p>同样是binwalk分析后分离出压缩包，不过解压密码在图片备注中</p>
<h2 id="16-被嗅探的流量"><a href="#16-被嗅探的流量" class="headerlink" title="16.被嗅探的流量"></a>16.被嗅探的流量</h2><p>使用wireshark追踪TCP流，查找得到flag  </p>
<h2 id="17-假如给我三天光明"><a href="#17-假如给我三天光明" class="headerlink" title="17.假如给我三天光明"></a>17.假如给我三天光明</h2><p>给了一张图和一个压缩包，图片下估计为盲文，猜测为压缩包密码<br>盲文解密为：kmdonowg，解压出一段音频，一听为摩斯密码，使用Audacity分析<br>摩斯解密，得flag</p>
<h2 id="18-easycap"><a href="#18-easycap" class="headerlink" title="18.easycap"></a>18.easycap</h2><p>wireshark追踪TCP流，直接得到flag  </p>
<h2 id="19-FLAG"><a href="#19-FLAG" class="headerlink" title="19.FLAG"></a>19.FLAG</h2><p>winhex，binwalk后无结果，将图片放入Stegsolve中<br>保存为zip文件，解压后为.elf文件，kali运行得flag<br>（chmod a+x a.txt 等价于 chmod +x a.txt，给所有用户给予a.txt文件可执行权限）</p>
<h2 id="20-另外一个世界"><a href="#20-另外一个世界" class="headerlink" title="20.另外一个世界"></a>20.另外一个世界</h2><p>winhex下发现一串二进制码，估计是ascii码，8个一组，翻译后得到flag</p>
<h2 id="21-荷兰宽带数据泄露"><a href="#21-荷兰宽带数据泄露" class="headerlink" title="21.荷兰宽带数据泄露"></a>21.荷兰宽带数据泄露</h2><p>下载解压后得到一个路由器配置文件，使用RouterPassView打开后搜索不到flag，再试试username或者password，结果flag是username  </p>
<h2 id="22-隐藏的钥匙"><a href="#22-隐藏的钥匙" class="headerlink" title="22.隐藏的钥匙"></a>22.隐藏的钥匙</h2><p>winhex下打开文件，搜索发现flag是base64编码，在线解码一下得到flag</p>
<h2 id="23-来首歌吧"><a href="#23-来首歌吧" class="headerlink" title="23.来首歌吧"></a>23.来首歌吧</h2><p>得到一段音频，使用Audacity分析，发现摩斯密码，解码得到flag</p>
<h2 id="24-后门查杀"><a href="#24-后门查杀" class="headerlink" title="24.后门查杀"></a>24.后门查杀</h2><p>webshell会报病毒，随便拿杀毒软件一个扫描一下，就得到目的文件<br>文件打开就得到flag</p>
<h2 id="25-神秘龙卷风"><a href="#25-神秘龙卷风" class="headerlink" title="25.神秘龙卷风"></a>25.神秘龙卷风</h2><p>解压得到一压缩包，提示说密码四位数，ARCHPR破解，打开文件发现是Brainfuck编码，<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">在线解码</a></p>
<h2 id="26-面具下的flag"><a href="#26-面具下的flag" class="headerlink" title="26.面具下的flag"></a>26.面具下的flag</h2><p>解压得到的图片binwalk分析发现压缩包，foremost解压后得到一个flag.vmdk的文件（老实说vmdk我也没怎么见过，于是就看了看网上的wp），使用7z解压<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7z x flag.vmdk</span><br></pre></td></tr></table></figure><br>解压后得到flag的两部分，ook与Brainfuck<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">在线解码</a><br>（不太明白为什么7z能解压vmdk文件，而且有趣的是我在Windows下解压不能解压出flag后半段密码，在kali下却能。。。）</p>
<h2 id="27-webshell后门"><a href="#27-webshell后门" class="headerlink" title="27.webshell后门"></a>27.webshell后门</h2><p>和后门查杀那题一样，杀毒软件一扫完事~~~</p>
<h2 id="28-被劫持的神秘礼物"><a href="#28-被劫持的神秘礼物" class="headerlink" title="28.被劫持的神秘礼物"></a>28.被劫持的神秘礼物</h2><p>wireshark打开查询TCP流，发现账号密码，串一起再md5  </p>
<h2 id="29-刷新过的图片"><a href="#29-刷新过的图片" class="headerlink" title="29.刷新过的图片"></a>29.刷新过的图片</h2><p>（知识盲区，唉~~~）<br>F5隐写，参考论文：<a href="https://wenku.baidu.com/view/c9150e29b4daa58da0114a39.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/c9150e29b4daa58da0114a39.html</a><br>解题时就直接使用：F5-steganography<br>解压出来一个output.txt，打开一看PK开头，估计是zip，改后缀名，解压后得到flag</p>
<h2 id="30-穿越时空的思恋"><a href="#30-穿越时空的思恋" class="headerlink" title="30.穿越时空的思恋"></a>30.穿越时空的思恋</h2><p>又是一段音频，Audacity分析，发现摩斯密码，解码得到flag</p>
]]></content>
      <tags>
        <tag>MISC</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF Misc部分wp（二）</title>
    <url>/2020/02/12/BUUCTF-Misc%E9%83%A8%E5%88%86wp%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>涉及的知识点：  </p>
<ul>
<li>英语┭┮﹏┭┮</li>
<li>gnuplot的使用</li>
<li>steghide隐写</li>
<li>lsb隐写</li>
</ul>
<a id="more"></a>
<h1 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h1><p>得到一张图片，发现zip，foremost解压<br>得到密钥和一份已加密的文件，将密钥base64解码后<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">What is Nicki Minaj&#39;s favorite song that refers to snakes?</span><br></pre></td></tr></table></figure><br>密钥就是anaconda，那么关于蛇的加密方式就是serpent加密（也是关于蛇的单词┭┮﹏┭┮，记得在密码学课上讲过，好像是AES竞选之一，但忘完了(⊙o⊙)…）<br>在线解密：<a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">http://serpent.online-domain-tools.com/</a>  </p>
<h1 id="梅花香自苦寒来"><a href="#梅花香自苦寒来" class="headerlink" title="梅花香自苦寒来"></a>梅花香自苦寒来</h1><p>winhex下发现大量数据，猜测是hex编码<br>随便使用一个16进制编译器将这些编码保存，我这使用的是HxD<br>然后写脚本将它们转成ASCII码（个人比较懒，直接<a href="http://stool.chinaz.com/hex" target="_blank" rel="noopener">在线解码</a>了）<br>然后发现是一大堆坐标，使用gnuplot绘制图片，首先还是要写脚本将坐标转成gnuplot能识别的形式（除去“（”，“，”和“）”）  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> a:</span><br><span class="line">	a = a.read()</span><br><span class="line">b = open(<span class="string">'2.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.split(<span class="string">'\n'</span>):</span><br><span class="line">	b.write(i.lstrip(<span class="string">'('</span>).rstrip(<span class="string">')'</span>).replace(<span class="string">','</span>,<span class="string">' '</span>)+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<p>最后扫码得到flag</p>
<h1 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h1><p>binwalk先分析发现zip，解压出来发现一张图片需要密码，而压缩包不用，用winhex打开发现是一个伪加密（<a href="https://blog.csdn.net/qq_26187985/article/details/83654197" target="_blank" rel="noopener">伪加密具体详情</a>），此处将01 08改为00 08<br>解压出的图片应该就是flag压缩包密码的线索，然后对这个图片各种分析无果，最后去看了其他大佬的wp，才知道一个隐写神器：steghide（<a href="https://blog.csdn.net/Blood_Seeker/article/details/81837571" target="_blank" rel="noopener">详情</a>）  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将secret.txt文件隐藏到a.jpg中：</span><br><span class="line">#steghide embed -cf a.jpg -ef secret.txt -p 123</span><br><span class="line">（-p表示密码）</span><br><span class="line">从a.jpg解出secret.txt：</span><br><span class="line">#steghide extract -sf a.jpg -p 123</span><br></pre></td></tr></table></figure>
<p>这题没有说要密码，直接提取出ko.txt，解压后得到flag</p>
<h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><p>本以为真的是弱口令，找了个字典爆破，爆破不出来，然后打开压缩包发现注释（看了好久。。。）<br>保存到sublime，是摩斯密码，解密后发现还是打不开压缩包，把字母换成大写就打开了，然后得到一张图片。。。<br>看了半天也分析不出来个啥，就去看了看wp，原来是lsb隐写，那就直接GitHub上的一个工具<a href="https://github.com/livz/cloacked-pixel" target="_blank" rel="noopener">https://github.com/livz/cloacked-pixel</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python lsb.py extract 女神.png 0.txt 123456</span><br><span class="line">弱密码猜123456</span><br></pre></td></tr></table></figure><br>得到0.txt打开即有flag</p>
]]></content>
      <tags>
        <tag>MISC</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF MISC zip</title>
    <url>/2020/02/16/BUUCTF-MISC-zip/</url>
    <content><![CDATA[<p>在刷BUU时碰到这题(<a href="https://buuoj.cn/challenges#zip" target="_blank" rel="noopener">题目地址</a>)，题目给出了许多压缩包，但是没有一点头绪，看了看别人的wp才知道是crc爆破，在此记录一下这个知识点。</p>
<a id="more"></a>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>CRC全称Cyclic Redundancy Check，也就是循环冗余校验码，是一种能力相当强的检错、纠错码，并且实现编码和检码的电路比较简单，常用于串行传送（二进制位串沿一条信号线逐位传送）的辅助存储器与主机的数据通信和计算机网络中。<br>总而言之，就是每一个文件都有它唯一的CRC32值，即便数据中一个bit发生变化，也会导致CRC32值不同。若是知道一段数据的长度和CRC32值，便可穷举数据，与其CRC32对照，以此达到暴力猜解的目的。但通常只适用于较小文本文件。<br>自己写的脚本总出错，于是借用了大佬的脚本<a href="https://blog.csdn.net/u011377996/article/details/79360820" target="_blank" rel="noopener">https://blog.csdn.net/u011377996/article/details/79360820</a>  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span><span class="params">(crc)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic: </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + j + k + h</span><br><span class="line">                    <span class="keyword">if</span> crc == (binascii.crc32(s.encode())):</span><br><span class="line">                        f.write(s)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackZip</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">68</span>):</span><br><span class="line">            file = <span class="string">'out'</span>+str(i)+<span class="string">'.zip'</span></span><br><span class="line">            crc = zipfile.ZipFile(file,<span class="string">'r'</span>).getinfo(<span class="string">'data.txt'</span>).CRC</span><br><span class="line">            CrackCrc(crc)</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">'+/='</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'out.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">CrackZip()</span><br><span class="line">print(<span class="string">"CRC32碰撞完成"</span>)</span><br><span class="line">f.close</span><br></pre></td></tr></table></figure>
<p>碰撞完成后得到一串base64编码，解码一看，要修复文件<br>查了点资料后发现这是一个rar压缩包 <a href="https://blog.csdn.net/vevenlcf/article/details/51538837" target="_blank" rel="noopener">https://blog.csdn.net/vevenlcf/article/details/51538837</a>，<br>修改一下文件，在文件前面加上补上52 61 72 21 1A 07 00 后保存<br>打开压缩包一看，在备注处看到flag</p>
]]></content>
      <tags>
        <tag>MISC</tag>
      </tags>
  </entry>
  <entry>
    <title>MRCTF2020 Misc&amp;Crypto部分Write Up</title>
    <url>/2020/04/30/MRCTF2020-Misc-Crypto%E9%83%A8%E5%88%86WriteUp/</url>
    <content><![CDATA[<p>还是太菜，害</p>
<blockquote>
<p>复现：<a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">https://buuoj.cn/challenges</a></p>
</blockquote>
<a id="more"></a>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="天干地支-甲子"><a href="#天干地支-甲子" class="headerlink" title="天干地支+甲子"></a>天干地支+甲子</h2><p>查一下每一个代表的数字，然后加上60（甲子），ASCII转一下就ok</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a= [<span class="number">11</span>, <span class="number">51</span>,<span class="number">51</span>,<span class="number">40</span>,<span class="number">46</span>,<span class="number">51</span>,<span class="number">38</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join(chr(i+<span class="number">60</span>) <span class="keyword">for</span> i <span class="keyword">in</span> a)</span><br></pre></td></tr></table></figure>
<p><code>MRCTF{Goodjob}</code></p>
<h2 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h2><p>键盘密码，手机9键走起</p>
<p>解出来是mobilephond，改一下mobilephone</p>
<p><code>MRCTF{mobilephone}</code></p>
<h2 id="古典密码知多少"><a href="#古典密码知多少" class="headerlink" title="古典密码知多少"></a>古典密码知多少</h2><p>蓝色：猪圈密码，黄色：圣武士堂密码，黑色：银河密码</p>
<p>解出来：FGCPFLIRTUASYON</p>
<p>然后栅栏一下：FLAGISCRYPTOFUN</p>
<p>最后<code>MRCTF{CRYPTOFUN}</code></p>
<h2 id="vigenere"><a href="#vigenere" class="headerlink" title="vigenere"></a>vigenere</h2><p>直接在线解密：<a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="noopener">https://www.guballa.de/vigenere-solver</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a declaration of the independence of cyberspace</span><br><span class="line">by john perry barlow </span><br><span class="line">governments of the industrial world, you weary giants of flesh and steel, i come from cyberspace, the new home of mind. on behalf of the future, i ask you of the past to leave us alone. you are not welcome among us. you have no sovereignty where we gather.</span><br><span class="line">we have no elected government, nor are we likely to have one, so i address you with no greater authority than that with which liberty itself always speaks. i declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. you have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.</span><br><span class="line">governments derive their just powers from the consent of the governed. you have neither solicited nor received ours. we did not invite you. you do not know us, nor do you know our world. cyberspace does not lie within your borders. do not think that you can build it, as though it were a public construction project. you cannot. it is an act of nature and it grows itself through our collective actions.</span><br><span class="line">you have not engaged in our great and gathering conversation, nor did you create the wealth of our marketplaces. you do not know our culture, our ethics, or the unwritten codes that already provide our society more order than could be obtained by any of your impositions.</span><br><span class="line">you claim there are problems among us that you need to solve. you use this claim as an excuse to invade our precincts. many of these problems don&#39;t exist. where there are real conflicts, where there are wrongs, we will identify them and address them by our means. we are forming our own social contract. this governance will arise according to the conditions of our world, not yours. our world is different.</span><br><span class="line">cyberspace consists of transactions, relationships, and thought itself, arrayed like a standing wave in the web of our communications. ours is a world that is both everywhere and nowhere, but it is not where bodies live.</span><br><span class="line">we are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.</span><br><span class="line">we are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.</span><br><span class="line">your legal concepts of property, expression, identity, movement, and context do not apply to us. they are all based on matter, and there is no matter here.</span><br><span class="line">our identities have no bodies, so, unlike you, we cannot obtain order by physical coercion. we believe that from ethics, enlightened self-interest, and the commonweal, our governance will emerge. our identities may be distributed across many of your jurisdictions. the only law that all our constituent cultures would generally recognize is the golden rule. we hope we will be able to build our particular solutions on that basis. but we cannot accept the solutions you are attempting to impose.</span><br><span class="line">in the united states, you have today created a law, the telecommunications reform act, which repudiates your own constitution and insults the dreams of jefferson, washington, mill, madison, detoqueville, and brandeis. these dreams must now be born anew in us.</span><br><span class="line">you are terrified of your own children, since they are natives in a world where you will always be immigrants. because you fear them, you entrust your bureaucracies with the parental responsibilities you are too cowardly to confront yourselves. in our world, all the sentiments and expressions of humanity, from the debasing to the angelic, are parts of a seamless whole, the global conversation of bits. we cannot separate the air that chokes from the air upon which wings beat.</span><br><span class="line">in china, germany, france, russia, singapore, italy and the united states, you are trying to ward off the virus of liberty by erecting guard posts at the frontiers of cyberspace. these may keep out the contagion for a small time, but they will not work in a world that will soon be blanketed in bit-bearing media.</span><br><span class="line">your increasingly obsolete information industries would perpetuate themselves by proposing laws, in america and elsewhere, that claim to own speech itself throughout the world. these laws would declare ideas to be another industrial product, no more noble than pig iron. in our world, whatever the human mind may create can be reproduced and distributed infinitely at no cost. the global conveyance of thought no longer requires your factories to accomplish.</span><br><span class="line">these increasingly hostile and colonial measures place us in the same position as those previous lovers of freedom and self-determination who had to reject the authorities of distant, uninformed powers. we must declare our virtual selves immune to your sovereignty, even as we continue to consent to your rule over our bodies. we will spread ourselves across the planet so that no one can arrest our thoughts.</span><br><span class="line">we will create a civilization of the mind in cyberspace. may it be more humane and fair than the world your governments have made before.</span><br><span class="line">flag is mrctf vigenere crypto crack man, please add underscore and curly braces.</span><br></pre></td></tr></table></figure>
<p>flag:<code>MRCTF{vigenere_crypto_crack_man}</code></p>
<h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><p>看了一下源代码，找到p和q就行，然后先看p</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_p</span><span class="params">()</span>:</span></span><br><span class="line">    P = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>)]</span><br><span class="line">    P[<span class="number">0</span>] = getPrime(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">        P[i] = sympy.nextprime(P[i<span class="number">-1</span>])</span><br><span class="line">    print(<span class="string">"P_p :"</span>, P[<span class="number">9</span>])</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">        n *= P[i]</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    factor = pow(p, base, n)</span><br><span class="line">    print(<span class="string">"P_factor :"</span>, factor)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(p)</span><br></pre></td></tr></table></figure>
<p>因为已经给出了P[9]，而且使用的是nextprime()，即可以将数组测试出来，这样就得到了这里面的n，从而得到后面需要的p</p>
<p>然后看q</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_q</span><span class="params">()</span>:</span></span><br><span class="line">    sub_Q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q_1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q_2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q = sub_Q ** Q_2 % Q_1</span><br><span class="line">    print(<span class="string">"Q_1: "</span>, Q_1)</span><br><span class="line">    print(<span class="string">"Q_2: "</span>, Q_2)</span><br><span class="line">    print(<span class="string">"sub_Q: "</span>, sub_Q)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(Q)</span><br></pre></td></tr></table></figure>
<p>直接使用pow(sub_Q,Q-2,Q_1)得到Q，然后nextprime得到q<br>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">factor = <span class="number">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class="line"></span><br><span class="line">p = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>)]</span><br><span class="line">p[<span class="number">0</span>]=<span class="number">206027926847308612719677572554991142909</span></span><br><span class="line">p[<span class="number">1</span>]=<span class="number">206027926847308612719677572554991142911</span></span><br><span class="line">p[<span class="number">2</span>]=<span class="number">206027926847308612719677572554991142977</span></span><br><span class="line">p[<span class="number">3</span>]=<span class="number">206027926847308612719677572554991143071</span></span><br><span class="line">p[<span class="number">4</span>]=<span class="number">206027926847308612719677572554991143103</span></span><br><span class="line">p[<span class="number">5</span>]=<span class="number">206027926847308612719677572554991143121</span></span><br><span class="line">p[<span class="number">6</span>]=<span class="number">206027926847308612719677572554991143133</span></span><br><span class="line">p[<span class="number">7</span>]=<span class="number">206027926847308612719677572554991143317</span></span><br><span class="line">p[<span class="number">8</span>]=<span class="number">206027926847308612719677572554991143401</span></span><br><span class="line">p[<span class="number">9</span>]=<span class="number">206027926847308612719677572554991143421</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">17</span>):</span><br><span class="line">    p[i]=sympy.nextprime(p[i<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">        x= n*p[i]</span><br><span class="line">        n=x</span><br><span class="line">phi=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">17</span>):</span><br><span class="line">    phi *=p[i]<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print n</span></span><br><span class="line"><span class="comment">#print sympy.nextprime(n)</span></span><br><span class="line">d1 = gmpy2.invert(e,phi)</span><br><span class="line">p = pow(factor, d1, n)</span><br><span class="line">p = sympy.nextprime(p)</span><br><span class="line"><span class="keyword">print</span> p</span><br><span class="line"></span><br><span class="line">Q_1 = <span class="number">103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span></span><br><span class="line">Q_2 =  <span class="number">151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span></span><br><span class="line">sub_Q = <span class="number">168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span></span><br><span class="line">Q = pow(sub_Q, Q_2, Q_1)</span><br><span class="line">q = sympy.nextprime(Q)</span><br><span class="line"><span class="keyword">print</span> q</span><br><span class="line"></span><br><span class="line">c = <span class="number">1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span></span><br><span class="line"></span><br><span class="line">ph = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, ph)</span><br><span class="line">m = pow(c, d, p*q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br><span class="line"><span class="comment"># flag：MRCTF&#123;sti11_@_b@by_qu3st10n&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy_RSA"></a>Easy_RSA</h2><p>跟上一题相似，也是求p和q的</p>
<p>先看p：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_p</span><span class="params">()</span>:</span></span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">assert</span> (p &lt; q)</span><br><span class="line">    n = p * q</span><br><span class="line">    print(<span class="string">"P_n = "</span>, n)</span><br><span class="line">    F_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"P_F_n = "</span>, F_n)</span><br><span class="line">    factor2 = <span class="number">2021</span> * p + <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (<span class="number">-1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br></pre></td></tr></table></figure>
<p>可以知道这里已知的数有n = p <em> q和φ(n) = (p-1) </em> (q-1) ，这里就可以使用二分法来计算</p>
<p>然后是q：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_q</span><span class="params">()</span>:</span></span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">assert</span> (p &lt; q)</span><br><span class="line">    n = p * q</span><br><span class="line">    print(<span class="string">"Q_n = "</span>, n)</span><br><span class="line">    e = getRandomNBitInteger(<span class="number">53</span>)</span><br><span class="line">    F_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> gcd(e, F_n) != <span class="number">1</span>:</span><br><span class="line">        e = getRandomNBitInteger(<span class="number">53</span>)</span><br><span class="line">    d = invert(e, F_n)</span><br><span class="line">    print(<span class="string">"Q_E_D = "</span>, e * d)</span><br><span class="line">    factor2 = <span class="number">2021</span> * p - <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (<span class="number">-1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br></pre></td></tr></table></figure>
<p>相当于是已知e，d，n，借鉴了<a href="https://blog.csdn.net/qq_41956187/article/details/105189556?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2" target="_blank" rel="noopener">大佬的博客</a></p>
<p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_P</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># P_n = p * q</span></span><br><span class="line">    P_n =  <span class="number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693</span></span><br><span class="line">    <span class="comment"># P_F_n = p*q - (p+q) + 1</span></span><br><span class="line">    P_F_n =  <span class="number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740</span></span><br><span class="line">    <span class="comment"># P_Q = p+q</span></span><br><span class="line">    P_Q = P_n - P_F_n + <span class="number">1</span></span><br><span class="line">    <span class="comment">#print P_Q</span></span><br><span class="line"></span><br><span class="line">    l=P_Q/<span class="number">2</span></span><br><span class="line">    r=P_Q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> l&lt;r:</span><br><span class="line">      p=(l+r)/<span class="number">2</span></span><br><span class="line">      y=p*(P_Q-p)</span><br><span class="line">      <span class="keyword">if</span> y==P_n:</span><br><span class="line">          <span class="comment">#print p</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> y&gt;P_n:</span><br><span class="line">          <span class="comment">#print 'y&gt;P_n'</span></span><br><span class="line">          l=p</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          <span class="comment">#print 'y&lt;P_n'</span></span><br><span class="line">          r=p</span><br><span class="line">      </span><br><span class="line">    <span class="comment">#print 'done'</span></span><br><span class="line">    q=P_Q-p</span><br><span class="line">    <span class="comment">#print q</span></span><br><span class="line">    <span class="keyword">if</span> p&gt;q:</span><br><span class="line">        p,q=q,p</span><br><span class="line">        factor2 = <span class="number">2021</span> * p + <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (<span class="number">-1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Q</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Q_n = p * q</span></span><br><span class="line">    Q_n =  <span class="number">20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947</span></span><br><span class="line">    <span class="comment"># Q_E_D = e * d</span></span><br><span class="line">    Q_E_D =  <span class="number">100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201</span></span><br><span class="line">    f, s, tem = Q_E_D<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> f % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        f = f // <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    i, a, t = s, <span class="number">2</span>, f</span><br><span class="line">    b = pow(a, t, Q_n)</span><br><span class="line">    <span class="keyword">while</span> b == <span class="number">1</span>:</span><br><span class="line">        a = sympy.nextprime(a)</span><br><span class="line">        b = pow(a, t, Q_n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i != <span class="number">1</span>:</span><br><span class="line">        c = pow(b, <span class="number">2</span>, Q_n)</span><br><span class="line">        <span class="keyword">if</span> c != <span class="number">1</span>:</span><br><span class="line">            b = c</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> b == Q_n<span class="number">-1</span>:</span><br><span class="line">        a = sympy.nextprime(a)</span><br><span class="line">        b = pow(a, t, Q_n)</span><br><span class="line">        <span class="keyword">while</span> b == <span class="number">1</span>:</span><br><span class="line">            a = sympy.nextprime(a)</span><br><span class="line">            b = pow(a, t, Q_n)</span><br><span class="line"></span><br><span class="line">    p = gcd(b<span class="number">-1</span>, Q_n)</span><br><span class="line">    q = Q_n//p</span><br><span class="line">    </span><br><span class="line">    factor2 = <span class="number">2021</span> * p - <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (<span class="number">-1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line">    </span><br><span class="line">p = get_P()</span><br><span class="line"><span class="keyword">print</span> p</span><br><span class="line">q = get_Q()</span><br><span class="line"><span class="keyword">print</span> q</span><br><span class="line">c =  <span class="number">40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br><span class="line"><span class="comment"># flag：MRCTF&#123;Ju3t_@_31mp13_que3t10n&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="你能看懂音符吗"><a href="#你能看懂音符吗" class="headerlink" title="你能看懂音符吗"></a>你能看懂音符吗</h2><p>打开压缩包，发现一文档，不知道把文档里的内容藏哪去了，直接解压文档，在document.xml中找到音符</p>
<p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue" target="_blank" rel="noopener">在线网站解密</a></p>
<p>flag：<code>MRCTF{thEse_n0tes_ArE_am@zing~}</code></p>
<h2 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h2><p>图片显示问题，估计改了高，爆破一下，修改得到flag<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'flag.png'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    all_b = f.read()</span><br><span class="line">    crc32key = int(all_b[<span class="number">29</span>:<span class="number">33</span>].hex(),<span class="number">16</span>)</span><br><span class="line">    data = bytearray(all_b[<span class="number">12</span>:<span class="number">29</span>])</span><br><span class="line">    n = <span class="number">4095</span>            <span class="comment">#理论上0xffffffff,但考虑到屏幕实际/cpu，0x0fff就差不多了</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> range(n):          <span class="comment">#高和宽一起爆破</span></span><br><span class="line">        width = bytearray(struct.pack(<span class="string">'&gt;i'</span>, w))     <span class="comment">#q为8字节，i为4字节，h为2字节</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(n):</span><br><span class="line">            height = bytearray(struct.pack(<span class="string">'&gt;i'</span>, h))</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">                data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">            crc32result = zlib.crc32(data)</span><br><span class="line">            <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">                print(<span class="string">"宽为："</span>,end=<span class="string">""</span>)</span><br><span class="line">                print(width)</span><br><span class="line">                print(<span class="string">"高为："</span>,end=<span class="string">""</span>)</span><br><span class="line">                print(height)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>flag:<code>MRCTF{1ts_vEryyyyyy_ez!}</code></p>
<h2 id="CyberPunk"><a href="#CyberPunk" class="headerlink" title="CyberPunk"></a>CyberPunk</h2><p>将系统时间改成2020/09/17就行了</p>
<p>flag:<code>MRCTF{We1cOm3_70_cyber_security}</code></p>
<h2 id="不眠之夜"><a href="#不眠之夜" class="headerlink" title="不眠之夜"></a>不眠之夜</h2><p>直接拼图</p>
<p>flag：<code>MRCTF{Why_4re_U_5o_ShuL1an??}</code></p>
<p>(听说nb的大佬都是直接montage，但是我这种菜鸟不会用啊啊啊)</p>
<h2 id="千层套路"><a href="#千层套路" class="headerlink" title="千层套路"></a>千层套路</h2><p>直接上解压脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile,os </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unzip</span><span class="params">(path,zfile)</span>:</span></span><br><span class="line">    file_path=path+os.sep+zfile</span><br><span class="line">    desdir=path</span><br><span class="line">    print(desdir)</span><br><span class="line">    srcfile=zipfile.ZipFile(file_path)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> srcfile.namelist():</span><br><span class="line">        srcfile.extract(filename,desdir,pwd= bytes(zfile.split(<span class="string">"."</span>)[<span class="number">0</span>],<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">'.zip'</span>):</span><br><span class="line">            <span class="comment"># if zipfile.is_zipfile(filename):</span></span><br><span class="line">            path=desdir</span><br><span class="line">            zfile=filename</span><br><span class="line">            unzip(path,zfile)</span><br><span class="line"></span><br><span class="line">path=<span class="string">"C:\\Users\\Admin\\Downloads\\[MRCTF2020]千层套路"</span></span><br><span class="line">zfile=<span class="string">"0573.zip"</span></span><br><span class="line">unzip(path,zfile)</span><br></pre></td></tr></table></figure>
<p>然后得到rgb</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">x=<span class="number">200</span></span><br><span class="line">y=<span class="number">200</span></span><br><span class="line">im=Image.new(<span class="string">"RGB"</span>,(x,y))</span><br><span class="line">file=open(<span class="string">'qr.txt'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,y):</span><br><span class="line">        line=file.readline()</span><br><span class="line">	rgb=line.replace(<span class="string">"\n"</span>,<span class="string">""</span>).replace(<span class="string">"("</span>,<span class="string">""</span>).replace(<span class="string">")"</span>,<span class="string">""</span>).split(<span class="string">", "</span>)</span><br><span class="line">	<span class="comment">#print rgb</span></span><br><span class="line">	<span class="keyword">if</span>(rgb[<span class="number">0</span>]==<span class="string">''</span>):</span><br><span class="line">	    <span class="keyword">continue</span></span><br><span class="line">	im.putpixel((i, j), (int(rgb[<span class="number">0</span>]), int(rgb[<span class="number">1</span>]), int(rgb[<span class="number">2</span>])))</span><br><span class="line">	</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure>
<p>得到二维码，扫码得flag：<code>MRCTF{ta01uyout1nreet1n0usandtimes}</code></p>
<h2 id="Unravel"><a href="#Unravel" class="headerlink" title="Unravel!!"></a>Unravel!!</h2><p>首先是Look_at_the_file_ending.wav文件，直接010打开，可以看到有一串字符串</p>
<p><code>key=U2FsdGVkX1/nSQN+hoHL8OwV9iJB/mSdKk5dmusulz4=</code></p>
<p>然后看看JM.png这张图片，binwalk，foremost一下，得到压缩包，解压得到aes.png图片，上面写着“Tokyo”</p>
<p>估计是aes加密，找个网站在线解密一下<a href="https://www.sojson.com/encrypt_aes.html" target="_blank" rel="noopener">https://www.sojson.com/encrypt_aes.html</a></p>
<p>又得到一串字符串<code>CCGandGulu</code></p>
<p>最后看看Ending.wav，用SilentEye打开，输入密码，得到flag:<code>MRCTF{Th1s_is_the_3nd1n9}</code></p>
<h2 id="Hello-misc"><a href="#Hello-misc" class="headerlink" title="Hello_ misc"></a>Hello_ misc</h2><p>拿到图片，binwalk,foremost直接走起，得到压缩包，然后用Stegsolve看看图片，将Red的0通道保存得到压缩包密码：<code>!@#$%67*()-+</code></p>
<p>压缩包解压后，打开文件是一大堆63,127,191,255，TTL隐写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = open(<span class="string">'out.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">a = fp.readlines()</span><br><span class="line">p = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    p.append(int(i))</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">63</span>:</span><br><span class="line">        a = <span class="string">'00'</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">127</span>:</span><br><span class="line">        a = <span class="string">'01'</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">191</span>:</span><br><span class="line">        a = <span class="string">'10'</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">255</span>:</span><br><span class="line">        a = <span class="string">'11'</span></span><br><span class="line">    s += a</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(s),<span class="number">8</span>):</span><br><span class="line">    flag += chr(int(s[i:i+<span class="number">8</span>],<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (flag)</span><br><span class="line"><span class="comment"># rar-passwd:0ac1fe6b77be5dbe</span></span><br></pre></td></tr></table></figure>
<p>得到了rar的密码：<code>0ac1fe6b77be5dbe</code></p>
<p>rar解压后发现文档中的5串base64编码，解码之后全是0和1</p>
<p>然后仔细一看，将1替换成空格，然后缩小至最小（sublime Text），就能看出flag了</p>
<p>flag:<code>MRCTF{He1Lo_mi5c~}</code> (居然是5。。。)</p>
<h2 id="pyFlag"><a href="#pyFlag" class="headerlink" title="pyFlag"></a>pyFlag</h2><p>给了3张图片，010打开发现文件尾都有点数据，foremost分不出来，仔细看了看，将三个数据合并成一个后，解压得到一个txt，里面是flag的base套娃，直接一个一个的试</p>
<p>解码顺序：base85-&gt;base16-&gt;base32-&gt;base16-&gt;base64</p>
<p>flag:<code>MRCTF{Y0u_Are_4_p3rFect_dec0der}</code></p>
<h2 id="寻找xxx"><a href="#寻找xxx" class="headerlink" title="寻找xxx"></a>寻找xxx</h2><p>电话音，使用dtmf2num.exe，得到电话号码18684221609</p>
<p>发送到公众号，得到flag:<code>MRCTF{Oh!!!_Y0u_f1nd_my_secret}</code></p>
<h2 id="A-Signal-From-ISS"><a href="#A-Signal-From-ISS" class="headerlink" title="A Signal From ISS"></a>A Signal From ISS</h2><p>SSTV无线电相关知识，将图片转换成声音，使用MMSSTV即可</p>
<p>flag:<code>merak{r3ce1ved_4n_img}</code></p>
<h2 id="小O的考研复试"><a href="#小O的考研复试" class="headerlink" title="小O的考研复试"></a>小O的考研复试</h2><p>简单数学题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">19260817</span>):</span><br><span class="line">  flag=(flag*<span class="number">10</span>+<span class="number">2</span>)%<span class="number">1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="comment"># 577302567</span></span><br></pre></td></tr></table></figure>
<p>flag:<code>MRCTF{577302567}</code></p>
]]></content>
      <tags>
        <tag>MISC</tag>
        <tag>CRYPTO</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA基础</title>
    <url>/2020/05/30/RSA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>几道基础的RSA题目</p>
<a id="more"></a>
<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><blockquote>
<p>题目：在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17<br>求解出d作为flga提交</p>
</blockquote>
<p>基础题，直接解<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">473398607161</span></span><br><span class="line">q=<span class="number">4511491</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">d=gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure></p>
<h1 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h1><p>题目给出了RSA的相关参数，直接求解<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">n = p * q</span><br><span class="line"><span class="keyword">print</span> pow(c, d, n)</span><br></pre></td></tr></table></figure></p>
<h1 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h1><ul>
<li>p，q，dp，dq，c</li>
</ul>
<p>脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">dp = </span><br><span class="line">dq = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi =(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">dd = gmpy2.gcd(p<span class="number">-1</span>,q<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">d=(dp-dq)//dd * gmpy2.invert((q<span class="number">-1</span>)//dd,(p<span class="number">-1</span>)//dd) * (q<span class="number">-1</span>) + dq</span><br><span class="line"></span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure>
<h1 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h1><ul>
<li>e，n，c，dp</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line">c = </span><br><span class="line">dp = </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,e):</span><br><span class="line">	<span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">        	p=(e*dp<span class="number">-1</span>)//x+<span class="number">1</span></span><br><span class="line">        	<span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line">        	    <span class="keyword">continue</span></span><br><span class="line">        	q=n//p</span><br><span class="line">        	phin=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">        	d=gmpy2.invert(e, phin)</span><br><span class="line">        	m=gmpy2.powmod(c, d, n)</span><br><span class="line">        	<span class="keyword">if</span>(len(hex(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line">        	    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure>
<h1 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h1><ul>
<li>共模攻击</li>
<li>n，e1，e2，c1，c2</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">c1=</span><br><span class="line">c2=</span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2) <span class="comment">#扩展欧几里得算法</span></span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">	s = -s</span><br><span class="line">	c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">	t = -t</span><br><span class="line">	c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure>
<h1 id="RSA-1"><a href="#RSA-1" class="headerlink" title="RSA"></a>RSA</h1><ul>
<li><p>openssl的使用</p>
<p><a href="https://github.com/ius/rsatool" target="_blank" rel="noopener">rsatool</a></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> openssl rsa -pubin -text -modulus -<span class="keyword">in</span> warmup -<span class="keyword">in</span> pub.key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> pyhton rsatool.py -o private.pem -e <span class="string">''</span> -p <span class="string">''</span> -q <span class="string">''</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> openssl rsautl -decrypt -<span class="keyword">in</span> flag.enc -inkey private.pem</span></span><br></pre></td></tr></table></figure>
<h1 id="RSAROLL"><a href="#RSAROLL" class="headerlink" title="RSAROLL"></a>RSAROLL</h1><ul>
<li>给出多个密文，逐一解密<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">920139713</span></span><br><span class="line">q = <span class="number">18443</span></span><br><span class="line">p = <span class="number">49891</span></span><br><span class="line">e = <span class="number">19</span></span><br><span class="line">d = int(gmpy2.invert(e , (p<span class="number">-1</span>) * (q<span class="number">-1</span>)))  </span><br><span class="line"></span><br><span class="line">c = <span class="string">'''704796792</span></span><br><span class="line"><span class="string">752211152</span></span><br><span class="line"><span class="string">274704164</span></span><br><span class="line"><span class="string">18414022</span></span><br><span class="line"><span class="string">368270835</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">263072905</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">663551792</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">704796792</span></span><br><span class="line"><span class="string">458265677</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">534149509</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">458265677</span></span><br><span class="line"><span class="string">263072905</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">828509797</span></span><br><span class="line"><span class="string">341524652</span></span><br><span class="line"><span class="string">425392137</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">428313374</span></span><br><span class="line"><span class="string">483295235</span></span><br><span class="line"><span class="string">475206804</span></span><br><span class="line"><span class="string">459788476</span></span><br><span class="line"><span class="string">306220148'''</span></span><br><span class="line">falg = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">'\n'</span>):</span><br><span class="line">	falg += chr(pow(int(i),d,n))</span><br><span class="line"><span class="keyword">print</span> falg</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Dangerous-RSA"><a href="#Dangerous-RSA" class="headerlink" title="Dangerous RSA"></a>Dangerous RSA</h1><ul>
<li>低加密指数攻击（e=3）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c =</span><br><span class="line">n = </span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">m = gmpy2.iroot(c,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure>
<h1 id="rsa2"><a href="#rsa2" class="headerlink" title="rsa2"></a>rsa2</h1><ul>
<li>低解密指数攻击（e非常大）<br><a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">rsa-wiener-attack</a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Finds d knowing(e,n)</span></span><br><span class="line">    <span class="comment"># applying the Wiener continued fraction attack</span></span><br><span class="line">    </span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</span><br><span class="line">        </span><br><span class="line">	<span class="comment"># check if d is actually the key</span></span><br><span class="line">	<span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d<span class="number">-1</span>)%k == <span class="number">0</span>:</span><br><span class="line">	    phi = (e*d<span class="number">-1</span>)//k</span><br><span class="line">	    s = n - phi + <span class="number">1</span></span><br><span class="line">	    <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">	    <span class="comment"># has integer</span></span><br><span class="line">	    discr = s*s - <span class="number">4</span>*n</span><br><span class="line">	    <span class="keyword">if</span>(discr &gt;= <span class="number">0</span>):</span><br><span class="line">		t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">		<span class="keyword">if</span> t!=<span class="number">-1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">		    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">		    <span class="keyword">return</span> d</span><br><span class="line">        </span><br><span class="line">n =</span><br><span class="line">e = </span><br><span class="line">d = hack_RSA(e,n)</span><br><span class="line">flag = <span class="string">"flag&#123;"</span> + hashlib.md5(hex(d)).hexdigest() + <span class="string">"&#125;"</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="RSA5"><a href="#RSA5" class="headerlink" title="RSA5"></a>RSA5</h1><p>题目给出了20对n，c</p>
<p>先将20个n两两取最大公因数，即可得到p（q），然后选取得到这个最大公因数的两个n中的其中一个，即可得到另一个素数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list=[n,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(list)):</span><br><span class="line">	<span class="keyword">print</span> i,j</span><br><span class="line">	<span class="keyword">try</span>:  </span><br><span class="line">	    <span class="keyword">print</span> (gmpy2.gcd(list[i],list[j]))</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">	    <span class="keyword">print</span> <span class="string">"error "</span>,i</span><br><span class="line">	<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>我这选的是n4，q=n4/p</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=</span><br><span class="line">q=n4/p</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">nn = p * q</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(pow(c4,d,nn))</span><br></pre></td></tr></table></figure>
<h1 id="SameMod"><a href="#SameMod" class="headerlink" title="SameMod"></a>SameMod</h1><ul>
<li>共模攻击</li>
</ul>
<p>脚本跟RSA3相同，但解出的m需要用ASCII码解<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = str(m)</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(string):</span><br><span class="line">    <span class="keyword">if</span> int(string[i:i+j]) &gt;= <span class="number">33</span> <span class="keyword">and</span> int(string[i:i+j]) &lt;=<span class="number">126</span>:</span><br><span class="line">        flag+=chr(int(string[i:i+j]))</span><br><span class="line">        i=i+j</span><br><span class="line">        j=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p>
<h1 id="RSA4"><a href="#RSA4" class="headerlink" title="RSA4"></a>RSA4</h1><ul>
<li>中国剩余定理</li>
</ul>
<p>使用中国剩余定理求解，但之前需做些转换，题目给出的n和c是5进制的<br>求出m之后转换出错，估计不是直接模的n，然后猜测e=3，开个根即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n1=  </span><br><span class="line">c1= </span><br><span class="line"></span><br><span class="line">n2=  </span><br><span class="line">c2= </span><br><span class="line"></span><br><span class="line">n3=  </span><br><span class="line">c3= </span><br><span class="line"></span><br><span class="line">ms=[n1,n2,n3]</span><br><span class="line">cs=[c1,c2,c3]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ms)):</span><br><span class="line">    ms[i]=int(str(ms[i]),<span class="number">5</span>)</span><br><span class="line">    cs[i]=int(str(cs[i]),<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span><span class="params">(bs,ms)</span>:</span></span><br><span class="line">    m = reduce(<span class="keyword">lambda</span> x,y: x*y, ms)</span><br><span class="line">    re = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ms)):</span><br><span class="line">        M = m / ms[i]</span><br><span class="line">        gcd, n1, M1 = gmpy2.gcdext(ms[i], M)<span class="comment"># ms[i]*n1 + M*M1 = 1</span></span><br><span class="line">        re += bs[i] * M * M1</span><br><span class="line">    <span class="keyword">return</span> re % m</span><br><span class="line"></span><br><span class="line">m = CRT(cs,ms)</span><br><span class="line">mm = gmpy2.iroot(m,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(mm)</span><br></pre></td></tr></table></figure>
<h1 id="RSA-amp-what"><a href="#RSA-amp-what" class="headerlink" title="RSA&amp;what"></a>RSA&amp;what</h1><ul>
<li>共模攻击</li>
<li>base64隐写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n=</span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">cc1=</span><br><span class="line">cc2=</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">samemod</span><span class="params">(c1,c2)</span>:</span></span><br><span class="line">    gcd, s, t = gmpy2.gcdext(e1, e2) </span><br><span class="line">    <span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">        s = -s</span><br><span class="line">	c1 = gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">        t = -t</span><br><span class="line">        c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">    m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cc1)):</span><br><span class="line">    <span class="keyword">print</span> libnum.n2s(samemod(cc1[i],cc2[i]))</span><br></pre></td></tr></table></figure>
<p>在将结果写进txt时，注意将base64合并一下，确保每行结尾为’=’<br>base64隐写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://www.jianshu.com/p/48fe4dd3e5ce</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64_diff_value</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">    base64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> abs(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_stego</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'0.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            norm_line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>).decode(<span class="string">'base64'</span>).encode(<span class="string">'base64'</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="keyword">print</span> diff</span><br><span class="line">            pads_num = steg_line.count(<span class="string">'='</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += bin(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">'0'</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="keyword">print</span> goflag(bin_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goflag</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    res_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += chr(int(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure>
<h1 id="坏蛋是雷宾"><a href="#坏蛋是雷宾" class="headerlink" title="坏蛋是雷宾"></a>坏蛋是雷宾</h1><ul>
<li>Rabin算法</li>
</ul>
<p>原理详见：<a href="https://wiki.x10sec.org/crypto/asymmetric/rsa/rsa_e_attack/" target="_blank" rel="noopener">https://wiki.x10sec.org/crypto/asymmetric/rsa/rsa_e_attack/</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">n=<span class="number">523798549</span></span><br><span class="line">p=<span class="number">10663</span></span><br><span class="line">q=<span class="number">49123</span></span><br><span class="line">e=<span class="number">2</span></span><br><span class="line">c=<span class="number">162853095</span></span><br><span class="line">inv_p = invert(p, q)</span><br><span class="line">inv_q = invert(q, p)</span><br><span class="line"></span><br><span class="line">mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line">a = (inv_p * p * mq + inv_q * q * mp) % n</span><br><span class="line">b = n - int(a)</span><br><span class="line">c = (inv_p * p * mq - inv_q * q * mp) % n</span><br><span class="line">d = n - int(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (a, b, c, d):</span><br><span class="line">    print(bin(i)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#10010011100100100101010110001  </span></span><br><span class="line">m=<span class="string">'10010011100100100101010'</span></span><br><span class="line">mc=str(int(m,<span class="number">2</span>))</span><br><span class="line">md=hashlib.md5()</span><br><span class="line">md.update(mc.encode(<span class="string">"utf8"</span>))</span><br><span class="line">flag = md.hexdigest()</span><br><span class="line">print(<span class="string">"flag&#123;"</span>+str(flag)+<span class="string">'&#125;'</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>CRYPTO</tag>
        <tag>BUU</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF中RSA的常见套路</title>
    <url>/2020/02/22/CTF%E4%B8%ADRSA%E7%9A%84%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF/</url>
    <content><![CDATA[<p>当时学习RSA的时候感觉挺简单的，但一到做题时，就发现还有很多地方没有理解透，这里记录一下CTF中RSA的常见套路，参考来源：<a href="https://wiki.x10sec.org/crypto/introduction/" target="_blank" rel="noopener">https://wiki.x10sec.org/crypto/introduction/</a><br><a href="https://err0rzz.github.io/2017/11/14/CTF%E4%B8%ADRSA%E5%A5%97%E8%B7%AF/index.html" target="_blank" rel="noopener">https://err0rzz.github.io/2017/11/14/CTF中RSA套路/index.html</a><br>这里仅记录一些代码，具体解法还请参考：<a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84632</a><br>需要注意：关于gmpy2库的使用，可以参考<a href="https://www.cnblogs.com/pcat/p/5746821.html" target="_blank" rel="noopener">https://www.cnblogs.com/pcat/p/5746821.html</a></p>
<a id="more"></a>
<h1 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h1><p>一般来说，RSA都围绕着c,m,d,n,p,q这几个参数展开，但不会给出全部，给出其中几个来求解。数据的给出也有以下几种方式：  </p>
<ul>
<li>txt文件：直接给出已知数据，分析求解</li>
<li>源文件：直接将加密的源文件给出，通过分析源代码，编写程序求解</li>
<li>pem文件：针对这类文件需要使用openssl来提取数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl rsa -pubin -text -modulus -in warmup -in public.pem</span><br><span class="line">openssl rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc</span><br></pre></td></tr></table></figure></li>
<li>pcap文件：针对这类文件可以使用wireshake follow一下。这种问题一般都是写了一个交互式crypto系统，可能产生多轮交互</li>
<li>ppc模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出</li>
</ul>
<h1 id="模数分解"><a href="#模数分解" class="headerlink" title="模数分解"></a>模数分解</h1><p>先说一说RSA中最简单最暴力的，直接分解n，一般给出的n不会太大</p>
<h2 id="已知n求p，q"><a href="#已知n求p，q" class="headerlink" title="已知n求p，q"></a>已知n求p，q</h2><ul>
<li>在线分解：<a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a><br>通过在此类网站上查询n，如果可以分解或者之前分解成功过，那么可以直接得到p和q。此类问题一般是分值较小的题目，提取出n之后可以发现n的长度小于等于512bit，可以直接取分解n。如果大于512bit，建议在使用每个题目都用后面所说的方法去解题。</li>
<li>yafu分解：<a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="noopener">https://sourceforge.net/projects/yafu/</a><br>下载解压后直接打开程序，输入factor(n)，n为要分解的数，即可</li>
<li>公约数分解n：一般这种是用于题目给出了两个及以上的n，可以使用这种方法来得到p和q，然后n1与n2的最大公因数就是p，再用n1或n2除以p就能得到q1或q2  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">      a, b = b, a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">      temp = a % b</span><br><span class="line">      a = b</span><br><span class="line">      b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">p = gcd(n1, n2)</span><br><span class="line">q1 = n1/p</span><br><span class="line">q2 = n2/p</span><br></pre></td></tr></table></figure>
或者直接使用gmpy2库<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(n1, n2)</span><br><span class="line">q1 = n1/p</span><br><span class="line">q2 = n2/p</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="已知e，p，q求d"><a href="#已知e，p，q求d" class="headerlink" title="已知e，p，q求d"></a>已知e，p，q求d</h2><p>一般e都是直接给出的，然后得到p和q之后，便可以求d<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      g, y, x = egcd(b % a, a)</span><br><span class="line">      <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">d = modinv(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者使用gmpy2</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br></pre></td></tr></table></figure></p>
<h2 id="已知c，d，n求m"><a href="#已知c，d，n求m" class="headerlink" title="已知c，d，n求m"></a>已知c，d，n求m</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pow(c, d, n)</span><br></pre></td></tr></table></figure>
<h1 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h1><h2 id="e-3时的小明文攻击"><a href="#e-3时的小明文攻击" class="headerlink" title="e = 3时的小明文攻击"></a>e = 3时的小明文攻击</h2><p>识别：e=3时<br>如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。<br>如果明文的三次方虽然比n大，但是大不了多少，则可以爆破。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">if</span>(gmpy2.iroot(c+i*n, <span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">print</span> gmpy2.iroot(c+i*n, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h2 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a>低加密指数广播攻击</h2><p>如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。<br>这个识别起来比较简单，一般来说都是给了三组加密的参数和明密文，其中题目很明确地能告诉你这三组的明文都是一样的，并且e都取了一个较小的数字。<br>（个人还没做到过）</p>
<h1 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a>低解密指数攻击</h1><p>识别：简单来说，就是e非常大<br>GitHub上的开源攻击代码：<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a><br>这里注意一个细节问题，如果在运行脚本的时候报错，请在脚本前加上：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>   sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000000</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Finds d knowing (e,n)</span></span><br><span class="line"><span class="string">    applying the Wiener continued fraction attack</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#check if d is actually the key</span></span><br><span class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d<span class="number">-1</span>)%k == <span class="number">0</span>:</span><br><span class="line">            phi = (e*d<span class="number">-1</span>)//k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">            <span class="comment"># has integer roots</span></span><br><span class="line">            discr = s*s - <span class="number">4</span>*n</span><br><span class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t!=<span class="number">-1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">d = hack_RSA(e,n)</span><br></pre></td></tr></table></figure></p>
<h1 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h1><p>识别：若干次加密，e不同，n相同，m相同。就可以在不分解n和求d的前提下，解出明文m。<br>给出了c1，c2，e1，e2，n<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">	s = -s</span><br><span class="line">	c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">	t = -t</span><br><span class="line">	c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br></pre></td></tr></table></figure></p>
<h1 id="已知dp，dq"><a href="#已知dp，dq" class="headerlink" title="已知dp，dq"></a>已知dp，dq</h1><p>最开始看到dp和dq时还查了好久，不知道啥意思，推导参考：<a href="https://beiyuouo.github.io/beiyuouo.github.io/blog/ctf-buuctf/" target="_blank" rel="noopener">https://beiyuouo.github.io/beiyuouo.github.io/blog/ctf-buuctf/</a></p>
<h2 id="已知dp，dq，p，q，c"><a href="#已知dp，dq，p，q，c" class="headerlink" title="已知dp，dq，p，q，c"></a>已知dp，dq，p，q，c</h2><p>其中</p>
<script type="math/tex; mode=display">
dp \equiv d \pmod {\varphi(p)}，
dq \equiv d \pmod {\varphi(q)}</script><p>使用中国剩余定理即可，但p-1与q-1不互质，推导如下：</p>
<script type="math/tex; mode=display">
dd=gcd(p-1,q-1) \\
d=k_1{\varphi(p)}+dp=k_2{\varphi(q)}+dq \\
k_2{\varphi(q)} \equiv {dp - dq} \pmod{\varphi(p)} \\
k_2 \frac {\varphi(q)}{dd} \equiv \frac{dp-dq}{dd} \pmod {\frac{\varphi(p)}{dd}} \\
k_2 = k' \frac{\varphi(p)}{dd} + \frac{dp-dq}{dd} (\frac{\varphi(q)}{dd})^{-1}</script><p>最后</p>
<script type="math/tex; mode=display">
d=k_2{\varphi(q)}+dq=(k'\frac{\varphi(p)}{dd}+\frac{pd-dq}{dd} 
({\frac{\varphi(q)}{dd}})^{-1}){\varphi(q)}+dq</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">dd = gmpy2.gcd(p<span class="number">-1</span>, q<span class="number">-1</span>)</span><br><span class="line">d=(dp-dq)//dd * gmyp2.invert((q<span class="number">-1</span>)//dd, (p<span class="number">-1</span>)//dd) * (q<span class="number">-1</span>) +dq</span><br></pre></td></tr></table></figure>
<h2 id="已知e，n，dp，c"><a href="#已知e，n，dp，c" class="headerlink" title="已知e，n，dp，c"></a>已知e，n，dp，c</h2><p>dp同上</p>
<script type="math/tex; mode=display">
e*dp \equiv ed \pmod{\varphi(p)} \\
ed=k{\varphi(p)}+e*dp \\
ed = (k{\varphi(p)}+e*dp) \equiv 1 \pmod{\varphi(n)} \\
k{\varphi(p)}+e*dp=k'(p-1)(q-1)+1 \\
移项得\\
(p-1)(k'(q-1)-k)+1=e*dp \\
\because dp<{\varphi(p)} \\
\therefore e=65537>(k'(q-1)-k)=x</script><p>然后枚举x就可以计算出p-1<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,e):</span><br><span class="line">	<span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">        	p=(e*dp<span class="number">-1</span>)//x+<span class="number">1</span></span><br><span class="line">        	<span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line">        	    <span class="keyword">continue</span></span><br><span class="line">        	q=n//p</span><br><span class="line">        	phin=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">        	d=gmpy2.invert(e, phin)</span><br><span class="line">        	m=gmpy2.powmod(c, d, n)</span><br><span class="line">        	<span class="keyword">if</span>(len(hex(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line">        	    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> m</span><br></pre></td></tr></table></figure></p>
<h1 id="已知e，d，n"><a href="#已知e，d，n" class="headerlink" title="已知e，d，n"></a>已知e，d，n</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="comment"># n = p * q</span></span><br><span class="line">n =</span><br><span class="line"><span class="comment"># e_d = e * d</span></span><br><span class="line">e_d = </span><br><span class="line">f, s, tem = e_d<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> f % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    f = f // <span class="number">2</span></span><br><span class="line">    s += <span class="number">1</span></span><br><span class="line">i, a, t = s, <span class="number">2</span>, f</span><br><span class="line">b = pow(a, t, n)</span><br><span class="line"><span class="keyword">while</span> b == <span class="number">1</span>:</span><br><span class="line">    a = sympy.nextprime(a)</span><br><span class="line">    b = pow(a, t, n)</span><br><span class="line"><span class="keyword">while</span> i != <span class="number">1</span>:</span><br><span class="line">    c = pow(b, <span class="number">2</span>, n)</span><br><span class="line">    <span class="keyword">if</span> c != <span class="number">1</span>:</span><br><span class="line">        b = c</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> b == n<span class="number">-1</span>:</span><br><span class="line">    a = sympy.nextprime(a)</span><br><span class="line">    b = pow(a, t, n)</span><br><span class="line">    <span class="keyword">while</span> b == <span class="number">1</span>:</span><br><span class="line">        a = sympy.nextprime(a)</span><br><span class="line">        b = pow(a, t, n)</span><br><span class="line">p = gmpy2.gcd(b<span class="number">-1</span>, n)</span><br><span class="line">q = n//p</span><br></pre></td></tr></table></figure>
<h1 id="已知n-pq-，-p-1-q-1"><a href="#已知n-pq-，-p-1-q-1" class="headerlink" title="已知n(pq)，(p-1)(q-1)"></a>已知n(p<em>q)，(p-1)</em>(q-1)</h1><p>利用二分法求p，q<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n = p * q</span></span><br><span class="line">n =</span><br><span class="line"><span class="comment"># phi = (p- 1 ) * (q - 1)</span></span><br><span class="line">phi =</span><br><span class="line"></span><br><span class="line">c=n-phi+<span class="number">1</span> <span class="comment"># p + q</span></span><br><span class="line">l=c/<span class="number">2</span></span><br><span class="line">r=c</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> l&lt;r:</span><br><span class="line">    p=(l+r)/<span class="number">2</span></span><br><span class="line">    y=p*(c-p)</span><br><span class="line">        <span class="keyword">if</span> y==n:</span><br><span class="line">            <span class="keyword">print</span> p</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> y&gt;n:</span><br><span class="line">            l=p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r=p</span><br><span class="line">q=c-p</span><br><span class="line"><span class="keyword">print</span> q</span><br></pre></td></tr></table></figure></p>
<h1 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">ms=[]</span><br><span class="line">cs=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span><span class="params">(bs,ms)</span>:</span></span><br><span class="line">    m = reduce(<span class="keyword">lambda</span> x,y: x*y, ms)</span><br><span class="line">    re = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ms)):</span><br><span class="line">        M = m / ms[i]</span><br><span class="line">        gcd, n1, M1 = gmpy2.gcdext(ms[i], M)<span class="comment"># ms[i]*n1 + M*M1 = 1</span></span><br><span class="line">        re += bs[i] * M * M1</span><br><span class="line">    <span class="keyword">return</span> re % m</span><br><span class="line">m = CRT(cs,ms)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CRYPTO</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>Tonelli–Shanks Algorithm</title>
    <url>/2020/06/01/Tonelli%E2%80%93Shanks-Algorithm/</url>
    <content><![CDATA[<blockquote>
<p>参考：<a href="http://en.wikipedia.org/wiki/Tonelli–Shanks_algorithm" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm</a></p>
</blockquote>
<p>Tonelli–Shanks算法是一个求解二次平方根的算法</p>
<script type="math/tex; mode=display">
x^2 \equiv n \pmod p</script><p>其中n是p的二次剩余，p为奇素数</p>
<a id="more"></a>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>输入:</p>
<ul>
<li>p,一个素数</li>
<li>n,一个模p的二次剩余</li>
</ul>
<p>输出:</p>
<ul>
<li>r, $ r^2 \equiv n \pmod p $</li>
</ul>
<p>算法:</p>
<ol>
<li>从p-1分解出2的幂次，即有:p-1=Q*2^S，其中Q是奇素数。如果S=1，即$p \equiv 3 \pmod 4$，然后直接返回$r \equiv \pm n^{\frac{p+1}{4}}$。</li>
<li>计算z，使得其满足L(z,p)=-1，令 $c \equiv z^Q$</li>
<li>令 $r \equiv n^{\frac{Q+1}{2}} , t \equiv n^Q , m = s$</li>
<li>循环：<ul>
<li>如果$t\equiv 1$，返回r</li>
<li>否则，找到最小的一个i(0&lt;i&lt;m)，且$t^{2i} \equiv 1$</li>
<li>令 $b \equiv c^{2^{m-i-1}}$，再令 $r\equiv br$,$t\equiv tb^2$,$c\equiv b^2$,$m=i$</li>
</ul>
</li>
</ol>
<p>如果得到一个解r，另一个解就是p-r</p>
<h1 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h1><p>首先有p-1=Q*2^S，令$r\equiv n^{\frac{Q+1}{2}}\pmod{p}, t\equiv n^Q\pmod p$，注意到有$r^2\equiv nt\pmod p$，这一同余式在每次循环中都保持正确；如果在某一时间点，$t \equiv 1\pmod p$，则有$r^2\equiv n\pmod p$，于是就找到n的二次平方根$R\equiv \pm r\pmod p$</p>
<p>如果$t!\equiv 1\pmod p$，那就考虑二次非剩余z；令$c\equiv z^Q\pmod p$，然后就有$c^{2^S}\equiv {(z^Q)}^{2^S}\equiv z^{2^SQ}\equiv z^{p-1}\equiv 1\pmod p$，并且$c^{2^{S-1}}\equiv z^{\frac{p-1}{2}}\equiv -1 \pmod p$，这意味着c的阶是$2^S$</p>
<p>类似地，$t^{2^S}\equiv 1\pmod p$，故t的阶能整除$2^S$；假设t的阶是$2^{S’}$，由于n是模p的二次剩余，$S’\leq S-1$</p>
<p>现在令$b \equiv c^{2^{m-i-1}}\pmod p$,$r’\equiv br\pmod p$,$c’\equiv b^2\pmod p$,$t’\equiv c’t\pmod p$,和之前一样，${r’}^2\equiv nt’ \pmod p$任然成立；然而现在的t和c’的阶数都是$2^{S’}$，这意味着t’的阶数$2^{S’’}$满足$S’’&lt;S’$</p>
<p>如果$s’’\equiv 0\pmod p$，则$t’\equiv 1\pmod p$，算法终止，返回$R\equiv \pm r’\pmod p$，否则重新执行循环，定义$b’,r’’,c’’,t’’$……直到停止；由于S序列严格递减，算法一定会结束</p>
<h1 id="实现-python"><a href="#实现-python" class="headerlink" title="实现(python)"></a>实现(python)</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">legendre</span><span class="params">(a,p)</span>:</span></span><br><span class="line">    symbol = pow(a, (p - <span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line">    <span class="keyword">if</span> symbol == p - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> symbol</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tonelli</span><span class="params">(a,p)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">or</span> legendre(a,p) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    q = p - <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        q //= <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> s == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> pow(n, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">    </span><br><span class="line">    z = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> legendre(z, p) != <span class="number">-1</span>:</span><br><span class="line">        z += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    m = s</span><br><span class="line">    c = pow(z, q, p)</span><br><span class="line">    t = pow(a, q, p)</span><br><span class="line">    r = pow(a, (a +<span class="number">1</span>) // <span class="number">2</span>, p)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> t!= <span class="number">1</span>:</span><br><span class="line">        t2 = t</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> t2 != <span class="number">1</span> <span class="keyword">and</span> i &lt; m:</span><br><span class="line">            t2 = pow(t2, <span class="number">2</span>, p)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        b = pow(c, <span class="number">2</span> ** (m - i - <span class="number">1</span>), p)</span><br><span class="line">        m = i</span><br><span class="line">        c = (b * b) % p</span><br><span class="line">        t = (t * c) % p</span><br><span class="line">        r = (r * b) % p</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>RSA</tag>
        <tag>Algorithm</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
